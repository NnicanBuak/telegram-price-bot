<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="15" skipped="0" tests="93" time="6.380" timestamp="2025-08-09T23:07:13.672852+08:00" hostname="DESKTOP-L3VL5UE"><testcase classname="tests.test_bot.TestConfig" name="test_config_loading" file="tests\test_bot.py" line="32" time="0.176" /><testcase classname="tests.test_bot.TestConfig" name="test_config_validation" file="tests\test_bot.py" line="39" time="0.009" /><testcase classname="tests.test_bot.TestDatabase" name="test_create_template" file="tests\test_bot.py" line="60" time="0.097" /><testcase classname="tests.test_bot.TestDatabase" name="test_create_template_with_file" file="tests\test_bot.py" line="72" time="0.037" /><testcase classname="tests.test_bot.TestDatabase" name="test_get_templates" file="tests\test_bot.py" line="85" time="0.053" /><testcase classname="tests.test_bot.TestDatabase" name="test_update_template" file="tests\test_bot.py" line="96" time="0.064" /><testcase classname="tests.test_bot.TestDatabase" name="test_delete_template" file="tests\test_bot.py" line="112" time="0.050" /><testcase classname="tests.test_bot.TestDatabase" name="test_create_chat_group" file="tests\test_bot.py" line="123" time="0.041" /><testcase classname="tests.test_bot.TestDatabase" name="test_get_chat_groups" file="tests\test_bot.py" line="135" time="0.049" /><testcase classname="tests.test_bot.TestDatabase" name="test_create_mailing" file="tests\test_bot.py" line="146" time="0.055" /><testcase classname="tests.test_bot.TestDatabase" name="test_update_mailing_stats" file="tests\test_bot.py" line="161" time="0.061" /><testcase classname="tests.test_bot.TestMenuSystem" name="test_menu_initialization" file="tests\test_bot.py" line="190" time="0.002" /><testcase classname="tests.test_bot.TestMenuSystem" name="test_is_admin" file="tests\test_bot.py" line="196" time="0.003" /><testcase classname="tests.test_bot.TestMenuSystem" name="test_get_menu_access" file="tests\test_bot.py" line="202" time="0.003" /><testcase classname="tests.test_bot.TestMenuSystem" name="test_menu_navigation" file="tests\test_bot.py" line="216" time="0.003" /><testcase classname="tests.test_bot.TestMenuSystem" name="test_build_keyboard" file="tests\test_bot.py" line="239" time="0.004" /><testcase classname="tests.test_bot.TestMenuMiddleware" name="test_middleware_passes_admin" file="tests\test_bot.py" line="255" time="0.008" /><testcase classname="tests.test_config.TestSmartConfig" name="test_automatic_test_mode_detection" file="tests\test_config.py" line="14" time="0.003" /><testcase classname="tests.test_config.TestSmartConfig" name="test_test_token_usage" file="tests\test_config.py" line="23" time="0.006" /><testcase classname="tests.test_config.TestSmartConfig" name="test_production_token_usage" file="tests\test_config.py" line="40" time="0.015"><failure message="AssertionError: assert 'test_token' == 'prod_token'&#10;  &#10;  #x1B[0m#x1B[91m- prod_token#x1B[39;49;00m#x1B[90m#x1B[39;49;00m&#10;  #x1B[92m+ test_token#x1B[39;49;00m#x1B[90m#x1B[39;49;00m">self = &lt;tests.test_config.TestSmartConfig object at 0x0000025C908C5CD0&gt;

    def test_production_token_usage(self):
        """Тест использования продакшн токена"""
        with patch.dict(
            os.environ,
            {
                "BOT_TOKEN": "prod_token",
                "TEST_BOT_TOKEN": "test_token",
                "ENVIRONMENT": "production",
            },
        ):
            config = Config()
    
            # В продакшене должен использоваться BOT_TOKEN
&gt;           assert config.bot_token == "prod_token"
E           AssertionError: assert 'test_token' == 'prod_token'
E             
E             #x1B[0m#x1B[91m- prod_token#x1B[39;49;00m#x1B[90m#x1B[39;49;00m
E             #x1B[92m+ test_token#x1B[39;49;00m#x1B[90m#x1B[39;49;00m

tests\test_config.py:54: AssertionError</failure></testcase><testcase classname="tests.test_config.TestSmartConfig" name="test_fallback_to_main_token" file="tests\test_config.py" line="57" time="0.004" /><testcase classname="tests.test_config.TestSmartConfig" name="test_test_admin_ids" file="tests\test_config.py" line="74" time="0.007" /><testcase classname="tests.test_config.TestSmartConfig" name="test_test_database_settings" file="tests\test_config.py" line="89" time="0.003" /><testcase classname="tests.test_config.TestSmartConfig" name="test_test_mailing_settings" file="tests\test_config.py" line="97" time="0.002"><failure message="assert 0.1 == 0.0&#10; +  where 0.1 = &lt;config.Config object at 0x0000025C90C88F30&gt;.mailing_delay">self = &lt;tests.test_config.TestSmartConfig object at 0x0000025C908B2360&gt;

    def test_test_mailing_settings(self):
        """Тест настроек рассылки для тестов"""
        config = Config()
    
        # В тестах рассылка должна быть ускорена
&gt;       assert config.mailing_delay == 0.0  # Без задержки
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 0.1 == 0.0
E        +  where 0.1 = &lt;config.Config object at 0x0000025C90C88F30&gt;.mailing_delay

tests\test_config.py:103: AssertionError</failure></testcase><testcase classname="tests.test_config.TestSmartConfig" name="test_environment_detection_methods" file="tests\test_config.py" line="106" time="0.009"><failure message="assert True is False&#10; +  where True = &lt;config.Config object at 0x0000025C90B5CA50&gt;.is_testing">self = &lt;tests.test_config.TestSmartConfig object at 0x0000025C90872350&gt;

    def test_environment_detection_methods(self):
        """Тест методов определения окружения"""
        # Тестовое окружение
        with patch.dict(os.environ, {"ENVIRONMENT": "testing"}):
            config = Config()
            assert config.is_testing is True
            assert config.is_development is False
            assert config.is_production is False
            assert config.debug_mode is True
    
        # Продакшн окружение
        with patch.dict(os.environ, {"ENVIRONMENT": "production", "DEBUG": "false"}):
            config = Config()
&gt;           assert config.is_testing is False
E           assert True is False
E            +  where True = &lt;config.Config object at 0x0000025C90B5CA50&gt;.is_testing

tests\test_config.py:120: AssertionError</failure></testcase><testcase classname="tests.test_config.TestSmartConfig" name="test_pytest_detection" file="tests\test_config.py" line="132" time="0.004" /><testcase classname="tests.test_config.TestSmartConfig" name="test_config_string_representation" file="tests\test_config.py" line="139" time="0.002" /><testcase classname="tests.test_config.TestSmartConfig" name="test_missing_tokens_error" file="tests\test_config.py" line="155" time="0.007" /><testcase classname="tests.test_config.TestSmartConfig" name="test_missing_admin_ids_error" file="tests\test_config.py" line="162" time="0.005" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_create_template_minimal" file="tests\test_database.py" line="59" time="0.042" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_create_template_with_file" file="tests\test_database.py" line="74" time="0.035" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_create_template_with_photo" file="tests\test_database.py" line="87" time="0.036" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_get_template_by_id" file="tests\test_database.py" line="99" time="0.043" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_get_nonexistent_template" file="tests\test_database.py" line="111" time="0.034" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_get_all_templates" file="tests\test_database.py" line="117" time="0.101" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_update_template" file="tests\test_database.py" line="129" time="0.063" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_update_nonexistent_template" file="tests\test_database.py" line="148" time="0.033" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_delete_template" file="tests\test_database.py" line="154" time="0.048" /><testcase classname="tests.test_database.TestTemplateOperations" name="test_delete_nonexistent_template" file="tests\test_database.py" line="168" time="0.034" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_create_chat_group" file="tests\test_database.py" line="178" time="0.036" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_create_empty_chat_group" file="tests\test_database.py" line="193" time="0.040" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_get_chat_group_by_id" file="tests\test_database.py" line="200" time="0.050" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_get_all_chat_groups" file="tests\test_database.py" line="212" time="0.107" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_get_chat_groups_by_ids" file="tests\test_database.py" line="224" time="0.105" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_update_chat_group" file="tests\test_database.py" line="239" time="0.051" /><testcase classname="tests.test_database.TestChatGroupOperations" name="test_delete_chat_group" file="tests\test_database.py" line="252" time="0.051" /><testcase classname="tests.test_database.TestMailingOperations" name="test_create_mailing" file="tests\test_database.py" line="268" time="0.124" /><testcase classname="tests.test_database.TestMailingOperations" name="test_update_mailing_stats" file="tests\test_database.py" line="288" time="0.134" /><testcase classname="tests.test_database.TestMailingOperations" name="test_get_mailings_history" file="tests\test_database.py" line="308" time="0.131" /><testcase classname="tests.test_database.TestMailingOperations" name="test_get_mailings_history_with_limit" file="tests\test_database.py" line="327" time="0.167" /><testcase classname="tests.test_integration.TestFullWorkflow" name="test_complete_mailing_workflow" file="tests\test_integration.py" line="42" time="0.077" /><testcase classname="tests.test_integration.TestFullWorkflow" name="test_menu_navigation_workflow" file="tests\test_integration.py" line="102" time="0.035"><failure message="AssertionError: assert 'Бот для рассылки прайс-листов' in '❌ Меню не найдено или нет доступа'">self = &lt;tests.test_integration.TestFullWorkflow object at 0x0000025C908B6FD0&gt;
test_environment = (&lt;config.Config object at 0x0000025C90F77D90&gt;, &lt;database.database.Database object at 0x0000025C90F12150&gt;, &lt;menu_system.MenuManager object at 0x0000025C90F2BB10&gt;)

    @pytest.mark.asyncio
    async def test_menu_navigation_workflow(self, test_environment):
        """Тест навигации по меню"""
        config, db, menu_manager = test_environment
    
        admin_id = 123456789
    
        # Начальное меню
        text, keyboard = menu_manager.render_menu("main", admin_id)
&gt;       assert "Бот для рассылки прайс-листов" in text
E       AssertionError: assert 'Бот для рассылки прайс-листов' in '❌ Меню не найдено или нет доступа'

tests\test_integration.py:112: AssertionError</failure></testcase><testcase classname="tests.test_integration.TestFullWorkflow" name="test_access_control_workflow" file="tests\test_integration.py" line="133" time="0.036"><failure message="assert None is not None">self = &lt;tests.test_integration.TestFullWorkflow object at 0x0000025C908C69E0&gt;
test_environment = (&lt;config.Config object at 0x0000025C9118D630&gt;, &lt;database.database.Database object at 0x0000025C9119BD50&gt;, &lt;menu_system.MenuManager object at 0x0000025C90F2A490&gt;)

    @pytest.mark.asyncio
    async def test_access_control_workflow(self, test_environment):
        """Тест контроля доступа"""
        config, db, menu_manager = test_environment
    
        admin_id = 123456789
        regular_user_id = 111111111
    
        # Админ имеет доступ
        admin_menu = menu_manager.get_menu("main", admin_id)
&gt;       assert admin_menu is not None
E       assert None is not None

tests\test_integration.py:144: AssertionError</failure></testcase><testcase classname="tests.test_integration.TestBotIntegration" name="test_bot_initialization" file="tests\test_integration.py" line="184" time="0.047"><failure message="ImportError: cannot import name 'bot' from 'src.main' (C:\Users\Nnican\Desktop\Projects\my_best_mailing_bot\src\main.py)">self = &lt;tests.test_integration.TestBotIntegration object at 0x0000025C908B7110&gt;
test_environment = (&lt;config.Config object at 0x0000025C9117F150&gt;, &lt;database.database.Database object at 0x0000025C90F55940&gt;, &lt;menu_system.MenuManager object at 0x0000025C911D8180&gt;)

    @pytest.mark.asyncio
    async def test_bot_initialization(self, test_environment):
        """Тест инициализации бота"""
        config, db, menu_manager = test_environment
    
        with patch("aiogram.Bot") as MockBot:
            mock_bot = MockBot.return_value
            mock_bot.get_me = AsyncMock(
                return_value=MagicMock(
                    id=123456789, username="test_bot", first_name="Test Bot"
                )
            )
    
            # Импортируем после патча
&gt;           from src.main import bot, dp
E           ImportError: cannot import name 'bot' from 'src.main' (C:\Users\Nnican\Desktop\Projects\my_best_mailing_bot\src\main.py)

tests\test_integration.py:199: ImportError</failure></testcase><testcase classname="tests.test_integration.TestBotIntegration" name="test_command_handlers" file="tests\test_integration.py" line="204" time="0.031"><failure message="ImportError: cannot import name 'cmd_start' from 'src.main' (C:\Users\Nnican\Desktop\Projects\my_best_mailing_bot\src\main.py)">self = &lt;tests.test_integration.TestBotIntegration object at 0x0000025C908B7250&gt;
test_environment = (&lt;config.Config object at 0x0000025C90E97BD0&gt;, &lt;database.database.Database object at 0x0000025C911BBAF0&gt;, &lt;menu_system.MenuManager object at 0x0000025C911D96E0&gt;)

    @pytest.mark.asyncio
    async def test_command_handlers(self, test_environment):
        """Тест обработчиков команд"""
        config, db, menu_manager = test_environment
    
        # Создаем мок сообщения
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 123456789  # Admin
        message.chat = MagicMock()
        message.chat.id = 123456789
        message.chat.type = "private"
        message.answer = AsyncMock()
    
        # Тест команды /start
&gt;       from src.main import cmd_start
E       ImportError: cannot import name 'cmd_start' from 'src.main' (C:\Users\Nnican\Desktop\Projects\my_best_mailing_bot\src\main.py)

tests\test_integration.py:220: ImportError</failure></testcase><testcase classname="tests.test_integration.TestBotIntegration" name="test_callback_query_handling" file="tests\test_integration.py" line="237" time="0.035"><failure message="assert False is True">self = &lt;tests.test_integration.TestBotIntegration object at 0x0000025C908C6B10&gt;
test_environment = (&lt;config.Config object at 0x0000025C90DAEA50&gt;, &lt;database.database.Database object at 0x0000025C91224350&gt;, &lt;menu_system.MenuManager object at 0x0000025C90959B50&gt;)

    @pytest.mark.asyncio
    async def test_callback_query_handling(self, test_environment):
        """Тест обработки callback query"""
        config, db, menu_manager = test_environment
    
        # Создаем мок callback query
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123456789  # Admin
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.message.edit_reply_markup = AsyncMock()
        callback.answer = AsyncMock()
        callback.data = "menu_templates"
    
        # Навигация в меню шаблонов
        success = await menu_manager.navigate_to("templates", callback)
    
&gt;       assert success is True
E       assert False is True

tests\test_integration.py:256: AssertionError</failure></testcase><testcase classname="tests.test_integration.TestDatabaseIntegration" name="test_database_with_real_data" file="tests\test_integration.py" line="263" time="0.153" /><testcase classname="tests.test_integration.TestErrorHandling" name="test_database_connection_error" file="tests\test_integration.py" line="331" time="0.043" /><testcase classname="tests.test_integration.TestErrorHandling" name="test_invalid_bot_token" file="tests\test_integration.py" line="338" time="0.006"><failure message="assert 'Invalid token' in &quot;cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)&quot;&#10; +  where &quot;cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)&quot; = str(ImportError(&quot;cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)&quot;))">self = &lt;tests.test_integration.TestErrorHandling object at 0x0000025C908B7610&gt;

    @pytest.mark.asyncio
    async def test_invalid_bot_token(self):
        """Тест неверного токена бота"""
        os.environ["BOT_TOKEN"] = "invalid:token:format"
    
        with patch("aiogram.Bot") as MockBot:
            mock_bot = MockBot.return_value
            mock_bot.get_me = AsyncMock(side_effect=Exception("Invalid token"))
    
            try:
&gt;               from src.main import bot
E               ImportError: cannot import name 'bot' from 'src.main' (C:\Users\Nnican\Desktop\Projects\my_best_mailing_bot\src\main.py)

tests\test_integration.py:349: ImportError

During handling of the above exception, another exception occurred:

self = &lt;tests.test_integration.TestErrorHandling object at 0x0000025C908B7610&gt;

    @pytest.mark.asyncio
    async def test_invalid_bot_token(self):
        """Тест неверного токена бота"""
        os.environ["BOT_TOKEN"] = "invalid:token:format"
    
        with patch("aiogram.Bot") as MockBot:
            mock_bot = MockBot.return_value
            mock_bot.get_me = AsyncMock(side_effect=Exception("Invalid token"))
    
            try:
                from src.main import bot
    
                bot_info = await bot.get_me()
                assert False, "Should raise exception"
            except Exception as e:
&gt;               assert "Invalid token" in str(e)
E               assert 'Invalid token' in "cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)"
E                +  where "cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)" = str(ImportError("cannot import name 'bot' from 'src.main' (C:\\Users\\Nnican\\Desktop\\Projects\\my_best_mailing_bot\\src\\main.py)"))

tests\test_integration.py:354: AssertionError</failure></testcase><testcase classname="tests.test_integration.TestErrorHandling" name="test_missing_admin_ids" file="tests\test_integration.py" line="355" time="0.004"><failure message="Failed: DID NOT RAISE &lt;class 'ValueError'&gt;">self = &lt;tests.test_integration.TestErrorHandling object at 0x0000025C908C6C40&gt;

    @pytest.mark.asyncio
    async def test_missing_admin_ids(self):
        """Тест отсутствия админских ID"""
        os.environ["BOT_TOKEN"] = "test:token"
        os.environ["ADMIN_IDS"] = ""
    
&gt;       with pytest.raises(ValueError, match="ADMIN_IDS"):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE &lt;class 'ValueError'&gt;

tests\test_integration.py:362: Failed</failure></testcase><testcase classname="tests.test_integration.TestErrorHandling" name="test_menu_error_handling" file="tests\test_integration.py" line="364" time="0.040" /><testcase classname="tests.test_integration.TestPerformance" name="test_large_scale_operation" file="tests\test_integration.py" line="386" time="0.831" /><testcase classname="tests.test_menu_system.TestMenuItem" name="test_menu_item_creation" file="tests\test_menu_system.py" line="16" time="0.004" /><testcase classname="tests.test_menu_system.TestMenuItem" name="test_menu_item_defaults" file="tests\test_menu_system.py" line="34" time="0.003" /><testcase classname="tests.test_menu_system.TestMenu" name="test_menu_creation" file="tests\test_menu_system.py" line="54" time="0.002" /><testcase classname="tests.test_menu_system.TestMenu" name="test_add_item" file="tests\test_menu_system.py" line="70" time="0.003" /><testcase classname="tests.test_menu_system.TestMenu" name="test_remove_item" file="tests\test_menu_system.py" line="81" time="0.003" /><testcase classname="tests.test_menu_system.TestMenu" name="test_method_chaining" file="tests\test_menu_system.py" line="95" time="0.002" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_initialization" file="tests\test_menu_system.py" line="116" time="0.004"><failure message="AssertionError: assert 'main' in {}&#10; +  where {} = &lt;menu_system.MenuManager object at 0x0000025C90ECB950&gt;.menus">self = &lt;tests.test_menu_system.TestMenuManager object at 0x0000025C908B7ED0&gt;, manager = &lt;menu_system.MenuManager object at 0x0000025C90ECB950&gt;

    def test_initialization(self, manager):
        """Тест инициализации менеджера"""
        assert 123 in manager.admin_ids
        assert 456 in manager.admin_ids
        assert 789 in manager.admin_ids
    
        # Проверка стандартных меню
&gt;       assert "main" in manager.menus
E       AssertionError: assert 'main' in {}
E        +  where {} = &lt;menu_system.MenuManager object at 0x0000025C90ECB950&gt;.menus

tests\test_menu_system.py:124: AssertionError</failure></testcase><testcase classname="tests.test_menu_system.TestMenuManager" name="test_is_admin" file="tests\test_menu_system.py" line="128" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_register_menu" file="tests\test_menu_system.py" line="135" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_get_menu_access_control" file="tests\test_menu_system.py" line="143" time="0.005"><failure message="assert None is not None">self = &lt;tests.test_menu_system.TestMenuManager object at 0x0000025C908C7360&gt;, manager = &lt;menu_system.MenuManager object at 0x0000025C912B3690&gt;

    def test_get_menu_access_control(self, manager):
        """Тест контроля доступа к меню"""
        # Админ получает меню
        menu = manager.get_menu("main", 123)
&gt;       assert menu is not None
E       assert None is not None

tests\test_menu_system.py:148: AssertionError</failure></testcase><testcase classname="tests.test_menu_system.TestMenuManager" name="test_current_menu_tracking" file="tests\test_menu_system.py" line="154" time="0.004" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_menu_history" file="tests\test_menu_system.py" line="169" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_history_limit" file="tests\test_menu_system.py" line="191" time="0.004" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_build_keyboard_simple" file="tests\test_menu_system.py" line="205" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_build_keyboard_with_icons" file="tests\test_menu_system.py" line="218" time="0.004" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_build_keyboard_columns" file="tests\test_menu_system.py" line="234" time="0.004" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_build_keyboard_with_back_button" file="tests\test_menu_system.py" line="248" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_visibility_control" file="tests\test_menu_system.py" line="265" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_admin_only_items" file="tests\test_menu_system.py" line="287" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_render_menu" file="tests\test_menu_system.py" line="312" time="0.003"><failure message="AssertionError: assert 'Бот для рассылки прайс-листов' in '❌ Меню не найдено или нет доступа'">self = &lt;tests.test_menu_system.TestMenuManager object at 0x0000025C9092F450&gt;, manager = &lt;menu_system.MenuManager object at 0x0000025C91336B50&gt;

    def test_render_menu(self, manager):
        """Тест рендеринга меню"""
        text, keyboard = manager.render_menu("main", 123)
    
&gt;       assert "Бот для рассылки прайс-листов" in text
E       AssertionError: assert 'Бот для рассылки прайс-листов' in '❌ Меню не найдено или нет доступа'

tests\test_menu_system.py:317: AssertionError</failure></testcase><testcase classname="tests.test_menu_system.TestMenuManager" name="test_render_nonexistent_menu" file="tests\test_menu_system.py" line="323" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_navigate_to" file="tests\test_menu_system.py" line="330" time="0.018"><failure message="assert False is True">self = &lt;tests.test_menu_system.TestMenuManager object at 0x0000025C9090D790&gt;, manager = &lt;menu_system.MenuManager object at 0x0000025C9134D780&gt;

    @pytest.mark.asyncio
    async def test_navigate_to(self, manager):
        """Тест навигации к меню"""
        # Мок callback query
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()
    
        # Навигация к существующему меню
        success = await manager.navigate_to("templates", callback)
    
&gt;       assert success is True
E       assert False is True

tests\test_menu_system.py:345: AssertionError</failure></testcase><testcase classname="tests.test_menu_system.TestMenuManager" name="test_navigate_to_access_denied" file="tests\test_menu_system.py" line="354" time="0.020" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_add_dynamic_menu" file="tests\test_menu_system.py" line="373" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_export_menu_config" file="tests\test_menu_system.py" line="398" time="0.004"><failure message="AssertionError: assert 'main' in {}">self = &lt;tests.test_menu_system.TestMenuManager object at 0x0000025C909223F0&gt;, manager = &lt;menu_system.MenuManager object at 0x0000025C91216740&gt;

    def test_export_menu_config(self, manager):
        """Тест экспорта конфигурации меню"""
        config_json = manager.export_menu_config()
        config = json.loads(config_json)
    
&gt;       assert "main" in config
E       AssertionError: assert 'main' in {}

tests\test_menu_system.py:404: AssertionError</failure></testcase><testcase classname="tests.test_menu_system.TestMenuManager" name="test_import_menu_config" file="tests\test_menu_system.py" line="418" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuManager" name="test_register_callback" file="tests\test_menu_system.py" line="461" time="0.003" /><testcase classname="tests.test_menu_system.TestMenuMiddleware" name="test_middleware_adds_manager" file="tests\test_menu_system.py" line="482" time="0.010" /><testcase classname="tests.test_menu_system.TestMenuMiddleware" name="test_middleware_blocks_non_admin" file="tests\test_menu_system.py" line="497" time="0.016" /><testcase classname="tests.test_menu_system.TestMenuMiddleware" name="test_middleware_allows_admin" file="tests\test_menu_system.py" line="522" time="0.017" /><testcase classname="tests.test_menu_system.TestMenuMiddleware" name="test_middleware_allows_group_messages" file="tests\test_menu_system.py" line="545" time="0.018" /></testsuite></testsuites>