"""
–†–∞—Å—à–∏—Ä—è–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é –¥–ª—è Telegram –±–æ—Ç–∞
"""

from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, field
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import json


@dataclass
class MenuItem:
    """–≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é"""

    id: str
    text: str
    callback_data: str
    icon: str = ""
    admin_only: bool = True
    visible: bool = True
    action: Optional[Callable] = None
    submenu: Optional[str] = None
    parent: Optional[str] = None
    row: Optional[int] = None  # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—ã


@dataclass
class Menu:
    """–ú–µ–Ω—é —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""

    id: str
    title: str
    description: str = ""
    items: List[MenuItem] = field(default_factory=list)
    back_button: bool = True
    back_to: Optional[str] = None
    columns: int = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫

    def add_item(self, item: MenuItem):
        """–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –º–µ–Ω—é"""
        item.parent = self.id
        self.items.append(item)
        return self

    def remove_item(self, item_id: str):
        """–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–µ–Ω—é"""
        self.items = [item for item in self.items if item.id != item_id]
        return self


class MenuManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é"""

    def __init__(self, admin_ids: List[int]):
        self.menus: Dict[str, Menu] = {}
        self.admin_ids = admin_ids
        self.current_menu: Dict[int, str] = {}  # user_id -> menu_id
        self.menu_history: Dict[int, List[str]] = {}  # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self._callbacks: Dict[str, Callable] = {}  # callback_data -> function
        self._init_default_menus()

    def _init_default_menus(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ–Ω—é"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_menu = Menu(
            id="main",
            title="ü§ñ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤</b>",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            back_button=False,
        )

        main_menu.add_item(
            MenuItem(
                id="templates_btn",
                text="–®–∞–±–ª–æ–Ω—ã",
                icon="üìã",
                callback_data="menu_templates",
                submenu="templates",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="groups_btn",
                text="–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤",
                icon="üë•",
                callback_data="menu_groups",
                submenu="groups",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="mailing_btn",
                text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                icon="üìÆ",
                callback_data="create_mailing",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="history_btn",
                text="–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫",
                icon="üìä",
                callback_data="history",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="settings_btn",
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                icon="‚öôÔ∏è",
                callback_data="menu_settings",
                submenu="settings",
            )
        )

        self.register_menu(main_menu)

        # –ú–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤
        templates_menu = Menu(
            id="templates",
            title="üìã <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b>",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:",
            back_to="main",
        )

        templates_menu.add_item(
            MenuItem(
                id="new_template",
                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                icon="‚ûï",
                callback_data="new_template",
            )
        )

        templates_menu.add_item(
            MenuItem(
                id="list_templates",
                text="–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤",
                icon="üìÑ",
                callback_data="list_templates",
            )
        )

        templates_menu.add_item(
            MenuItem(
                id="import_template",
                text="–ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–∞",
                icon="üì•",
                callback_data="import_template",
            )
        )

        self.register_menu(templates_menu)

        # –ú–µ–Ω—é –≥—Ä—É–ø–ø
        groups_menu = Menu(
            id="groups",
            title="üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏:",
            back_to="main",
        )

        groups_menu.add_item(
            MenuItem(
                id="new_group",
                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
                icon="‚ûï",
                callback_data="new_group",
            )
        )

        groups_menu.add_item(
            MenuItem(
                id="list_groups",
                text="–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø",
                icon="üìù",
                callback_data="list_groups",
            )
        )

        groups_menu.add_item(
            MenuItem(
                id="import_chats",
                text="–ò–º–ø–æ—Ä—Ç —á–∞—Ç–æ–≤",
                icon="üì•",
                callback_data="import_chats",
            )
        )

        self.register_menu(groups_menu)

        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_menu = Menu(
            id="settings",
            title="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
            description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:",
            back_to="main",
        )

        settings_menu.add_item(
            MenuItem(
                id="mailing_settings",
                text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏",
                icon="üì¨",
                callback_data="mailing_settings",
            )
        )

        settings_menu.add_item(
            MenuItem(
                id="admin_list",
                text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                icon="üë§",
                callback_data="admin_list",
            )
        )

        settings_menu.add_item(
            MenuItem(
                id="backup", text="–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è", icon="üíæ", callback_data="backup"
            )
        )

        settings_menu.add_item(
            MenuItem(
                id="statistics",
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                icon="üìà",
                callback_data="statistics",
            )
        )

        self.register_menu(settings_menu)

    def register_menu(self, menu: Menu):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω—é"""
        self.menus[menu.id] = menu
        return self

    def register_callback(self, callback_data: str, handler: Callable):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è callback_data"""
        self._callbacks[callback_data] = handler
        return self

    def get_callback_handler(self, callback_data: str) -> Optional[Callable]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data"""
        return self._callbacks.get(callback_data)

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_ids

    def get_menu(self, menu_id: str, user_id: int) -> Optional[Menu]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_admin(user_id):
            return None
        return self.menus.get(menu_id)

    def get_current_menu(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.current_menu.get(user_id)

    def set_current_menu(self, user_id: int, menu_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.current_menu[user_id] = menu_id

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in self.menu_history:
            self.menu_history[user_id] = []

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        history = self.menu_history[user_id]
        if not history or history[-1] != menu_id:
            history.append(menu_id)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            if len(history) > 10:
                history.pop(0)

    def go_back(self, user_id: int) -> Optional[str]:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é"""
        history = self.menu_history.get(user_id, [])
        if len(history) > 1:
            history.pop()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            previous_menu = history[-1]
            self.current_menu[user_id] = previous_menu
            return previous_menu
        return None

    def build_keyboard(self, menu: Menu, user_id: int) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é"""
        buttons = []
        current_row = []
        current_row_num = 0

        for item in menu.items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not item.visible:
                continue

            if item.admin_only and not self.is_admin(user_id):
                continue

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
            btn_text = f"{item.icon} {item.text}" if item.icon else item.text
            btn = InlineKeyboardButton(text=btn_text, callback_data=item.callback_data)

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä—è–¥–∞–º
            if item.row is not None and item.row != current_row_num:
                if current_row:
                    buttons.append(current_row)
                current_row = [btn]
                current_row_num = item.row
            else:
                current_row.append(btn)

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
                if len(current_row) >= menu.columns:
                    buttons.append(current_row)
                    current_row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        if current_row:
            buttons.append(current_row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        if menu.back_button and menu.back_to:
            back_btn = InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data=f"menu_{menu.back_to}"
            )
            buttons.append([back_btn])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    def render_menu(
        self, menu_id: str, user_id: int
    ) -> tuple[str, InlineKeyboardMarkup]:
        """–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –º–µ–Ω—é (—Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)"""
        menu = self.get_menu(menu_id, user_id)
        if not menu:
            return "‚ùå –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = menu.title
        if menu.description:
            text += f"\n\n{menu.description}"

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = self.build_keyboard(menu, user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        self.set_current_menu(user_id, menu_id)

        return text, keyboard

    async def navigate_to(self, menu_id: str, callback: types.CallbackQuery):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –º–µ–Ω—é"""
        user_id = callback.from_user.id
        text, keyboard = self.render_menu(menu_id, user_id)

        if keyboard:
            await callback.message.edit_text(
                text, reply_markup=keyboard, parse_mode="HTML"
            )
            await callback.answer()
            return True
        else:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é", show_alert=True)
            return False

    def add_dynamic_menu(
        self,
        menu_id: str,
        title: str,
        items: List[Dict[str, Any]],
        back_to: str = "main",
    ):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é"""
        menu = Menu(id=menu_id, title=title, back_to=back_to)

        for item_data in items:
            item = MenuItem(
                id=item_data.get("id", ""),
                text=item_data.get("text", ""),
                icon=item_data.get("icon", ""),
                callback_data=item_data.get("callback_data", ""),
                admin_only=item_data.get("admin_only", True),
            )
            menu.add_item(item)

        self.register_menu(menu)
        return menu

    def export_menu_config(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –≤ JSON"""
        config = {}
        for menu_id, menu in self.menus.items():
            config[menu_id] = {
                "title": menu.title,
                "description": menu.description,
                "back_to": menu.back_to,
                "columns": menu.columns,
                "items": [
                    {
                        "id": item.id,
                        "text": item.text,
                        "icon": item.icon,
                        "callback_data": item.callback_data,
                        "admin_only": item.admin_only,
                        "visible": item.visible,
                        "submenu": item.submenu,
                        "row": item.row,
                    }
                    for item in menu.items
                ],
            }
        return json.dumps(config, ensure_ascii=False, indent=2)

    def import_menu_config(self, config_json: str):
        """–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –∏–∑ JSON"""
        config = json.loads(config_json)

        for menu_id, menu_data in config.items():
            menu = Menu(
                id=menu_id,
                title=menu_data["title"],
                description=menu_data.get("description", ""),
                back_to=menu_data.get("back_to"),
                columns=menu_data.get("columns", 1),
            )

            for item_data in menu_data.get("items", []):
                item = MenuItem(
                    id=item_data["id"],
                    text=item_data["text"],
                    icon=item_data.get("icon", ""),
                    callback_data=item_data["callback_data"],
                    admin_only=item_data.get("admin_only", True),
                    visible=item_data.get("visible", True),
                    submenu=item_data.get("submenu"),
                    row=item_data.get("row"),
                )
                menu.add_item(item)

            self.register_menu(menu)


class MenuMiddleware:
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é"""

    def __init__(self, menu_manager: MenuManager):
        self.menu_manager = menu_manager

    async def __call__(self, handler, event, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º menu_manager –≤ data –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
        data["menu_manager"] = self.menu_manager

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, types.Message):
            if event.chat.type == "private":
                user_id = event.from_user.id
                if not self.menu_manager.is_admin(user_id):
                    await event.answer(
                        "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        return await handler(event, data)
