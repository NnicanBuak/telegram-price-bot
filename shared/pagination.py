"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–∞—Ö
–í—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ handlers –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
"""

from typing import List, Any, Optional, Callable
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class PaginationHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def create_paginated_keyboard(
        items: List[Any],
        page: int = 0,
        items_per_page: int = 5,
        item_text_func: Optional[Callable[[Any], str]] = None,
        item_callback_func: Optional[Callable[[Any], str]] = None,
        item_icon: str = "üìÑ",
        page_callback_prefix: str = "page",
        show_navigation: bool = True,
        show_page_info: bool = True,
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
            items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            item_text_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
            item_callback_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è callback_data –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
            item_icon: –ò–∫–æ–Ω–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            page_callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            show_navigation: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            show_page_info: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            additional_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        """
        buttons = []
        total_items = len(items)
        total_pages = (
            (total_items + items_per_page - 1) // items_per_page
            if total_items > 0
            else 1
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = max(0, min(page, total_pages - 1))

        # –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, total_items)
        page_items = items[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for item in page_items:
            if item_text_func:
                text = item_text_func(item)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
                text = getattr(item, "name", getattr(item, "title", str(item)))

            if item_callback_func:
                callback_data = item_callback_func(item)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞
                item_id = getattr(item, "id", None)
                callback_data = f"item_{item_id}" if item_id else "unknown"

            button_text = f"{item_icon} {text}".strip() if item_icon else text
            buttons.append(
                [InlineKeyboardButton(text=button_text, callback_data=callback_data)]
            )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if show_navigation and total_pages > 1:
            nav_row = []

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            if page > 0:
                nav_row.append(
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è", callback_data=f"{page_callback_prefix}_{page-1}"
                    )
                )

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if show_page_info:
                nav_row.append(
                    InlineKeyboardButton(
                        text=f"{page + 1}/{total_pages}",
                        callback_data="noop",  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                    )
                )

            # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
            if page < total_pages - 1:
                nav_row.append(
                    InlineKeyboardButton(
                        text="‚ñ∂Ô∏è", callback_data=f"{page_callback_prefix}_{page+1}"
                    )
                )

            if nav_row:
                buttons.append(nav_row)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            buttons.extend(additional_buttons)

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_simple_list_keyboard(
        items: List[Any],
        item_text_func: Optional[Callable[[Any], str]] = None,
        item_callback_func: Optional[Callable[[Any], str]] = None,
        item_icon: str = "üìÑ",
        columns: int = 1,
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            item_text_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            item_callback_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è callback_data
            item_icon: –ò–∫–æ–Ω–∫–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
            additional_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        """
        buttons = []

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
        for i in range(0, len(items), columns):
            row = []
            for j in range(columns):
                if i + j < len(items):
                    item = items[i + j]

                    if item_text_func:
                        text = item_text_func(item)
                    else:
                        text = getattr(item, "name", getattr(item, "title", str(item)))

                    if item_callback_func:
                        callback_data = item_callback_func(item)
                    else:
                        item_id = getattr(item, "id", None)
                        callback_data = f"item_{item_id}" if item_id else "unknown"

                    button_text = f"{item_icon} {text}".strip() if item_icon else text
                    row.append(
                        InlineKeyboardButton(
                            text=button_text, callback_data=callback_data
                        )
                    )

            if row:
                buttons.append(row)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            buttons.extend(additional_buttons)

        return InlineKeyboardMarkup(inline_keyboard=buttons)


class ConfirmationHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

    @staticmethod
    def create_confirmation_keyboard(
        confirm_text: str = "‚úÖ –î–∞",
        cancel_text: str = "‚ùå –û—Ç–º–µ–Ω–∞",
        confirm_callback: str = "confirm",
        cancel_callback: str = "cancel",
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        buttons = [
            [
                InlineKeyboardButton(text=confirm_text, callback_data=confirm_callback),
                InlineKeyboardButton(text=cancel_text, callback_data=cancel_callback),
            ]
        ]

        if additional_buttons:
            buttons.extend(additional_buttons)

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_back_keyboard(
        back_text: str = "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        back_callback: str = "back",
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        buttons = [[InlineKeyboardButton(text=back_text, callback_data=back_callback)]]

        if additional_buttons:
            buttons.extend(additional_buttons)

        return InlineKeyboardMarkup(inline_keyboard=buttons)


class MenuHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ–Ω—é"""

    @staticmethod
    def create_crud_menu(
        title: str,
        create_text: str = "‚ûï –°–æ–∑–¥–∞—Ç—å",
        list_text: str = "üìã –°–ø–∏—Å–æ–∫",
        create_callback: str = "create",
        list_callback: str = "list",
        back_text: str = "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        back_callback: str = "back",
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ CRUD –º–µ–Ω—é

        Returns:
            tuple: (text, keyboard)
        """
        buttons = [
            [InlineKeyboardButton(text=create_text, callback_data=create_callback)],
            [InlineKeyboardButton(text=list_text, callback_data=list_callback)],
        ]

        if additional_buttons:
            buttons.extend(additional_buttons)

        buttons.append(
            [InlineKeyboardButton(text=back_text, callback_data=back_callback)]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return title, keyboard

    @staticmethod
    def create_edit_menu(
        item_name: str,
        edit_name_callback: str = "edit_name",
        edit_content_callback: str = "edit_content",
        delete_callback: str = "delete",
        back_callback: str = "back",
        additional_buttons: Optional[List[List[InlineKeyboardButton]]] = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=edit_name_callback
                ),
                InlineKeyboardButton(
                    text="üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ", callback_data=edit_content_callback
                ),
            ],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback)],
        ]

        if additional_buttons:
            buttons.extend(additional_buttons)

        buttons.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
        )

        return InlineKeyboardMarkup(inline_keyboard=buttons)


def parse_page_from_callback(callback_data: str, prefix: str = "page") -> int:
    """
    –ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data

    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä "page_2")
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –ø–µ—Ä–µ–¥ –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        int: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    """
    try:
        if callback_data.startswith(f"{prefix}_"):
            return int(callback_data.split("_")[-1])
    except (ValueError, IndexError):
        pass
    return 0


def parse_id_from_callback(callback_data: str, prefix: str = "item") -> Optional[int]:
    """
    –ò–∑–≤–ª–µ—á—å ID –∏–∑ callback_data

    Args:
        callback_data: –°—Ç—Ä–æ–∫–∞ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä "view_template_123")
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –ø–µ—Ä–µ–¥ ID

    Returns:
        Optional[int]: ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None
    """
    try:
        parts = callback_data.split("_")
        if len(parts) >= 2:
            return int(parts[-1])
    except (ValueError, IndexError):
        pass
    return None
