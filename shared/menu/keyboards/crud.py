from typing import List, Optional, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from .base import BaseKeyboard
from .confirmation import ConfirmationKeyboard


class CrudKeyboard(BaseKeyboard):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""

    @staticmethod
    def create_main_menu(
        entity_name: str,
        create_callback: str = "create",
        list_callback: str = "list",
        search_callback: str = "search",
        back_callback: str = "back",
        show_search: bool = True,
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ CRUD –º–µ–Ω—é

        Returns:
            tuple: (menu_text, keyboard)
        """
        text = f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {entity_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        buttons = [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data=create_callback)],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data=list_callback)],
        ]

        if show_search:
            buttons.append(
                [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data=search_callback)]
            )

        buttons.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return text, keyboard

    @staticmethod
    def create_item_actions(
        item_name: str,
        view_callback: str = "view",
        edit_callback: str = "edit",
        copy_callback: str = "copy",
        delete_callback: str = "delete",
        back_callback: str = "back",
        additional_actions: Optional[Dict[str, str]] = None,
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞

        Returns:
            tuple: (menu_text, keyboard)
        """
        text = f"üìÑ <b>{item_name}</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"

        buttons = [
            [
                InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=view_callback),
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=edit_callback
                ),
            ],
            [
                InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=copy_callback),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=delete_callback),
            ],
        ]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if additional_actions:
            for text_btn, callback in additional_actions.items():
                buttons.append(
                    [InlineKeyboardButton(text=text_btn, callback_data=callback)]
                )

        buttons.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return text, keyboard

    @staticmethod
    def create_edit_menu(
        item_name: str,
        edit_fields: Dict[str, str],
        save_callback: str = "save",
        preview_callback: str = "preview",
        cancel_callback: str = "cancel",
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            item_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
            edit_fields: –°–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–ª—è: callback_data}

        Returns:
            tuple: (menu_text, keyboard)
        """
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {item_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

        buttons = []

        # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for field_name, callback_data in edit_fields.items():
            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"üìù {field_name}", callback_data=callback_data
                    )
                ]
            )

        # –î–µ–π—Å—Ç–≤–∏—è
        buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=save_callback
                    ),
                    InlineKeyboardButton(
                        text="üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
                        callback_data=preview_callback,
                    ),
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)],
            ]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return text, keyboard

    @staticmethod
    def create_list_toolbar(
        sort_callback: str = "sort",
        filter_callback: str = "filter",
        export_callback: str = "export",
        refresh_callback: str = "refresh",
        show_export: bool = True,
    ) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        toolbar = [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=refresh_callback),
            InlineKeyboardButton(text="üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data=sort_callback),
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä", callback_data=filter_callback),
        ]

        if show_export:
            toolbar.append(
                InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data=export_callback)
            )

        return toolbar


class FormKeyboard:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏"""

    @staticmethod
    def create_form_navigation(
        current_step: int,
        total_steps: int,
        next_callback: str = "form_next",
        prev_callback: str = "form_prev",
        save_callback: str = "form_save",
        cancel_callback: str = "form_cancel",
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ñ–æ—Ä–º–µ"""
        buttons = []

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        nav_row = []
        if current_step > 1:
            nav_row.append(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=prev_callback)
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–≥–µ
        nav_row.append(
            InlineKeyboardButton(
                text=f"–®–∞–≥ {current_step}/{total_steps}", callback_data="noop"
            )
        )

        if current_step < total_steps:
            nav_row.append(
                InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=next_callback)
            )

        buttons.append(nav_row)

        # –î–µ–π—Å—Ç–≤–∏—è
        action_row = []
        if current_step == total_steps:
            action_row.append(
                InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=save_callback)
            )

        action_row.append(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)
        )

        buttons.append(action_row)

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def create_field_input(
        field_name: str,
        field_type: str,
        skip_callback: str = "field_skip",
        clear_callback: str = "field_clear",
        help_callback: str = "field_help",
        allow_skip: bool = False,
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—è

        Returns:
            tuple: (prompt_text, keyboard)
        """
        text = f"üìù <b>–í–≤–µ–¥–∏—Ç–µ {field_name}</b>\n\n"

        if field_type == "text":
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif field_type == "number":
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ"
        elif field_type == "file":
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª"
        elif field_type == "photo":
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"
        else:
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ"

        buttons = []

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        action_row = [
            InlineKeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å", callback_data=clear_callback),
            InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data=help_callback),
        ]

        if allow_skip:
            action_row.append(
                InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=skip_callback)
            )

        buttons.append(action_row)

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return text, keyboard


class BulkActionKeyboard:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""

    @staticmethod
    def create_bulk_selection(
        total_items: int,
        selected_count: int,
        select_all_callback: str = "select_all",
        deselect_all_callback: str = "deselect_all",
        invert_selection_callback: str = "invert_selection",
    ) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        return [
            InlineKeyboardButton(
                text=f"‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ ({total_items})", callback_data=select_all_callback
            ),
            InlineKeyboardButton(
                text=f"‚òê –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data=deselect_all_callback
            ),
            InlineKeyboardButton(
                text="üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=invert_selection_callback
            ),
        ]

    @staticmethod
    def create_bulk_actions(
        selected_count: int,
        actions: Dict[str, str],
        cancel_callback: str = "bulk_cancel",
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        if selected_count == 0:
            text_button = "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"
            buttons = [[InlineKeyboardButton(text=text_button, callback_data="noop")]]
        else:
            buttons = []
            for action_text, callback_data in actions.items():
                action_with_count = f"{action_text} ({selected_count})"
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=action_with_count, callback_data=callback_data
                        )
                    ]
                )

        buttons.append(
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)]
        )

        return InlineKeyboardMarkup(inline_keyboard=buttons)


class StatusKeyboard:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏"""

    @staticmethod
    def create_status_change(
        current_status: str,
        available_statuses: Dict[str, str],
        status_callback_prefix: str = "status",
        back_callback: str = "back",
    ) -> tuple[str, InlineKeyboardMarkup]:
        """
        –°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

        Returns:
            tuple: (status_text, keyboard)
        """
        text = f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {current_status}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"

        buttons = []
        for status_name, status_value in available_statuses.items():
            if status_value != current_status:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"üìå {status_name}",
                            callback_data=f"{status_callback_prefix}_{status_value}",
                        )
                    ]
                )

        buttons.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return text, keyboard


def create_entity_menu(
    entity_name: str, entity_name_plural: str = None
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ CRUD –º–µ–Ω—é

    Returns:
        tuple: (menu_text, keyboard)
    """
    if entity_name_plural is None:
        entity_name_plural = entity_name + "—ã"

    return CrudKeyboard.create_main_menu(
        entity_name=entity_name_plural,
        create_callback=f"create_{entity_name}",
        list_callback=f"list_{entity_name}",
        search_callback=f"search_{entity_name}",
        back_callback="main",
    )


def create_item_menu(
    entity_name: str, item_id: int, item_name: str = None
) -> tuple[str, InlineKeyboardMarkup]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º

    Returns:
        tuple: (menu_text, keyboard)
    """
    display_name = item_name or f"{entity_name} #{item_id}"

    return CrudKeyboard.create_item_actions(
        item_name=display_name,
        view_callback=f"view_{entity_name}_{item_id}",
        edit_callback=f"edit_{entity_name}_{item_id}",
        copy_callback=f"copy_{entity_name}_{item_id}",
        delete_callback=f"delete_{entity_name}_{item_id}",
        back_callback=f"list_{entity_name}",
    )
