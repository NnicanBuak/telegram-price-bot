"""
–¢–µ—Å—Ç—ã –¥–ª—è Telegram Price Bot
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from datetime import datetime
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ["BOT_TOKEN"] = "test:token"
os.environ["ADMIN_IDS"] = "123456789,987654321"
os.environ["DB_TYPE"] = "sqlite"
os.environ["DB_PATH"] = ":memory:"

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from config import Config
from database import Database, Template, ChatGroup, Mailing
from menu_system import MenuManager, MenuItem, Menu


class TestConfig:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def test_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = Config()
        assert config.bot_token == "test:token"
        assert 123456789 in config.admin_ids
        assert 987654321 in config.admin_ids
        assert "sqlite" in config.database_url

    def test_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with patch.dict(os.environ, {"BOT_TOKEN": ""}):
            with pytest.raises(ValueError, match="BOT_TOKEN"):
                Config()

        with patch.dict(os.environ, {"ADMIN_IDS": ""}):
            with pytest.raises(ValueError, match="ADMIN_IDS"):
                Config()


class TestDatabase:
    """–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    @pytest.fixture
    async def db(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        database = Database("sqlite+aiosqlite:///:memory:")
        await database.init_db()
        yield database
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è in-memory –ë–î

    @pytest.mark.asyncio
    async def test_create_template(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        template = await db.create_template(
            name="–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω", text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

        assert template.id is not None
        assert template.name == "–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω"
        assert template.text == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert template.file_id is None

    @pytest.mark.asyncio
    async def test_create_template_with_file(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–∞–π–ª–æ–º"""
        template = await db.create_template(
            name="–®–∞–±–ª–æ–Ω —Å —Ñ–∞–π–ª–æ–º",
            text="–°–æ–æ–±—â–µ–Ω–∏–µ",
            file_id="file_123",
            file_type="document",
        )

        assert template.file_id == "file_123"
        assert template.file_type == "document"

    @pytest.mark.asyncio
    async def test_get_templates(self, db):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω–æ–≤
        await db.create_template("–®–∞–±–ª–æ–Ω 1", "–¢–µ–∫—Å—Ç 1")
        await db.create_template("–®–∞–±–ª–æ–Ω 2", "–¢–µ–∫—Å—Ç 2")
        await db.create_template("–®–∞–±–ª–æ–Ω 3", "–¢–µ–∫—Å—Ç 3")

        templates = await db.get_templates()
        assert len(templates) == 3
        assert templates[0].name == "–®–∞–±–ª–æ–Ω 3"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (desc)

    @pytest.mark.asyncio
    async def test_update_template(self, db):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        template = await db.create_template("–°—Ç–∞—Ä—ã–π", "–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç")

        updated = await db.update_template(
            template.id, name="–ù–æ–≤—ã–π", text="–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        )

        assert updated.name == "–ù–æ–≤—ã–π"
        assert updated.text == "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"

    @pytest.mark.asyncio
    async def test_delete_template(self, db):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        template = await db.create_template("–£–¥–∞–ª—è–µ–º—ã–π", "–¢–µ–∫—Å—Ç")
        template_id = template.id

        result = await db.delete_template(template_id)
        assert result is True

        deleted = await db.get_template(template_id)
        assert deleted is None

    @pytest.mark.asyncio
    async def test_create_chat_group(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤"""
        group = await db.create_chat_group(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞", chat_ids=[-1001234567890, -1009876543210]
        )

        assert group.id is not None
        assert group.name == "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞"
        assert len(group.chat_ids) == 2
        assert -1001234567890 in group.chat_ids

    @pytest.mark.asyncio
    async def test_get_chat_groups(self, db):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
        await db.create_chat_group("–ì—Ä—É–ø–ø–∞ 1", [111])
        await db.create_chat_group("–ì—Ä—É–ø–ø–∞ 2", [222, 333])
        await db.create_chat_group("–ì—Ä—É–ø–ø–∞ 3", [444, 555, 666])

        groups = await db.get_chat_groups()
        assert len(groups) == 3
        assert groups[0].name == "–ì—Ä—É–ø–ø–∞ 3"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (desc)

    @pytest.mark.asyncio
    async def test_create_mailing(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        template = await db.create_template("–®–∞–±–ª–æ–Ω", "–¢–µ–∫—Å—Ç")
        group = await db.create_chat_group("–ì—Ä—É–ø–ø–∞", [111, 222])

        mailing = await db.create_mailing(
            template_id=template.id, group_ids=[group.id], total_chats=2
        )

        assert mailing.id is not None
        assert mailing.template_id == template.id
        assert mailing.total_chats == 2
        assert mailing.status == "in_progress"

    @pytest.mark.asyncio
    async def test_update_mailing_stats(self, db):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        template = await db.create_template("–®–∞–±–ª–æ–Ω", "–¢–µ–∫—Å—Ç")
        mailing = await db.create_mailing(template.id, [1], 10)

        updated = await db.update_mailing_stats(
            mailing_id=mailing.id, sent_count=8, failed_count=2
        )

        assert updated.sent_count == 8
        assert updated.failed_count == 2
        assert updated.status == "completed"
        assert updated.completed_at is not None


class TestMenuSystem:
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é"""

    @pytest.fixture
    def menu_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
        return MenuManager(admin_ids=[123456789, 987654321])

    def test_menu_initialization(self, menu_manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é"""
        assert "main" in menu_manager.menus
        assert "templates" in menu_manager.menus
        assert "groups" in menu_manager.menus
        assert "settings" in menu_manager.menus

    def test_is_admin(self, menu_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        assert menu_manager.is_admin(123456789) is True
        assert menu_manager.is_admin(987654321) is True
        assert menu_manager.is_admin(111111111) is False

    def test_get_menu_access(self, menu_manager):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é"""
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        menu = menu_manager.get_menu("main", 123456789)
        assert menu is not None
        assert menu.id == "main"

        # –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        menu = menu_manager.get_menu("main", 111111111)
        assert menu is None

    def test_menu_navigation(self, menu_manager):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        user_id = 123456789

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menu_manager.set_current_menu(user_id, "main")
        assert menu_manager.get_current_menu(user_id) == "main"

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–¥–º–µ–Ω—é
        menu_manager.set_current_menu(user_id, "templates")
        assert menu_manager.get_current_menu(user_id) == "templates"

        # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        assert len(menu_manager.menu_history[user_id]) == 2
        assert menu_manager.menu_history[user_id] == ["main", "templates"]

        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        previous = menu_manager.go_back(user_id)
        assert previous == "main"
        assert menu_manager.get_current_menu(user_id) == "main"

    def test_build_keyboard(self, menu_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        menu = menu_manager.menus["main"]
        keyboard = menu_manager.build_keyboard(menu, 123456789)

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) > 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
        buttons_text = []
        for row in keyboard.inline_keyboard:
            for button in row:
                buttons_text.append(button.text)

        assert "üìã –®–∞–±–ª–æ–Ω—ã" in buttons_text
        assert "üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤" in buttons_text

    def test_add_dynamic_menu(self, menu_manager):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        items = [
            {"id": "item1", "text": "–ü—É–Ω–∫—Ç 1", "icon": "1Ô∏è‚É£", "callback_data": "cb1"},
            {"id": "item2", "text": "–ü—É–Ω–∫—Ç 2", "icon": "2Ô∏è‚É£", "callback_data": "cb2"},
        ]

        menu = menu_manager.add_dynamic_menu(
            menu_id="dynamic", title="–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é", items=items, back_to="main"
        )

        assert menu.id == "dynamic"
        assert len(menu.items) == 2
        assert menu.items[0].text == "–ü—É–Ω–∫—Ç 1"

    def test_menu_export_import(self, menu_manager):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_json = menu_manager.export_menu_config()
        assert config_json is not None
        assert "main" in config_json

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        new_manager = MenuManager(admin_ids=[123456789])
        new_manager.menus = {}  # –û—á–∏—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ–Ω—é
        new_manager.import_menu_config(config_json)

        assert "main" in new_manager.menus
        assert "templates" in new_manager.menus
        assert len(new_manager.menus["main"].items) > 0


class TestBotHandlers:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""

    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 123456789
        message.chat = MagicMock()
        message.chat.id = 123456789
        message.chat.type = "private"
        message.answer = AsyncMock()
        message.text = "/start"
        return message

    @pytest.fixture
    def mock_callback(self):
        """–ú–æ–∫ callback query"""
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123456789
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.message.edit_reply_markup = AsyncMock()
        callback.answer = AsyncMock()
        callback.data = "test_callback"
        return callback

    @pytest.mark.asyncio
    async def test_start_command_admin(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        menu_manager = MenuManager(admin_ids=[123456789])

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start
        from src.main import cmd_start

        await cmd_start(mock_message, menu_manager)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_message.answer.assert_called_once()
        call_args = mock_message.answer.call_args

        assert "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤" in call_args[0][0]
        assert call_args[1]["parse_mode"] == "HTML"
        assert call_args[1]["reply_markup"] is not None

    @pytest.mark.asyncio
    async def test_menu_middleware_access_denied(self):
        """–¢–µ—Å—Ç middleware –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from menu_system import MenuMiddleware

        menu_manager = MenuManager(admin_ids=[123456789])
        middleware = MenuMiddleware(menu_manager)

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 999999999  # –ù–µ –∞–¥–º–∏–Ω
        message.chat = MagicMock()
        message.chat.type = "private"
        message.answer = AsyncMock()

        # –ú–æ–∫ handler
        handler = AsyncMock()
        data = {}

        # –í—ã–∑—ã–≤–∞–µ–º middleware
        await middleware(handler, message, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        message.answer.assert_called_once()
        assert "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" in message.answer.call_args[0][0]

        # Handler –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        handler.assert_not_called()

    @pytest.mark.asyncio
    async def test_menu_navigation_callback(self, mock_callback):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
        menu_manager = MenuManager(admin_ids=[123456789])

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤
        mock_callback.data = "menu_templates"

        success = await menu_manager.navigate_to("templates", mock_callback)
        assert success is True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        mock_callback.message.edit_text.assert_called_once()
        call_args = mock_callback.message.edit_text.call_args

        assert "–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π" in call_args[0][0]
        assert call_args[1]["parse_mode"] == "HTML"
        assert call_args[1]["reply_markup"] is not None


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""

    @pytest.fixture
    async def test_bot(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        config = Config()
        test_bot = Bot(token=config.bot_token)
        yield test_bot
        await test_bot.session.close()

    @pytest.fixture
    async def test_db(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
        db = Database("sqlite+aiosqlite:///:memory:")
        await db.init_db()
        yield db

    @pytest.mark.asyncio
    async def test_full_mailing_flow(self, test_db):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        # 1. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
        template = await test_db.create_template(
            name="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç",
            text="<b>–ù–æ–≤—ã–µ —Ü–µ–Ω—ã:</b>\n\n–¢–æ–≤–∞—Ä 1 - 1000‚ÇΩ\n–¢–æ–≤–∞—Ä 2 - 2000‚ÇΩ",
        )

        # 2. –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤
        group = await test_db.create_chat_group(
            name="–ö–ª–∏–µ–Ω—Ç—ã", chat_ids=[-1001234567890, -1009876543210, -1005555555555]
        )

        # 3. –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        mailing = await test_db.create_mailing(
            template_id=template.id, group_ids=[group.id], total_chats=3
        )

        assert mailing.status == "in_progress"

        # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        sent = 2
        failed = 1

        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updated = await test_db.update_mailing_stats(
            mailing_id=mailing.id, sent_count=sent, failed_count=failed
        )

        assert updated.status == "completed"
        assert updated.sent_count == 2
        assert updated.failed_count == 1

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await test_db.get_mailings_history(limit=10)
        assert len(history) > 0
        assert history[0].id == mailing.id

    @pytest.mark.asyncio
    async def test_menu_with_database_data(self, test_db):
        """–¢–µ—Å—Ç –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        templates = []
        for i in range(3):
            t = await test_db.create_template(f"–®–∞–±–ª–æ–Ω {i+1}", f"–¢–µ–∫—Å—Ç {i+1}")
            templates.append(t)

        groups = []
        for i in range(2):
            g = await test_db.create_chat_group(f"–ì—Ä—É–ø–ø–∞ {i+1}", [111 * (i + 1)])
            groups.append(g)

        # –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        menu_manager = MenuManager(admin_ids=[123456789])

        template_items = [
            {
                "id": f"template_{t.id}",
                "text": t.name,
                "icon": "üìÑ",
                "callback_data": f"select_template_{t.id}",
            }
            for t in templates
        ]

        menu = menu_manager.add_dynamic_menu(
            menu_id="template_list",
            title="üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:",
            items=template_items,
            back_to="templates",
        )

        assert len(menu.items) == 3
        assert menu.items[0].text == "–®–∞–±–ª–æ–Ω 1"


@pytest.mark.asyncio
async def test_bot_lifecycle():
    """–¢–µ—Å—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""
    from src.main import bot, dp, db

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω
    assert bot is not None
    assert dp is not None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        assert bot_info is not None
    except Exception:
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        pass

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    await bot.session.close()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v", "--tb=short"])
