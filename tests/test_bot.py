"""
–¢–µ—Å—Ç—ã –¥–ª—è Telegram Price Bot
"""

import pytest
import asyncio
from unittest.mock import Mock, AsyncMock, patch, MagicMock
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ["BOT_TOKEN"] = "1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-FAKE"
os.environ["ADMIN_IDS"] = "123456789,987654321"
os.environ["DB_PATH"] = ":memory:"

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import Config
from database import Database, Template, ChatGroup, Mailing
from menu_system import MenuManager, MenuItem, Menu
from bot.menus import BotMenus, setup_bot_menus


class TestConfig:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def test_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = Config()
        assert config.bot_token == "1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-FAKE"
        assert 123456789 in config.admin_ids
        assert 987654321 in config.admin_ids
        assert "sqlite" in config.database_url

    def test_config_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with patch.dict(os.environ, {"BOT_TOKEN": ""}):
            with pytest.raises(ValueError, match="BOT_TOKEN"):
                Config()

        with patch.dict(os.environ, {"ADMIN_IDS": ""}):
            with pytest.raises(ValueError, match="ADMIN_IDS"):
                Config()


class TestDatabase:
    """–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    @pytest.fixture
    async def db(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        database = Database("sqlite+aiosqlite:///:memory:")
        await database.init_db()
        yield database

    @pytest.mark.asyncio
    async def test_create_template(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        template = await db.create_template(
            name="–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω", text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

        assert template.id is not None
        assert template.name == "–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω"
        assert template.text == "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        assert template.file_id is None

    @pytest.mark.asyncio
    async def test_create_template_with_file(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–∞–π–ª–æ–º"""
        template = await db.create_template(
            name="–®–∞–±–ª–æ–Ω —Å —Ñ–∞–π–ª–æ–º",
            text="–°–æ–æ–±—â–µ–Ω–∏–µ",
            file_id="file_123",
            file_type="document",
        )

        assert template.file_id == "file_123"
        assert template.file_type == "document"

    @pytest.mark.asyncio
    async def test_get_templates(self, db):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        await db.create_template("–®–∞–±–ª–æ–Ω 1", "–¢–µ–∫—Å—Ç 1")
        await db.create_template("–®–∞–±–ª–æ–Ω 2", "–¢–µ–∫—Å—Ç 2")
        await db.create_template("–®–∞–±–ª–æ–Ω 3", "–¢–µ–∫—Å—Ç 3")

        templates = await db.get_templates()
        assert len(templates) == 3
        assert templates[0].name == "–®–∞–±–ª–æ–Ω 3"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (desc)

    @pytest.mark.asyncio
    async def test_create_chat_group(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤"""
        group = await db.create_chat_group(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞", chat_ids=[-1001234567890, -1009876543210]
        )

        assert group.id is not None
        assert group.name == "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞"
        assert len(group.chat_ids) == 2
        assert -1001234567890 in group.chat_ids

    @pytest.mark.asyncio
    async def test_create_mailing(self, db):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        template = await db.create_template("–®–∞–±–ª–æ–Ω", "–¢–µ–∫—Å—Ç")
        group = await db.create_chat_group("–ì—Ä—É–ø–ø–∞", [111, 222])

        mailing = await db.create_mailing(
            template_id=template.id, group_ids=[group.id], total_chats=2
        )

        assert mailing.id is not None
        assert mailing.template_id == template.id
        assert mailing.total_chats == 2
        assert mailing.status == "in_progress"


class TestMenuSystem:
    """–¢–µ—Å—Ç—ã –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é"""

    @pytest.fixture
    def menu_manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
        return MenuManager(admin_ids=[123456789, 987654321])

    def test_menu_manager_initialization(self, menu_manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
        assert 123456789 in menu_manager.admin_ids
        assert 987654321 in menu_manager.admin_ids
        assert isinstance(menu_manager.menus, dict)

    def test_is_admin(self, menu_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        assert menu_manager.is_admin(123456789) is True
        assert menu_manager.is_admin(987654321) is True
        assert menu_manager.is_admin(111111111) is False

    def test_register_menu(self, menu_manager):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        menu = Menu(id="test", title="Test Menu")
        menu_manager.register_menu(menu)

        assert "test" in menu_manager.menus
        assert menu_manager.menus["test"] == menu

    def test_menu_navigation(self, menu_manager):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        user_id = 123456789

        menu_manager.set_current_menu(user_id, "main")
        assert menu_manager.get_current_menu(user_id) == "main"

        menu_manager.set_current_menu(user_id, "templates")
        assert menu_manager.get_current_menu(user_id) == "templates"

        previous = menu_manager.go_back(user_id)
        assert previous == "main"
        assert menu_manager.get_current_menu(user_id) == "main"

    def test_build_keyboard(self, menu_manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        menu = Menu(id="test", title="Test")
        menu.add_item(MenuItem(id="1", text="Button 1", callback_data="cb1"))
        menu.add_item(MenuItem(id="2", text="Button 2", callback_data="cb2"))

        keyboard = menu_manager.build_keyboard(menu, 123456789)

        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2


class TestBotMenus:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ–Ω—é –±–æ—Ç–∞"""

    @pytest.fixture
    def menu_manager(self):
        return MenuManager(admin_ids=[123456789])

    @pytest.fixture
    def bot_menus(self, menu_manager):
        return setup_bot_menus(menu_manager)

    @pytest.fixture
    async def db_with_data(self):
        """–ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        db = Database("sqlite+aiosqlite:///:memory:")
        await db.init_db()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
        await db.create_template("–®–∞–±–ª–æ–Ω 1", "–¢–µ–∫—Å—Ç 1")
        await db.create_template("–®–∞–±–ª–æ–Ω 2", "–¢–µ–∫—Å—Ç 2")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã
        await db.create_chat_group("–ì—Ä—É–ø–ø–∞ 1", [111, 222])
        await db.create_chat_group("–ì—Ä—É–ø–ø–∞ 2", [333, 444])

        yield db

    def test_bot_menus_initialization(self, bot_menus, menu_manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é –±–æ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
        assert "main" in menu_manager.menus
        assert "templates" in menu_manager.menus
        assert "groups" in menu_manager.menus
        assert "mailing" in menu_manager.menus
        assert "history" in menu_manager.menus
        assert "settings" in menu_manager.menus

    def test_main_menu_structure(self, menu_manager):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        main_menu = menu_manager.menus["main"]

        assert main_menu.title == "ü§ñ <b>Telegram Price Bot</b>"
        assert not main_menu.back_button
        assert (
            len(main_menu.items) == 5
        )  # templates, groups, mailing, history, settings

    @pytest.mark.asyncio
    async def test_templates_list_menu_creation(self, bot_menus, db_with_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        menu = await bot_menus.create_templates_list_menu(db_with_data)

        assert menu.id == "templates_list"
        assert "templates_list" in bot_menus.menu_manager.menus
        assert len(menu.items) == 3  # 2 —à–∞–±–ª–æ–Ω–∞ + –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"

    @pytest.mark.asyncio
    async def test_groups_list_menu_creation(self, bot_menus, db_with_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
        menu = await bot_menus.create_groups_list_menu(db_with_data)

        assert menu.id == "groups_list"
        assert "groups_list" in bot_menus.menu_manager.menus
        assert len(menu.items) == 3  # 2 –≥—Ä—É–ø–ø—ã + –∫–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"

    @pytest.mark.asyncio
    async def test_mailing_template_selection_menu(self, bot_menus, db_with_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        menu = await bot_menus.create_mailing_template_selection_menu(db_with_data)

        assert menu.id == "mailing_template_selection"
        assert len(menu.items) == 2  # 2 —à–∞–±–ª–æ–Ω–∞

    @pytest.mark.asyncio
    async def test_empty_templates_menu(self, bot_menus):
        """–¢–µ—Å—Ç –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–≥–¥–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤"""
        empty_db = Database("sqlite+aiosqlite:///:memory:")
        await empty_db.init_db()

        menu = await bot_menus.create_templates_list_menu(empty_db)

        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤" + "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"
        assert len(menu.items) == 2


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""

    @pytest.mark.asyncio
    async def test_full_menu_workflow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –º–µ–Ω—é"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        menu_manager = MenuManager(admin_ids=[123456789])
        bot_menus = setup_bot_menus(menu_manager)

        db = Database("sqlite+aiosqlite:///:memory:")
        await db.init_db()

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        template = await db.create_template("–¢–µ—Å—Ç", "–¢–µ–∫—Å—Ç")
        group = await db.create_chat_group("–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∞", [111])

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–µ–Ω—é
        templates_menu = await bot_menus.create_templates_list_menu(db)
        groups_menu = await bot_menus.create_groups_list_menu(db)

        assert templates_menu is not None
        assert groups_menu is not None
        assert len(templates_menu.items) == 2  # 1 —à–∞–±–ª–æ–Ω + —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        assert len(groups_menu.items) == 2  # 1 –≥—Ä—É–ø–ø–∞ + —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é

    @pytest.mark.asyncio
    async def test_menu_rendering(self):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–µ–Ω—é"""
        menu_manager = MenuManager(admin_ids=[123456789])
        setup_bot_menus(menu_manager)

        user_id = 123456789
        text, keyboard = menu_manager.render_menu("main", user_id)

        assert "Telegram Price Bot" in text
        assert keyboard is not None
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) > 0

    @pytest.mark.asyncio
    async def test_access_control(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞"""
        menu_manager = MenuManager(admin_ids=[123456789])
        setup_bot_menus(menu_manager)

        # –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        admin_text, admin_keyboard = menu_manager.render_menu("main", 123456789)
        assert "Telegram Price Bot" in admin_text
        assert admin_keyboard is not None

        # –ù–µ –∞–¥–º–∏–Ω –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        user_text, user_keyboard = menu_manager.render_menu("main", 999999999)
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in user_text
        assert user_keyboard is None


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])
