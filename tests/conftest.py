"""
–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
"""

import pytest
import asyncio
import os
import sys
from pathlib import Path
from unittest.mock import MagicMock, AsyncMock, patch
from datetime import datetime
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ src –≤ path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent.absolute()
src_path = project_root / "src"
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(src_path))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ["ENVIRONMENT"] = "testing"

# –ï—Å–ª–∏ –Ω–µ—Ç TEST_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –∏—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
if not os.getenv("TEST_BOT_TOKEN") and not os.getenv("BOT_TOKEN"):
    os.environ["TEST_BOT_TOKEN"] = "1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-TEST"

if not os.getenv("TEST_ADMIN_IDS") and not os.getenv("ADMIN_IDS"):
    os.environ["TEST_ADMIN_IDS"] = "123456789,987654321"

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src
from src_depricated.config import Config
from src_depricated.database import Database
from src_depricated.menu_system import MenuManager, Menu, MenuItem
from src_depricated.bot.menus import setup_bot_menus

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest
pytest_plugins = ["pytest_asyncio"]


@pytest.fixture(scope="session")
def event_loop_policy():
    return asyncio.DefaultEventLoopPolicy()


@pytest.fixture(scope="function")
async def test_config():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    config = Config()
    config.force_testing_mode()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    return config


@pytest.fixture(scope="function")
async def test_db():
    """–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()
    yield db
    await db.close()


@pytest.fixture(scope="function")
async def populated_db():
    """–ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    templates = []
    groups = []
    mailings = []

    # –®–∞–±–ª–æ–Ω—ã
    template_data = [
        ("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∞–π—Å", "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"),
        ("VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è VIP"),
        ("–ê–∫—Ü–∏—è –º–µ—Å—è—Ü–∞", "üéâ –°–∫–∏–¥–∫–∏ –¥–æ 50%!"),
        ("–ù–æ–≤–∏–Ω–∫–∏", "üÜï –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ"),
        ("–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "üî• –†–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤"),
    ]

    for name, text in template_data:
        template = await db.create_template(name=name, text=text)
        templates.append(template)

    # –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤
    group_data = [
        ("VIP –∫–ª–∏–µ–Ω—Ç—ã", [-1001234567890, -1001234567891, -1001234567892]),
        ("–û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", [-1001111111111, -1001111111112]),
        ("–ü–∞—Ä—Ç–Ω–µ—Ä—ã", [-1002222222222, -1002222222223, -1002222222224, -1002222222225]),
    ]

    for name, chat_ids in group_data:
        group = await db.create_chat_group(name=name, chat_ids=chat_ids)
        groups.append(group)

    # –†–∞—Å—Å—ã–ª–∫–∏
    mailing_data = [
        (templates[0].id, [groups[0].id], 3, "completed"),
        (templates[1].id, [groups[1].id, groups[2].id], 6, "pending"),
    ]

    for template_id, group_ids, total_chats, status in mailing_data:
        mailing = await db.create_mailing(
            template_id=template_id, group_ids=group_ids, total_chats=total_chats
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await db.update_mailing_status(mailing.id, status)
        mailings.append(mailing)

    yield db, templates, groups, mailings
    await db.close()


@pytest.fixture(scope="function")
async def test_menu_manager(test_config):
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é"""
    menu_manager = MenuManager(test_config.admin_ids)

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    main_menu = Menu(
        id="main",
        title="ü§ñ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤</b>",
        description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        back_button=False,
    )

    main_menu.add_item(
        MenuItem(
            id="templates",
            text="–®–∞–±–ª–æ–Ω—ã",
            icon="üìã",
            callback_data="menu_templates",
        )
    )

    main_menu.add_item(
        MenuItem(
            id="groups",
            text="–ì—Ä—É–ø–ø—ã",
            icon="üë•",
            callback_data="menu_groups",
        )
    )

    menu_manager.register_menu(main_menu)

    return menu_manager


@pytest.fixture(scope="function")
async def bot_menus(test_menu_manager):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞"""
    return setup_bot_menus(test_menu_manager)


@pytest.fixture(scope="function")
def mock_bot():
    """–ú–æ–∫ –¥–ª—è aiogram Bot"""
    bot = MagicMock()
    bot.session = MagicMock()
    bot.session.close = AsyncMock()
    bot.get_me = AsyncMock()
    bot.get_me.return_value = MagicMock(username="test_bot")
    bot.send_message = AsyncMock()
    bot.edit_message_text = AsyncMock()
    bot.answer_callback_query = AsyncMock()
    return bot


@pytest.fixture(scope="function")
def mock_message():
    """–ú–æ–∫ –¥–ª—è aiogram Message"""
    message = MagicMock()
    message.from_user.id = 123456789
    message.chat.id = 123456789
    message.chat.type = "private"
    message.text = "/start"
    message.answer = AsyncMock()
    message.edit_text = AsyncMock()
    return message


@pytest.fixture(scope="function")
def mock_callback():
    """–ú–æ–∫ –¥–ª—è aiogram CallbackQuery"""
    callback = MagicMock()
    callback.from_user.id = 123456789
    callback.data = "test_callback"
    callback.message = mock_message()
    callback.answer = AsyncMock()
    callback.message.edit_text = AsyncMock()
    return callback


@pytest.fixture(scope="function")
def admin_user_id():
    """ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return 123456789


@pytest.fixture(scope="function")
def regular_user_id():
    """ID –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return 999999999


@pytest.fixture(scope="function", autouse=True)
def reset_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    original_env = os.environ.copy()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    os.environ["ENVIRONMENT"] = "testing"

    yield

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    os.environ.clear()
    os.environ.update(original_env)


@pytest.fixture(scope="function")
def temp_env_vars():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    original_env = os.environ.copy()

    def _set_env(**kwargs):
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        env_keys_to_clear = [
            "BOT_TOKEN",
            "TEST_BOT_TOKEN",
            "ADMIN_IDS",
            "TEST_ADMIN_IDS",
            "ENVIRONMENT",
            "DATABASE_URL",
            "MAILING_DELAY",
            "MAILING_BATCH_SIZE",
        ]
        for key in env_keys_to_clear:
            os.environ.pop(key, None)

        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in kwargs.items():
            if value is None:
                os.environ.pop(key, None)
            else:
                os.environ[key] = str(value)

    yield _set_env

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    os.environ.clear()
    os.environ.update(original_env)


# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –°–ü–ï–¶–ò–§–ò–ß–ù–´–• –¢–ï–°–¢–û–í ==========


@pytest.fixture(scope="function")
async def large_dataset_db():
    """–ë–î —Å –±–æ–ª—å—à–∏–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()

    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
    templates = []
    for i in range(100):
        template = await db.create_template(
            name=f"–®–∞–±–ª–æ–Ω {i+1}",
            text=f"–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –Ω–æ–º–µ—Ä {i+1}\n–° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
        )
        templates.append(template)

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –≥—Ä—É–ø–ø
    groups = []
    for i in range(50):
        chat_ids = [-(1000000000000 + j + i * 100) for j in range(10)]
        group = await db.create_chat_group(name=f"–ì—Ä—É–ø–ø–∞ {i+1}", chat_ids=chat_ids)
        groups.append(group)

    yield db, templates, groups
    await db.close()


@pytest.fixture(scope="function")
def mock_telegram_api():
    """–ú–æ–∫ –¥–ª—è Telegram API —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    api = MagicMock()

    # –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    api.send_message = AsyncMock(
        return_value={"ok": True, "result": {"message_id": 123}}
    )
    api.get_me = AsyncMock(
        return_value={
            "ok": True,
            "result": {
                "id": 123456789,
                "is_bot": True,
                "first_name": "Test Bot",
                "username": "test_bot",
            },
        }
    )

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—à–∏–±–æ–∫
    def simulate_error(error_code=400, description="Bad Request"):
        from aiogram.exceptions import TelegramAPIError

        api.send_message = AsyncMock(
            side_effect=TelegramAPIError(method="sendMessage", message=description)
        )

    def simulate_unauthorized():
        from aiogram.exceptions import TelegramUnauthorizedError

        api.get_me = AsyncMock(
            side_effect=TelegramUnauthorizedError(
                method="getMe", message="Unauthorized"
            )
        )

    api.simulate_error = simulate_error
    api.simulate_unauthorized = simulate_unauthorized

    return api


# ========== –ú–ê–†–ö–ï–†–´ PYTEST ==========


def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏"""
    config.addinivalue_line("markers", "unit: Unit tests")
    config.addinivalue_line("markers", "integration: Integration tests")
    config.addinivalue_line("markers", "database: Database tests")
    config.addinivalue_line("markers", "menu: Menu system tests")
    config.addinivalue_line("markers", "slow: Slow tests")
    config.addinivalue_line("markers", "api: API tests")


# ========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ò–ö–°–¢–£–†–´ ==========


@pytest.fixture(autouse=True)
def setup_test_logging():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    import logging

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å WARNING –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.getLogger().setLevel(logging.WARNING)

    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ aiogram –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
    logging.getLogger("aiogram").setLevel(logging.ERROR)
    logging.getLogger("aiohttp").setLevel(logging.ERROR)


@pytest.fixture(autouse=True)
async def cleanup_after_test():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield

    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    import gc

    gc.collect()


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========


def create_test_template_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤"""
    return [
        {
            "name": "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∞–π—Å",
            "text": "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç\n\n<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>\n–¢–æ–≤–∞—Ä 1 - 100‚ÇΩ\n–¢–æ–≤–∞—Ä 2 - 200‚ÇΩ",
        },
        {
            "name": "VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "text": "‚≠ê <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è VIP</b>\n\nüéÅ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–æ 30%",
            "file_id": "BAADBAADrwADBREAAYag2DP_RNf0Ag",
            "file_type": "document",
        },
        {
            "name": "–ê–∫—Ü–∏—è –º–µ—Å—è—Ü–∞",
            "text": "üéâ <b>–ú–ï–ì–ê –°–ö–ò–î–ö–ò!</b>\n\nüî• –°–∫–∏–¥–∫–∏ –¥–æ 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n‚è∞ –¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞!",
        },
    ]


def create_test_group_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø"""
    return [
        {
            "name": "VIP –∫–ª–∏–µ–Ω—Ç—ã",
            "chat_ids": [-1001234567890, -1001234567891],
        },
        {
            "name": "–û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã",
            "chat_ids": [-1001111111111, -1001111111112, -1001111111113],
        },
        {
            "name": "–ü–∞—Ä—Ç–Ω–µ—Ä—ã",
            "chat_ids": [-1002222222222],
        },
    ]


async def create_test_mailings(db: Database, templates: List, groups: List):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailings = []

    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    mailing1 = await db.create_mailing(
        template_id=templates[0].id, group_ids=[groups[0].id], total_chats=2
    )
    await db.update_mailing_status(
        mailing1.id, "completed", sent_count=2, failed_count=0
    )
    mailings.append(mailing1)

    # –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
    mailing2 = await db.create_mailing(
        template_id=templates[1].id,
        group_ids=[groups[1].id, groups[2].id],
        total_chats=4,
    )
    await db.update_mailing_status(
        mailing2.id, "in_progress", sent_count=1, failed_count=0
    )
    mailings.append(mailing2)

    return mailings
