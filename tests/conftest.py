"""
–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import pytest
import asyncio
import os
import sys
from pathlib import Path
from unittest.mock import MagicMock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
os.environ["BOT_TOKEN"] = "test:token:for:testing"
os.environ["ADMIN_IDS"] = "123456789,987654321"
os.environ["DB_PATH"] = ":memory:"
os.environ["LOG_LEVEL"] = "DEBUG"

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from database import Database
from menu_system import MenuManager


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest
pytest_plugins = ["pytest_asyncio"]


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–Ω–∏–µ event loop –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="function")
async def test_config():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return Config()


@pytest.fixture(scope="function")
async def test_db():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()
    yield db
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è in-memory –ë–î


@pytest.fixture(scope="function")
async def populated_db():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    templates = []
    groups = []
    mailings = []

    # –®–∞–±–ª–æ–Ω—ã
    template_data = [
        ("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∞–π—Å", "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"),
        ("VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è VIP"),
        ("–ê–∫—Ü–∏—è –º–µ—Å—è—Ü–∞", "üéâ –°–∫–∏–¥–∫–∏ –¥–æ 50%!"),
    ]

    for name, text in template_data:
        template = await db.create_template(name=name, text=text)
        templates.append(template)

    # –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤
    group_data = [
        ("–ú–æ—Å–∫–≤–∞", 5),
        ("–†–µ–≥–∏–æ–Ω—ã", 10),
        ("VIP –∫–ª–∏–µ–Ω—Ç—ã", 3),
    ]

    for name, chat_count in group_data:
        chat_ids = [-(1000000000000 + i + hash(name)) for i in range(chat_count)]
        group = await db.create_chat_group(name=name, chat_ids=chat_ids)
        groups.append(group)

    # –†–∞—Å—Å—ã–ª–∫–∏
    for i in range(2):
        mailing = await db.create_mailing(
            template_id=templates[i].id,
            group_ids=[groups[i].id],
            total_chats=len(groups[i].chat_ids),
        )
        mailings.append(mailing)

    yield db, templates, groups, mailings


@pytest.fixture(scope="function")
def menu_manager():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
    return MenuManager(admin_ids=[123456789, 987654321])


@pytest.fixture(scope="function")
def mock_bot():
    """–ú–æ–∫ Telegram –±–æ—Ç–∞"""
    bot = MagicMock(spec=Bot)
    bot.send_message = AsyncMock()
    bot.send_photo = AsyncMock()
    bot.send_document = AsyncMock()
    bot.edit_message_text = AsyncMock()
    bot.answer_callback_query = AsyncMock()
    bot.get_me = AsyncMock(
        return_value=MagicMock(
            id=123456789, is_bot=True, first_name="Test Bot", username="test_bot"
        )
    )
    return bot


@pytest.fixture(scope="function")
def mock_dispatcher():
    """–ú–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    return dp


@pytest.fixture(scope="function")
def mock_message():
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    message = MagicMock(spec=types.Message)
    message.message_id = 1
    message.date = datetime.now()
    message.chat = MagicMock()
    message.chat.id = 123456789
    message.chat.type = "private"
    message.from_user = MagicMock()
    message.from_user.id = 123456789
    message.from_user.is_bot = False
    message.from_user.first_name = "Test"
    message.from_user.username = "test_user"
    message.text = "/start"
    message.answer = AsyncMock()
    message.reply = AsyncMock()
    message.delete = AsyncMock()
    return message


@pytest.fixture(scope="function")
def mock_message_user():
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    message = MagicMock(spec=types.Message)
    message.message_id = 2
    message.date = datetime.now()
    message.chat = MagicMock()
    message.chat.id = 111111111
    message.chat.type = "private"
    message.from_user = MagicMock()
    message.from_user.id = 111111111  # –ù–µ –∞–¥–º–∏–Ω
    message.from_user.is_bot = False
    message.from_user.first_name = "User"
    message.from_user.username = "regular_user"
    message.text = "/start"
    message.answer = AsyncMock()
    message.reply = AsyncMock()
    message.delete = AsyncMock()
    return message


@pytest.fixture(scope="function")
def mock_callback_query():
    """–ú–æ–∫ callback query –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    callback = MagicMock(spec=types.CallbackQuery)
    callback.id = "test_callback_id"
    callback.from_user = MagicMock()
    callback.from_user.id = 123456789
    callback.from_user.is_bot = False
    callback.from_user.first_name = "Test"
    callback.message = MagicMock()
    callback.message.message_id = 1
    callback.message.chat = MagicMock()
    callback.message.chat.id = 123456789
    callback.message.edit_text = AsyncMock()
    callback.message.edit_reply_markup = AsyncMock()
    callback.message.delete = AsyncMock()
    callback.data = "test_callback"
    callback.answer = AsyncMock()
    return callback


@pytest.fixture(scope="function")
def mock_state():
    """–ú–æ–∫ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.base import StorageKey

    storage = MemoryStorage()
    state = FSMContext(
        storage=storage,
        key=StorageKey(bot_id=123456789, chat_id=123456789, user_id=123456789),
    )
    return state


@pytest.fixture(scope="function")
def sample_templates():
    """–ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return [
        {
            "name": "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π",
            "text": "<b>üìã –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç</b>\n\n‚úÖ –¢–æ–≤–∞—Ä 1 - 1000‚ÇΩ\n‚úÖ –¢–æ–≤–∞—Ä 2 - 2000‚ÇΩ",
            "file_id": None,
            "file_type": None,
        },
        {
            "name": "–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏",
            "text": "<b>üéâ –ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏!</b>\n\n–°–∫–∏–¥–∫–∏ –¥–æ 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!",
            "file_id": "document_123",
            "file_type": "document",
        },
        {
            "name": "VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "text": "<b>‚≠ê VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>\n\n–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "file_id": "photo_456",
            "file_type": "photo",
        },
    ]


@pytest.fixture(scope="function")
def sample_chat_groups():
    """–ü—Ä–∏–º–µ—Ä—ã –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return [
        {
            "name": "–ú–æ—Å–∫–≤–∞ - –û–ø—Ç",
            "chat_ids": [-1001111111111, -1002222222222, -1003333333333],
        },
        {"name": "–†–µ–≥–∏–æ–Ω—ã - –†–æ–∑–Ω–∏—Ü–∞", "chat_ids": [-1004444444444, -1005555555555]},
        {"name": "VIP –∫–ª–∏–µ–Ω—Ç—ã", "chat_ids": [-1006666666666]},
    ]


@pytest.fixture(autouse=True)
def reset_singletons():
    """–°–±—Ä–æ—Å —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Ö –∑–¥–µ—Å—å
    yield


@pytest.fixture
def capture_logs(caplog):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤"""
    import logging

    caplog.set_level(logging.DEBUG)
    return caplog


# –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    config.addinivalue_line("markers", "unit: mark test as a unit test")
    config.addinivalue_line("markers", "integration: mark test as an integration test")
    config.addinivalue_line("markers", "slow: mark test as slow")
    config.addinivalue_line("markers", "database: mark test as requiring database")
    config.addinivalue_line("markers", "asyncio: mark test as async")
    config.addinivalue_line("markers", "api: mark test as requiring API")
    config.addinivalue_line("markers", "menu: mark test as menu system test")


# –•—É–∫–∏ pytest
def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    for item in items:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä asyncio –¥–ª—è async —Ç–µ—Å—Ç–æ–≤
        if asyncio.iscoroutinefunction(item.function):
            item.add_marker(pytest.mark.asyncio)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã based –Ω–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if "test_database" in str(item.fspath):
            item.add_marker(pytest.mark.database)
        elif "test_menu" in str(item.fspath):
            item.add_marker(pytest.mark.menu)
        elif "test_integration" in str(item.fspath):
            item.add_marker(pytest.mark.integration)
        else:
            item.add_marker(pytest.mark.unit)


def pytest_runtest_setup(item):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞"""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    pass


def pytest_runtest_teardown(item):
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
    pass


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
class TestHelpers:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""

    @staticmethod
    async def create_test_mailing(db, template_id, group_ids, total_chats=10):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        mailing = await db.create_mailing(
            template_id=template_id, group_ids=group_ids, total_chats=total_chats
        )
        return mailing

    @staticmethod
    def assert_menu_contains(keyboard, expected_text):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º"""
        for row in keyboard.inline_keyboard:
            for button in row:
                if expected_text in button.text:
                    return True
        return False

    @staticmethod
    async def simulate_mailing(db, mailing_id, success_rate=0.9):
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏"""
        import random

        mailing = await db.get_mailing(mailing_id)
        total = mailing.total_chats
        sent = int(total * success_rate)
        failed = total - sent

        await db.update_mailing_stats(
            mailing_id=mailing_id, sent_count=sent, failed_count=failed
        )

        return sent, failed


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º helpers
helpers = TestHelpers()
