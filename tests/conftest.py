"""
–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç–µ—Å—Ç–æ–≤
"""

import pytest
import asyncio
import os
import sys
from pathlib import Path
from unittest.mock import MagicMock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ src –≤ path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent.absolute()
src_path = project_root / "src"
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(src_path))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ["ENVIRONMENT"] = "testing"

# –ï—Å–ª–∏ –Ω–µ—Ç TEST_ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –∏—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
if not os.getenv("TEST_BOT_TOKEN") and not os.getenv("BOT_TOKEN"):
    os.environ["TEST_BOT_TOKEN"] = "1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-TEST"

if not os.getenv("TEST_ADMIN_IDS") and not os.getenv("ADMIN_IDS"):
    os.environ["TEST_ADMIN_IDS"] = "123456789,987654321"

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src
from src.config import Config
from src.database import Database
from src.menu_system import MenuManager, Menu, MenuItem
from src.bot.menus import setup_bot_menus

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest
pytest_plugins = ["pytest_asyncio"]


@pytest.fixture(scope="session")
def event_loop():
    """Event loop –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    yield loop
    loop.close()


@pytest.fixture(scope="function")
async def test_config():
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    config = Config()
    return config


@pytest.fixture(scope="function")
async def test_db():
    """–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()
    yield db


@pytest.fixture(scope="function")
async def populated_db():
    """–ë–î —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = Database("sqlite+aiosqlite:///:memory:")
    await db.init_db()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    templates = []
    groups = []
    mailings = []

    # –®–∞–±–ª–æ–Ω—ã
    template_data = [
        ("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∞–π—Å", "üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç"),
        ("VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è VIP"),
        ("–ê–∫—Ü–∏—è –º–µ—Å—è—Ü–∞", "üéâ –°–∫–∏–¥–∫–∏ –¥–æ 50%!"),
    ]

    for name, text in template_data:
        template = await db.create_template(name=name, text=text)
        templates.append(template)

    # –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤
    group_data = [
        ("–ú–æ—Å–∫–≤–∞", 5),
        ("–†–µ–≥–∏–æ–Ω—ã", 10),
        ("VIP –∫–ª–∏–µ–Ω—Ç—ã", 3),
    ]

    for name, chat_count in group_data:
        chat_ids = [-(1000000000000 + i + hash(name)) for i in range(chat_count)]
        group = await db.create_chat_group(name=name, chat_ids=chat_ids)
        groups.append(group)

    # –†–∞—Å—Å—ã–ª–∫–∏
    for i in range(2):
        mailing = await db.create_mailing(
            template_id=templates[i].id,
            group_ids=[groups[i].id],
            total_chats=len(groups[i].chat_ids),
        )
        mailings.append(mailing)

    yield db, templates, groups, mailings


@pytest.fixture(scope="function")
def menu_manager():
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    config = Config()
    return MenuManager(admin_ids=config.admin_ids)


@pytest.fixture(scope="function")
def mock_bot():
    """–ú–æ–∫ Telegram –±–æ—Ç–∞"""
    from aiogram import Bot

    bot = MagicMock(spec=Bot)
    bot.session = MagicMock()
    bot.session.close = AsyncMock()
    bot.send_message = AsyncMock()
    bot.send_photo = AsyncMock()
    bot.send_document = AsyncMock()
    bot.edit_message_text = AsyncMock()
    bot.answer_callback_query = AsyncMock()
    bot.get_me = AsyncMock(
        return_value=MagicMock(
            id=123456789, is_bot=True, first_name="Test Bot", username="test_bot"
        )
    )
    return bot


@pytest.fixture(scope="function")
def mock_message():
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from aiogram import types

    config = Config()
    admin_id = config.admin_ids[0] if config.admin_ids else 123456789

    message = MagicMock(spec=types.Message)
    message.message_id = 1
    message.date = datetime.now()
    message.chat = MagicMock()
    message.chat.id = admin_id
    message.chat.type = "private"
    message.from_user = MagicMock()
    message.from_user.id = admin_id
    message.from_user.is_bot = False
    message.from_user.first_name = "Test"
    message.from_user.username = "test_user"
    message.text = "/start"
    message.answer = AsyncMock()
    message.reply = AsyncMock()
    message.delete = AsyncMock()
    return message


@pytest.fixture(scope="function")
def mock_callback_query():
    """–ú–æ–∫ callback query –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    from aiogram import types

    config = Config()
    admin_id = config.admin_ids[0] if config.admin_ids else 123456789

    callback = MagicMock(spec=types.CallbackQuery)
    callback.id = "test_callback_id"
    callback.from_user = MagicMock()
    callback.from_user.id = admin_id
    callback.from_user.is_bot = False
    callback.from_user.first_name = "Test"
    callback.message = MagicMock()
    callback.message.message_id = 1
    callback.message.chat = MagicMock()
    callback.message.chat.id = admin_id
    callback.message.edit_text = AsyncMock()
    callback.message.edit_reply_markup = AsyncMock()
    callback.message.delete = AsyncMock()
    callback.data = "test_callback"
    callback.answer = AsyncMock()
    return callback


# –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è pytest
def pytest_configure(config):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    config.addinivalue_line("markers", "unit: mark test as a unit test")
    config.addinivalue_line("markers", "integration: mark test as an integration test")
    config.addinivalue_line("markers", "slow: mark test as slow")
    config.addinivalue_line("markers", "database: mark test as requiring database")


def pytest_collection_modifyitems(config, items):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    for item in items:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä asyncio –¥–ª—è async —Ç–µ—Å—Ç–æ–≤
        if asyncio.iscoroutinefunction(item.function):
            item.add_marker(pytest.mark.asyncio)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if "test_database" in str(item.fspath):
            item.add_marker(pytest.mark.database)
        elif "test_integration" in str(item.fspath):
            item.add_marker(pytest.mark.integration)
        else:
            item.add_marker(pytest.mark.unit)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
class TestHelpers:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""

    @staticmethod
    def assert_menu_contains(keyboard, expected_text):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º"""
        for row in keyboard.inline_keyboard:
            for button in row:
                if expected_text in button.text:
                    return True
        return False

    @staticmethod
    async def create_test_mailing(db, template_id, group_ids, total_chats=10):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        mailing = await db.create_mailing(
            template_id=template_id, group_ids=group_ids, total_chats=total_chats
        )
        return mailing


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º helpers
helpers = TestHelpers()
