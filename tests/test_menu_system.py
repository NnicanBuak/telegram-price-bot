"""
–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
"""

import pytest
import json
from unittest.mock import MagicMock, AsyncMock, patch
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from menu_system import Menu, MenuItem, MenuManager, MenuMiddleware


class TestMenuItem:
    """–¢–µ—Å—Ç—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
    
    def test_menu_item_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
        item = MenuItem(
            id="test_item",
            text="Test Item",
            callback_data="test_callback",
            icon="üîß",
            admin_only=True,
            visible=True
        )
        
        assert item.id == "test_item"
        assert item.text == "Test Item"
        assert item.callback_data == "test_callback"
        assert item.icon == "üîß"
        assert item.admin_only is True
        assert item.visible is True
    
    def test_menu_item_defaults(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        item = MenuItem(
            id="test",
            text="Test",
            callback_data="test"
        )
        
        assert item.icon == ""
        assert item.admin_only is True
        assert item.visible is True
        assert item.action is None
        assert item.submenu is None
        assert item.parent is None
        assert item.row is None


class TestMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω—é"""
    
    def test_menu_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é"""
        menu = Menu(
            id="test_menu",
            title="Test Menu",
            description="This is a test menu",
            columns=2
        )
        
        assert menu.id == "test_menu"
        assert menu.title == "Test Menu"
        assert menu.description == "This is a test menu"
        assert menu.columns == 2
        assert menu.back_button is True
        assert len(menu.items) == 0
    
    def test_add_item(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é"""
        menu = Menu(id="test", title="Test")
        item = MenuItem(id="item1", text="Item 1", callback_data="cb1")
        
        menu.add_item(item)
        
        assert len(menu.items) == 1
        assert menu.items[0] == item
        assert item.parent == "test"
    
    def test_remove_item(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω—é"""
        menu = Menu(id="test", title="Test")
        item1 = MenuItem(id="item1", text="Item 1", callback_data="cb1")
        item2 = MenuItem(id="item2", text="Item 2", callback_data="cb2")
        
        menu.add_item(item1)
        menu.add_item(item2)
        assert len(menu.items) == 2
        
        menu.remove_item("item1")
        assert len(menu.items) == 1
        assert menu.items[0].id == "item2"
    
    def test_method_chaining(self):
        """–¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤"""
        menu = Menu(id="test", title="Test")
        result = menu.add_item(
            MenuItem(id="item1", text="Item 1", callback_data="cb1")
        ).add_item(
            MenuItem(id="item2", text="Item 2", callback_data="cb2")
        )
        
        assert result == menu
        assert len(menu.items) == 2


class TestMenuManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
    
    @pytest.fixture
    def manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é"""
        return MenuManager(admin_ids=[123, 456, 789])
    
    def test_initialization(self, manager):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        assert 123 in manager.admin_ids
        assert 456 in manager.admin_ids
        assert 789 in manager.admin_ids
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ–Ω—é
        assert "main" in manager.menus
        assert "templates" in manager.menus
        assert "groups" in manager.menus
        assert "settings" in manager.menus
    
    def test_is_admin(self, manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        assert manager.is_admin(123) is True
        assert manager.is_admin(456) is True
        assert manager.is_admin(789) is True
        assert manager.is_admin(999) is False
    
    def test_register_menu(self, manager):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        custom_menu = Menu(id="custom", title="Custom Menu")
        manager.register_menu(custom_menu)
        
        assert "custom" in manager.menus
        assert manager.menus["custom"] == custom_menu
    
    def test_get_menu_access_control(self, manager):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é"""
        # –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        menu = manager.get_menu("main", 123)
        assert menu is not None
        assert menu.id == "main"
        
        # –ù–µ –∞–¥–º–∏–Ω –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é
        menu = manager.get_menu("main", 999)
        assert menu is None
    
    def test_current_menu_tracking(self, manager):
        """–¢–µ—Å—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é"""
        user_id = 123
        
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
        assert manager.get_current_menu(user_id) is None
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
        manager.set_current_menu(user_id, "main")
        assert manager.get_current_menu(user_id) == "main"
        
        # –ú–µ–Ω—è–µ–º –º–µ–Ω—é
        manager.set_current_menu(user_id, "templates")
        assert manager.get_current_menu(user_id) == "templates"
    
    def test_menu_history(self, manager):
        """–¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        user_id = 123
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
        manager.set_current_menu(user_id, "main")
        manager.set_current_menu(user_id, "templates")
        manager.set_current_menu(user_id, "new_template")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history = manager.menu_history[user_id]
        assert len(history) == 3
        assert history == ["main", "templates", "new_template"]
        
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        previous = manager.go_back(user_id)
        assert previous == "templates"
        assert manager.get_current_menu(user_id) == "templates"
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
        assert len(manager.menu_history[user_id]) == 2
    
    def test_history_limit(self, manager):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        user_id = 123
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(15):
            manager.set_current_menu(user_id, f"menu_{i}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 10 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        history = manager.menu_history[user_id]
        assert len(history) == 10
        assert history[0] == "menu_5"
        assert history[-1] == "menu_14"
    
    def test_build_keyboard_simple(self, manager):
        """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        menu = Menu(id="test", title="Test")
        menu.add_item(MenuItem(id="1", text="Button 1", callback_data="cb1"))
        menu.add_item(MenuItem(id="2", text="Button 2", callback_data="cb2"))
        
        keyboard = manager.build_keyboard(menu, 123)
        
        assert isinstance(keyboard, InlineKeyboardMarkup)
        assert len(keyboard.inline_keyboard) == 2  # 2 —Ä—è–¥–∞ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ)
        assert keyboard.inline_keyboard[0][0].text == "Button 1"
        assert keyboard.inline_keyboard[1][0].text == "Button 2"
    
    def test_build_keyboard_with_icons(self, manager):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
        menu = Menu(id="test", title="Test")
        menu.add_item(MenuItem(
            id="1", 
            text="Settings", 
            icon="‚öôÔ∏è",
            callback_data="settings"
        ))
        
        keyboard = manager.build_keyboard(menu, 123)
        button_text = keyboard.inline_keyboard[0][0].text
        
        assert "‚öôÔ∏è" in button_text
        assert "Settings" in button_text
    
    def test_build_keyboard_columns(self, manager):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏"""
        menu = Menu(id="test", title="Test", columns=2)
        menu.add_item(MenuItem(id="1", text="Btn1", callback_data="cb1"))
        menu.add_item(MenuItem(id="2", text="Btn2", callback_data="cb2"))
        menu.add_item(MenuItem(id="3", text="Btn3", callback_data="cb3"))
        
        keyboard = manager.build_keyboard(menu, 123)
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 –∫–Ω–æ–ø–∫–∏
        assert len(keyboard.inline_keyboard[0]) == 2
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - 1 –∫–Ω–æ–ø–∫–∞
        assert len(keyboard.inline_keyboard[1]) == 1
    
    def test_build_keyboard_with_back_button(self, manager):
        """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        menu = Menu(
            id="test", 
            title="Test",
            back_button=True,
            back_to="main"
        )
        menu.add_item(MenuItem(id="1", text="Item", callback_data="cb"))
        
        keyboard = manager.build_keyboard(menu, 123)
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "–ù–∞–∑–∞–¥"
        last_button = keyboard.inline_keyboard[-1][0]
        assert "–ù–∞–∑–∞–¥" in last_button.text
        assert last_button.callback_data == "menu_main"
    
    def test_visibility_control(self, manager):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        menu = Menu(id="test", title="Test")
        menu.add_item(MenuItem(
            id="1", 
            text="Visible", 
            callback_data="cb1",
            visible=True
        ))
        menu.add_item(MenuItem(
            id="2", 
            text="Hidden", 
            callback_data="cb2",
            visible=False
        ))
        
        keyboard = manager.build_keyboard(menu, 123)
        
        # –¢–æ–ª—å–∫–æ –≤–∏–¥–∏–º–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        assert len(keyboard.inline_keyboard) == 1
        assert keyboard.inline_keyboard[0][0].text == "Visible"
    
    def test_admin_only_items(self, manager):
        """–¢–µ—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        menu = Menu(id="test", title="Test")
        menu.add_item(MenuItem(
            id="1",
            text="Admin Only",
            callback_data="cb1",
            admin_only=True
        ))
        menu.add_item(MenuItem(
            id="2",
            text="Public",
            callback_data="cb2",
            admin_only=False
        ))
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = manager.build_keyboard(menu, 123)
        assert len(admin_keyboard.inline_keyboard) == 2
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_keyboard = manager.build_keyboard(menu, 999)
        assert len(user_keyboard.inline_keyboard) == 1
        assert user_keyboard.inline_keyboard[0][0].text == "Public"
    
    def test_render_menu(self, manager):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–µ–Ω—é"""
        text, keyboard = manager.render_menu("main", 123)
        
        assert "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤" in text
        assert keyboard is not None
        assert isinstance(keyboard, InlineKeyboardMarkup)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ
        assert manager.get_current_menu(123) == "main"
    
    def test_render_nonexistent_menu(self, manager):
        """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω—é"""
        text, keyboard = manager.render_menu("nonexistent", 123)
        
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in text
        assert keyboard is None
    
    @pytest.mark.asyncio
    async def test_navigate_to(self, manager):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–µ–Ω—é"""
        # –ú–æ–∫ callback query
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
        success = await manager.navigate_to("templates", callback)
        
        assert success is True
        callback.message.edit_text.assert_called_once()
        callback.answer.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ edit_text
        call_args = callback.message.edit_text.call_args
        assert "–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π" in call_args[0][0]
        assert call_args[1]['parse_mode'] == 'HTML'
        assert call_args[1]['reply_markup'] is not None
    
    @pytest.mark.asyncio
    async def test_navigate_to_access_denied(self, manager):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞"""
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 999  # –ù–µ –∞–¥–º–∏–Ω
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()
        
        success = await manager.navigate_to("templates", callback)
        
        assert success is False
        callback.message.edit_text.assert_not_called()
        callback.answer.assert_called_with(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é", 
            show_alert=True
        )
    
    def test_add_dynamic_menu(self, manager):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        items = [
            {'id': 'item1', 'text': 'Dynamic 1', 'icon': '1Ô∏è‚É£', 'callback_data': 'dyn1'},
            {'id': 'item2', 'text': 'Dynamic 2', 'icon': '2Ô∏è‚É£', 'callback_data': 'dyn2'},
            {'id': 'item3', 'text': 'Dynamic 3', 'icon': '3Ô∏è‚É£', 'callback_data': 'dyn3'},
        ]
        
        menu = manager.add_dynamic_menu(
            menu_id="dynamic_test",
            title="Dynamic Menu",
            items=items,
            back_to="main"
        )
        
        assert menu.id == "dynamic_test"
        assert menu.title == "Dynamic Menu"
        assert len(menu.items) == 3
        assert menu.items[0].text == "Dynamic 1"
        assert menu.items[1].icon == "2Ô∏è‚É£"
        assert menu.back_to == "main"
        
        # –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ
        assert "dynamic_test" in manager.menus
    
    def test_export_menu_config(self, manager):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        config_json = manager.export_menu_config()
        config = json.loads(config_json)
        
        assert "main" in config
        assert "templates" in config
        assert "groups" in config
        assert "settings" in config
        
        main_config = config["main"]
        assert main_config['title'] == manager.menus["main"].title
        assert len(main_config['items']) > 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        first_item = main_config['items'][0]
        assert 'id' in first_item
        assert 'text' in first_item
        assert 'callback_data' in first_item
    
    def test_import_menu_config(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            "imported_menu": {
                "title": "Imported Menu",
                "description": "This is imported",
                "back_to": "main",
                "columns": 2,
                "items": [
                    {
                        "id": "imp1",
                        "text": "Imported Item 1",
                        "icon": "üì•",
                        "callback_data": "imported_1",
                        "admin_only": True,
                        "visible": True
                    },
                    {
                        "id": "imp2",
                        "text": "Imported Item 2",
                        "icon": "üì§",
                        "callback_data": "imported_2",
                        "admin_only": False,
                        "visible": True
                    }
                ]
            }
        }
        
        config_json = json.dumps(config)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = MenuManager(admin_ids=[123])
        manager.import_menu_config(config_json)
        
        assert "imported_menu" in manager.menus
        imported = manager.menus["imported_menu"]
        assert imported.title == "Imported Menu"
        assert imported.columns == 2
        assert len(imported.items) == 2
        assert imported.items[0].icon == "üì•"
    
    def test_register_callback(self, manager):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback"""
        def handler():
            return "handled"
        
        manager.register_callback("test_callback", handler)
        
        assert "test_callback" in manager._callbacks
        assert manager.get_callback_handler("test_callback") == handler
        assert manager.get_callback_handler("nonexistent") is None


class TestMenuMiddleware:
    """–¢–µ—Å—Ç—ã –¥–ª—è middleware –º–µ–Ω—é"""
    
    @pytest.fixture
    def middleware(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è middleware"""
        manager = MenuManager(admin_ids=[123, 456])
        return MenuMiddleware(manager)
    
    @pytest.mark.asyncio
    async def test_middleware_adds_manager(self, middleware):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ data"""
        handler = AsyncMock()
        event = MagicMock()
        event.chat = MagicMock()
        event.chat.type = 'group'  # –ù–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = {}
        
        await middleware(handler, event, data)
        
        assert 'menu_manager' in data
        assert isinstance(data['menu_manager'], MenuManager)
        handler.assert_called_once_with(event, data)
    
    @pytest.mark.asyncio
    async def test_middleware_blocks_non_admin(self, middleware):
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        handler = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 999  # –ù–µ –∞–¥–º–∏–Ω
        message.chat = MagicMock()
        message.chat.type = 'private'
        message.answer = AsyncMock()
        
        data = {}
        
        await middleware(handler, message, data)
        
        # Handler –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        handler.assert_not_called()
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ
        message.answer.assert_called_once()
        call_args = message.answer.call_args[0][0]
        assert "–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞" in call_args
    
    @pytest.mark.asyncio
    async def test_middleware_allows_admin(self, middleware):
        """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"""
        handler = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 123  # –ê–¥–º–∏–Ω
        message.chat = MagicMock()
        message.chat.type = 'private'
        message.answer = AsyncMock()
        
        data = {}
        
        await middleware(handler, message, data)
        
        # Handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        handler.assert_called_once_with(message, data)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        message.answer.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_middleware_allows_group_messages(self, middleware):
        """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø"""
        handler = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 999  # –ù–µ –∞–¥–º–∏–Ω
        message.chat = MagicMock()
        message.chat.type = 'group'  # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        message.answer = AsyncMock()
        
        data = {}
        
        await middleware(handler, message, data)
        
        # Handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω (–≥—Ä—É–ø–ø—ã –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è)
        handler.assert_called_once_with(message, data)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        message.answer.assert_not_called()


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])