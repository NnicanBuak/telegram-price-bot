"""
–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ API
"""

import pytest
import json
from unittest.mock import AsyncMock, MagicMock
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src_depricated.menu_system import MenuManager, Menu, MenuItem, MenuMiddleware


class TestMenuItem:
    """–¢–µ—Å—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""

    def test_menu_item_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
        item = MenuItem(
            id="test_item",
            text="–¢–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç",
            icon="üîß",
            callback_data="test_callback",
            admin_only=True,
            order=5,
        )

        assert item.id == "test_item"
        assert item.text == "–¢–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç"
        assert item.icon == "üîß"
        assert item.callback_data == "test_callback"
        assert item.admin_only is True
        assert item.visible is True  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
        assert item.order == 5

    def test_menu_item_defaults(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        item = MenuItem(id="test", text="Test")

        assert item.icon == ""
        assert item.callback_data == ""
        assert item.url == ""
        assert item.admin_only is False
        assert item.visible is True  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
        assert item.order == 0


class TestMenu:
    """–¢–µ—Å—Ç—ã –º–µ–Ω—é"""

    def test_menu_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é"""
        menu = Menu(
            id="test_menu",
            title="–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é",
            description="–û–ø–∏—Å–∞–Ω–∏–µ",
            back_to="main",
            columns=2,
            admin_only=True,
        )

        assert menu.id == "test_menu"
        assert menu.title == "–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é"
        assert menu.description == "–û–ø–∏—Å–∞–Ω–∏–µ"
        assert menu.back_to == "main"
        assert menu.columns == 2
        assert menu.admin_only is True
        assert len(menu.items) == 0

    def test_add_item(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        menu = Menu(id="test", title="Test")
        item = MenuItem(id="item1", text="Item 1", order=1)

        result = menu.add_item(item)

        assert result == menu  # –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç menu –¥–ª—è chaining
        assert len(menu.items) == 1
        assert menu.items[0] == item
        assert item.parent == menu  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è parent

    def test_add_multiple_items_sorting(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ order"""
        menu = Menu(id="test", title="Test")

        item3 = MenuItem(id="item3", text="Item 3", order=3)
        item1 = MenuItem(id="item1", text="Item 1", order=1)
        item2 = MenuItem(id="item2", text="Item 2", order=2)

        menu.add_item(item3)
        menu.add_item(item1)
        menu.add_item(item2)

        assert menu.items[0] == item1
        assert menu.items[1] == item2
        assert menu.items[2] == item3

    def test_method_chaining(self):
        """–¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤"""
        menu = Menu(id="test", title="Test")
        item1 = MenuItem(id="item1", text="Item 1")
        item2 = MenuItem(id="item2", text="Item 2")
