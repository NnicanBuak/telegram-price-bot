"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import pytest
import asyncio
import os
from unittest.mock import MagicMock, AsyncMock, patch
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from config import Config
from database import Database
from menu_system import MenuManager, MenuMiddleware


@pytest.fixture
async def test_environment():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["BOT_TOKEN"] = "test:token"
    os.environ["ADMIN_IDS"] = "123456789,987654321"
    os.environ["DB_TYPE"] = "sqlite"
    os.environ["DB_PATH"] = ":memory:"

    config = Config()
    db = Database(config.database_url)
    await db.init_db()

    menu_manager = MenuManager(admin_ids=config.admin_ids)

    yield config, db, menu_manager

    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è in-memory –ë–î


class TestFullWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""

    @pytest.mark.asyncio
    async def test_complete_mailing_workflow(self, test_environment):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        config, db, menu_manager = test_environment

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = await db.create_template(
            name="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –î–µ–∫–∞–±—Ä—å 2024",
            text="""
            <b>üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Ü–µ–Ω—ã!</b>
            
            ‚úÖ –¢–æ–≤–∞—Ä –ê - 1000‚ÇΩ
            ‚úÖ –¢–æ–≤–∞—Ä –ë - 2000‚ÇΩ
            ‚úÖ –¢–æ–≤–∞—Ä –í - 3000‚ÇΩ
            
            üìû –ó–∞–∫–∞–∑: +7 (999) 123-45-67
            """,
            file_id="document_123",
            file_type="document",
        )

        assert template.id is not None

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤
        vip_group = await db.create_chat_group(
            name="VIP –∫–ª–∏–µ–Ω—Ç—ã",
            chat_ids=[-1001111111111, -1002222222222, -1003333333333],
        )

        regular_group = await db.create_chat_group(
            name="–û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", chat_ids=[-1004444444444, -1005555555555]
        )

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        mailing = await db.create_mailing(
            template_id=template.id,
            group_ids=[vip_group.id, regular_group.id],
            total_chats=5,
        )

        assert mailing.status == "in_progress"

        # 4. –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        sent = 4
        failed = 1

        # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_mailing = await db.update_mailing_stats(
            mailing_id=mailing.id, sent_count=sent, failed_count=failed
        )

        assert updated_mailing.status == "completed"
        assert updated_mailing.sent_count == 4
        assert updated_mailing.failed_count == 1

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history = await db.get_mailings_history()
        assert len(history) > 0
        assert history[0].id == mailing.id

    @pytest.mark.asyncio
    async def test_menu_navigation_workflow(self, test_environment):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        config, db, menu_manager = test_environment

        admin_id = 123456789

        # –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        text, keyboard = menu_manager.render_menu("main", admin_id)
        assert "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤" in text
        assert menu_manager.get_current_menu(admin_id) == "main"

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —à–∞–±–ª–æ–Ω—ã
        text, keyboard = menu_manager.render_menu("templates", admin_id)
        assert "–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π" in text
        assert menu_manager.get_current_menu(admin_id) == "templates"

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—ã
        text, keyboard = menu_manager.render_menu("groups", admin_id)
        assert "–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤" in text
        assert menu_manager.get_current_menu(admin_id) == "groups"

        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        previous = menu_manager.go_back(admin_id)
        assert previous == "templates"

        # –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        history = menu_manager.menu_history[admin_id]
        assert "main" in history
        assert "templates" in history

    @pytest.mark.asyncio
    async def test_access_control_workflow(self, test_environment):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞"""
        config, db, menu_manager = test_environment

        admin_id = 123456789
        regular_user_id = 111111111

        # –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        admin_menu = menu_manager.get_menu("main", admin_id)
        assert admin_menu is not None

        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        user_menu = menu_manager.get_menu("main", regular_user_id)
        assert user_menu is None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
        middleware = MenuMiddleware(menu_manager)

        # –ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        admin_message = MagicMock(spec=types.Message)
        admin_message.from_user = MagicMock()
        admin_message.from_user.id = admin_id
        admin_message.chat = MagicMock()
        admin_message.chat.type = "private"
        admin_message.answer = AsyncMock()

        handler = AsyncMock()
        data = {}

        # –ê–¥–º–∏–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç
        await middleware(handler, admin_message, data)
        handler.assert_called_once()

        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        user_message = MagicMock(spec=types.Message)
        user_message.from_user = MagicMock()
        user_message.from_user.id = regular_user_id
        user_message.chat = MagicMock()
        user_message.chat.type = "private"
        user_message.answer = AsyncMock()

        handler.reset_mock()
        await middleware(handler, user_message, data)
        handler.assert_not_called()
        user_message.answer.assert_called_once()


class TestBotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_bot_initialization(self, test_environment):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        config, db, menu_manager = test_environment

        with patch("aiogram.Bot") as MockBot:
            mock_bot = MockBot.return_value
            mock_bot.get_me = AsyncMock(
                return_value=MagicMock(
                    id=123456789, username="test_bot", first_name="Test Bot"
                )
            )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–∞—Ç—á–∞
            from bot import bot, dp

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω
            assert bot is not None
            assert dp is not None

    @pytest.mark.asyncio
    async def test_command_handlers(self, test_environment):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        config, db, menu_manager = test_environment

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = MagicMock(spec=types.Message)
        message.from_user = MagicMock()
        message.from_user.id = 123456789  # Admin
        message.chat = MagicMock()
        message.chat.id = 123456789
        message.chat.type = "private"
        message.answer = AsyncMock()

        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
        from bot import cmd_start

        await cmd_start(message, menu_manager)

        message.answer.assert_called_once()
        call_args = message.answer.call_args
        assert "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤" in call_args[0][0]

        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
        message.answer.reset_mock()
        from bot import cmd_help

        await cmd_help(message, menu_manager)

        message.answer.assert_called_once()
        call_args = message.answer.call_args
        assert "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã" in call_args[0][0]

    @pytest.mark.asyncio
    async def test_callback_query_handling(self, test_environment):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query"""
        config, db, menu_manager = test_environment

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback query
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123456789  # Admin
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.message.edit_reply_markup = AsyncMock()
        callback.answer = AsyncMock()
        callback.data = "menu_templates"

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤
        success = await menu_manager.navigate_to("templates", callback)

        assert success is True
        callback.message.edit_text.assert_called_once()
        callback.answer.assert_called_once()


class TestDatabaseIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    @pytest.mark.asyncio
    async def test_database_with_real_data(self, test_environment):
        """–¢–µ—Å—Ç –ë–î —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        config, db, menu_manager = test_environment

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = []
        template_names = [
            "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π",
            "–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏",
            "VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "–ù–æ–≤–∏–Ω–∫–∏ –º–µ—Å—è—Ü–∞",
            "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
        ]

        for name in template_names:
            template = await db.create_template(
                name=name, text=f"<b>{name}</b>\n\n–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"
            )
            templates.append(template)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        groups = []
        group_configs = [
            ("–ú–æ—Å–∫–≤–∞ - –û–ø—Ç", 5),
            ("–†–µ–≥–∏–æ–Ω—ã - –†–æ–∑–Ω–∏—Ü–∞", 10),
            ("VIP –∫–ª–∏–µ–Ω—Ç—ã", 3),
            ("–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", 7),
        ]

        for group_name, chat_count in group_configs:
            chat_ids = [
                -(1000000000000 + i + hash(group_name)) for i in range(chat_count)
            ]
            group = await db.create_chat_group(group_name, chat_ids)
            groups.append(group)

        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–æ–∫
        for i in range(3):
            mailing = await db.create_mailing(
                template_id=templates[i].id,
                group_ids=[g.id for g in groups[: i + 2]],
                total_chats=sum(len(g.chat_ids) for g in groups[: i + 2]),
            )

            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            sent = mailing.total_chats - i
            failed = i

            await db.update_mailing_stats(
                mailing.id, sent_count=sent, failed_count=failed
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_templates = await db.get_templates()
        assert len(all_templates) == 5

        all_groups = await db.get_chat_groups()
        assert len(all_groups) == 4

        history = await db.get_mailings_history()
        assert len(history) == 3
        assert all(m.status == "completed" for m in history)


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    @pytest.mark.asyncio
    async def test_database_connection_error(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        with pytest.raises(Exception):
            db = Database("invalid://connection/string")
            await db.init_db()

    @pytest.mark.asyncio
    async def test_invalid_bot_token(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        os.environ["BOT_TOKEN"] = "invalid:token:format"

        with patch("aiogram.Bot") as MockBot:
            mock_bot = MockBot.return_value
            mock_bot.get_me = AsyncMock(side_effect=Exception("Invalid token"))

            try:
                from bot import bot

                bot_info = await bot.get_me()
                assert False, "Should raise exception"
            except Exception as e:
                assert "Invalid token" in str(e)

    @pytest.mark.asyncio
    async def test_missing_admin_ids(self):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID"""
        os.environ["BOT_TOKEN"] = "test:token"
        os.environ["ADMIN_IDS"] = ""

        with pytest.raises(ValueError, match="ADMIN_IDS"):
            Config()

    @pytest.mark.asyncio
    async def test_menu_error_handling(self, test_environment):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –º–µ–Ω—é"""
        config, db, menu_manager = test_environment

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
        callback = MagicMock(spec=types.CallbackQuery)
        callback.from_user = MagicMock()
        callback.from_user.id = 123456789
        callback.message = MagicMock()
        callback.message.edit_text = AsyncMock()
        callback.answer = AsyncMock()

        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        text, keyboard = menu_manager.render_menu("nonexistent", 123456789)
        assert "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in text
        assert keyboard is None


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    @pytest.mark.asyncio
    async def test_large_scale_operation(self, test_environment):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        config, db, menu_manager = test_environment

        start_time = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤
        templates = []
        for i in range(50):
            template = await db.create_template(
                name=f"Template {i}", text=f"Text {i}" * 100
            )
            templates.append(template)

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –≥—Ä—É–ø–ø
        groups = []
        for i in range(20):
            group = await db.create_chat_group(
                name=f"Group {i}",
                chat_ids=[-(1000000000000 + j + i * 100) for j in range(50)],
            )
            groups.append(group)

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
        for i in range(10):
            mailing = await db.create_mailing(
                template_id=templates[i].id,
                group_ids=[g.id for g in groups[:5]],
                total_chats=250,
            )

            await db.update_mailing_stats(mailing.id, sent_count=240, failed_count=10)

        elapsed = (datetime.now() - start_time).total_seconds()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –±—ã—Å—Ç—Ä–æ
        assert elapsed < 10  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Å–µ–∫—É–Ω–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_templates = await db.get_templates()
        assert len(all_templates) == 50

        all_groups = await db.get_chat_groups()
        assert len(all_groups) == 20

        history = await db.get_mailings_history()
        assert len(history) == 10


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short", "-m", "integration"])
