name: Tests and Linting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Create .env file for tests
        run: |
          cat > .env << EOF
          # В GitHub Actions используем ТОЛЬКО тестовые переменные
          # Основные переменные намеренно НЕ указываем

          # Тестовые переменные из secrets (приоритет над основными)
          TEST_BOT_TOKEN=${{ secrets.TEST_BOT_TOKEN || '1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-TEST' }}
          TEST_ADMIN_IDS=${{ secrets.TEST_ADMIN_IDS || '123456789,987654321' }}

          # Окружение
          ENVIRONMENT=testing
          LOG_LEVEL=DEBUG

          # Настройки для тестов
          MAILING_DELAY=0.0
          MAILING_BATCH_SIZE=5
          SEND_STARTUP_NOTIFICATIONS=false
          AUTO_BACKUP=false
          EOF

          echo "✅ Создан .env с тестовыми переменными"
          echo "TEST_BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN && 'установлен из secrets' || 'используется fallback' }}"
          echo "TEST_ADMIN_IDS: ${{ secrets.TEST_ADMIN_IDS && 'установлен из secrets' || 'используется fallback' }}"

      - name: Verify configuration
        run: |
          echo "🔍 Проверка конфигурации..."
          python -c "
          from src.config import Config
          config = Config()
          print('✅ Конфигурация загружена успешно')
          print(config.get_test_summary())
          print(f'Используется тестовый токен: {config.using_test_token}')
          print(f'Используются тестовые админы: {config.using_test_admins}')
          "

      - name: Run linting
        run: |
          # Форматирование
          black . --check --diff
          isort . --check-only --diff

          # Линтинг
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Type checking
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing \
            --junitxml=junit.xml --tb=short

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: junit.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint and Security Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pipx install poetry

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Security check with Bandit
        run: |
          bandit -r src/ -ll -x tests,venv,.venv
        continue-on-error: true

      - name: Check dependencies with Safety
        run: |
          safety check --json
        continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Create test environment
        run: |
          cat > .env << EOF
          # Используем только тестовые переменные
          TEST_BOT_TOKEN=${{ secrets.TEST_BOT_TOKEN || '1234567890:AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP-TEST  ' }}
          TEST_ADMIN_IDS=${{ secrets.TEST_ADMIN_IDS || '123456789,987654321' }}
          ENVIRONMENT=testing
          LOG_LEVEL=INFO
          MAILING_DELAY=0.0
          EOF

      - name: Run integration tests
        run: |
          pytest tests/ -v -m integration --tb=short
        env:
          ENVIRONMENT: testing

      - name: Test bot startup (dry run)
        run: |
          timeout 10s python src/main.py || [ $? -eq 124 ]
        env:
          ENVIRONMENT: testing
        continue-on-error: true

      - name: Upload test results
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: NnicanBuak/telegram-price-bot
