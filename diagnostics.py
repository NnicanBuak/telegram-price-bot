#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã Telegram Price Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from config import Config
    from database import Database
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class SystemChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.errors = []
        self.warnings = []
        self.info = []

    def log_error(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É"""
        self.errors.append(message)
        print(f"‚ùå {message}")

    def log_warning(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.warnings.append(message)
        print(f"‚ö†Ô∏è {message}")

    def log_info(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self.info.append(message)
        print(f"‚ÑπÔ∏è {message}")

    def log_success(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        print(f"‚úÖ {message}")

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python:")

        version = sys.version_info
        if version.major == 3 and version.minor >= 8:
            self.log_success(f"Python {version.major}.{version.minor}.{version.micro}")
        elif version.major == 3:
            self.log_warning(
                f"Python {version.major}.{version.minor}.{version.micro} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 3.8+)"
            )
        else:
            self.log_error(
                f"Python {version.major}.{version.minor}.{version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)"
            )

    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")

        required_packages = {
            "aiogram": "3.4.0",
            "sqlalchemy": "2.0.0",
            "aiosqlite": "0.19.0",
            "python-dotenv": "1.0.0",
            "psutil": "5.9.0",
        }

        for package, min_version in required_packages.items():
            try:
                __import__(package)
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
                try:
                    module = __import__(package)
                    version = getattr(module, "__version__", "unknown")
                    self.log_success(f"{package} {version}")
                except:
                    self.log_success(f"{package} (–≤–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)")
            except ImportError:
                self.log_error(f"{package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def check_env_file(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
        print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞:")

        env_path = Path(".env")
        if not env_path.exists():
            self.log_error(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        self.log_success(".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        stat = env_path.stat()
        if oct(stat.st_mode)[-3:] != "600":
            self.log_warning(
                f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ .env: {oct(stat.st_mode)[-3:]} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 600)"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if stat.st_size == 0:
            self.log_error(".env —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        else:
            self.log_info(f"–†–∞–∑–º–µ—Ä .env —Ñ–∞–π–ª–∞: {stat.st_size} –±–∞–π—Ç")

    def check_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        try:
            config = Config()
            self.log_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            errors = config.validate_config()
            if errors:
                for error in errors:
                    self.log_error(error)
            else:
                self.log_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.log_info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.admin_ids)}")
            self.log_info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get_database_info()['type']}")
            self.log_info(f"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {config.debug}")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def check_directories(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")

        try:
            config = Config()

            directories = {
                "data": config.data_dir,
                "db": config.db_dir,
                "logs": config.log_dir,
                "temp": config.temp_dir,
            }

            for name, path in directories.items():
                if path.exists():
                    if path.is_dir():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏
                        if os.access(path, os.W_OK):
                            self.log_success(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {name}/ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
                        else:
                            self.log_error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {name}/ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏")
                    else:
                        self.log_error(f"{name}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                else:
                    self.log_warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {name}/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

    async def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

        try:
            config = Config()
            database = Database(config.database_url)

            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await database.init()
            self.log_success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            async with database.session() as session:
                result = await session.execute("SELECT 1")
                self.log_success("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            try:
                templates = await database.get_templates()
                groups = await database.get_chat_groups()
                mailings = await database.get_mailings_history(limit=10)

                self.log_info(f"–®–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î: {len(templates)}")
                self.log_info(f"–ì—Ä—É–ø–ø –≤ –ë–î: {len(groups)}")
                self.log_info(f"–†–∞—Å—Å—ã–ª–æ–∫ –≤ –ë–î: {len(mailings)}")

            except Exception as e:
                self.log_warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

            await database.close()

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def check_bot_token(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:")

        try:
            from aiogram import Bot

            config = Config()

            bot = Bot(token=config.bot_token)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await bot.get_me()
            self.log_success(f"–ë–æ—Ç @{bot_info.username} ({bot_info.first_name})")
            self.log_info(f"ID –±–æ—Ç–∞: {bot_info.id}")

            if bot_info.can_join_groups:
                self.log_success("–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã")
            else:
                self.log_warning("–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã")

            await bot.session.close()

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

    def check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("\nüíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:")

        try:
            import psutil

            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            if memory.percent < 80:
                self.log_success(f"–ü–∞–º—è—Ç—å: {memory.percent:.1f}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            else:
                self.log_warning(
                    f"–ü–∞–º—è—Ç—å: {memory.percent:.1f}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
                )

            # –î–∏—Å–∫
            disk = psutil.disk_usage(".")
            if disk.percent < 90:
                self.log_success(f"–î–∏—Å–∫: {disk.percent:.1f}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            else:
                self.log_warning(f"–î–∏—Å–∫: {disk.percent:.1f}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–º–∞–ª–æ –º–µ—Å—Ç–∞)")

            # CPU
            cpu = psutil.cpu_percent(interval=1)
            if cpu < 80:
                self.log_success(f"CPU: {cpu:.1f}% –∑–∞–≥—Ä—É–∑–∫–∞")
            else:
                self.log_warning(f"CPU: {cpu:.1f}% –∑–∞–≥—Ä—É–∑–∫–∞ (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)")

        except ImportError:
            self.log_warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    def check_log_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:")

        try:
            config = Config()
            log_file = Path(config.log_file)

            if log_file.exists():
                stat = log_file.stat()
                size_mb = stat.st_size / 1024 / 1024

                self.log_success(f"–§–∞–π–ª –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({size_mb:.1f} MB)")

                if size_mb > 100:
                    self.log_warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–æ—Ç–∞—Ü–∏—è")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                try:
                    with open(log_file, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                        if lines:
                            last_line = lines[-1].strip()
                            self.log_info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_line[:100]}...")
                        else:
                            self.log_warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç–æ–π")
                except:
                    self.log_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤")

            else:
                self.log_warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 50)
        print("üìä –û–¢–ß–ï–¢ –û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï")
        print("=" * 50)

        if not self.errors and not self.warnings:
            print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            if self.errors:
                print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ ({len(self.errors)}):")
                for error in self.errors:
                    print(f"  ‚Ä¢ {error}")

            if self.warnings:
                print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
                for warning in self.warnings:
                    print(f"  ‚Ä¢ {warning}")

            print(f"\n‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ({len(self.info)}):")
            for info in self.info:
                print(f"  ‚Ä¢ {info}")

        print("\n" + "=" * 50)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.errors:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if any("BOT_TOKEN" in error for error in self.errors):
                print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
            if any(
                "–ë–î" in error or "database" in error.lower() for error in self.errors
            ):
                print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            if any("–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" in error for error in self.errors):
                print("  ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: poetry update")
            print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.sh –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    async def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã Telegram Price Bot")
        print("=" * 50)

        self.check_python_version()
        self.check_dependencies()
        self.check_env_file()
        self.check_config()
        self.check_directories()
        self.check_log_files()
        self.check_system_resources()

        await self.check_database()
        await self.check_bot_token()

        self.generate_report()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SystemChecker()

    try:
        await checker.run_all_checks()
    except KeyboardInterrupt:
        print("\n‚ö° –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    return 1 if checker.errors else 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
