#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
"""

import asyncio
import logging
from datetime import datetime
from typing import List, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, BufferedInputFile

from config import Config
from database import Database, Template, ChatGroup, Mailing
from menu_system import MenuManager, MenuMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_file = State()

class GroupStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_chats = State()

class MailingStates(StatesGroup):
    selecting_template = State()
    selecting_groups = State()
    confirming = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = Config()
bot = Bot(token=config.bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database(config.database_url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
menu_manager = MenuManager(admin_ids=config.admin_ids)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
menu_middleware = MenuMiddleware(menu_manager)
dp.message.middleware(menu_middleware)
dp.callback_query.middleware(menu_middleware)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(CommandStart())
async def cmd_start(message: types.Message, menu_manager: MenuManager):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ middleware
    text, keyboard = menu_manager.render_menu("main", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.message(Command("help"))
async def cmd_help(message: types.Message, menu_manager: MenuManager):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
/groups - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
/mailing - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    """
    await message.answer(help_text, parse_mode="HTML")

# –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
@dp.message(Command("templates"))
@dp.callback_query(F.data == "templates")
@admin_only
async def show_templates(update: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤"""
    message = update if isinstance(update, types.Message) else update.message
    
    templates = await db.get_templates()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìÑ {t.name}", callback_data=f"template_{t.id}")]
        for t in templates
    ] + [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="new_template")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    text = "üìã <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n" if templates else "üìã <b>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
    
    if isinstance(update, types.CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "new_template")
async def new_template(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates")]
        ])
    )
    await state.set_state(TemplateStates.waiting_for_name)
    await callback.answer()

@dp.message(TemplateStates.waiting_for_name)
async def template_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    await state.update_data(name=message.text)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.waiting_for_text)

@dp.message(TemplateStates.waiting_for_text)
async def template_text_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""
    await state.update_data(text=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="attach_file")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="save_template")]
    ])
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É?",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "attach_file")
async def request_file(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="save_template")]
        ])
    )
    await state.set_state(TemplateStates.waiting_for_file)
    await callback.answer()

@dp.message(TemplateStates.waiting_for_file, F.document | F.photo)
async def file_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    if message.document:
        file_id = message.document.file_id
        file_type = 'document'
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    
    await state.update_data(file_id=file_id, file_type=file_type)
    await save_template_to_db(message, state)

@dp.callback_query(F.data == "save_template")
async def save_template_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Ñ–∞–π–ª–∞"""
    await save_template_to_db(callback.message, state)
    await callback.answer()

async def save_template_to_db(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ –ë–î"""
    data = await state.get_data()
    
    template = await db.create_template(
        name=data['name'],
        text=data['text'],
        file_id=data.get('file_id'),
        file_type=data.get('file_type')
    )
    
    await message.answer(
        f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{template.name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates")]
        ])
    )
    await state.clear()

# –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
@dp.message(Command("groups"))
@dp.callback_query(F.data == "groups")
@admin_only
async def show_groups(update: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤"""
    message = update if isinstance(update, types.Message) else update.message
    
    groups = await db.get_chat_groups()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë• {g.name} ({len(g.chat_ids)} —á–∞—Ç–æ–≤)", 
                            callback_data=f"group_{g.id}")]
        for g in groups
    ] + [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_group")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    text = "üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:</b>\n\n" if groups else "üë• <b>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
    
    if isinstance(update, types.CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data == "new_group")
async def new_group(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="groups")]
        ])
    )
    await state.set_state(GroupStates.waiting_for_name)
    await callback.answer()

@dp.message(GroupStates.waiting_for_name)
async def group_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    await state.update_data(name=message.text)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: -1001234567890, -1009876543210</i>\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /id\n"
        "3. –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –±–æ—Ç—É @userinfobot",
        parse_mode="HTML"
    )
    await state.set_state(GroupStates.waiting_for_chats)

@dp.message(GroupStates.waiting_for_chats)
async def group_chats_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    try:
        chat_ids = [int(chat_id.strip()) for chat_id in message.text.split(',')]
        
        data = await state.get_data()
        group = await db.create_chat_group(
            name=data['name'],
            chat_ids=chat_ids
        )
        
        await message.answer(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group.name}¬ª —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chat_ids)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="groups")]
            ])
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Command("mailing"))
@dp.callback_query(F.data == "create_mailing")
@admin_only
async def create_mailing(update: types.Message | types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    message = update if isinstance(update, types.Message) else update.message
    
    templates = await db.get_templates()
    
    if not templates:
        text = "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω!"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="new_template")]
        ])
    else:
        text = "üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìÑ {t.name}", callback_data=f"mailing_template_{t.id}")]
            for t in templates
        ] + [
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
        ])
        await state.set_state(MailingStates.selecting_template)
    
    if isinstance(update, types.CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(F.data.startswith("mailing_template_"))
async def mailing_template_selected(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    template_id = int(callback.data.split("_")[2])
    await state.update_data(template_id=template_id)
    
    groups = await db.get_chat_groups()
    
    if not groups:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="new_group")]
            ])
        )
    else:
        await callback.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "<i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if False else '‚¨ú'} {g.name} ({len(g.chat_ids)} —á–∞—Ç–æ–≤)",
                    callback_data=f"toggle_group_{g.id}"
                )]
                for g in groups
            ] + [
                [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_groups")],
                [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_mailing")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
            ]),
            parse_mode="HTML"
        )
        await state.update_data(selected_groups=[])
        await state.set_state(MailingStates.selecting_groups)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("toggle_group_"))
async def toggle_group(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected_groups = data.get('selected_groups', [])
    
    if group_id in selected_groups:
        selected_groups.remove(group_id)
    else:
        selected_groups.append(group_id)
    
    await state.update_data(selected_groups=selected_groups)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    groups = await db.get_chat_groups()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if g.id in selected_groups else '‚¨ú'} {g.name} ({len(g.chat_ids)} —á–∞—Ç–æ–≤)",
            callback_data=f"toggle_group_{g.id}"
        )]
        for g in groups
    ] + [
        [InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all_groups")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_mailing")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(selected_groups)}")

@dp.callback_query(F.data == "select_all_groups")
async def select_all_groups(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã"""
    groups = await db.get_chat_groups()
    all_group_ids = [g.id for g in groups]
    await state.update_data(selected_groups=all_group_ids)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"‚úÖ {g.name} ({len(g.chat_ids)} —á–∞—Ç–æ–≤)",
            callback_data=f"toggle_group_{g.id}"
        )]
        for g in groups
    ] + [
        [InlineKeyboardButton(text="‚¨ú –°–Ω—è—Ç—å –≤—Å–µ", callback_data="deselect_all_groups")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="confirm_mailing")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("–í—Å–µ –≥—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã")

@dp.callback_query(F.data == "confirm_mailing")
async def confirm_mailing(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    
    if not data.get('selected_groups'):
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É!", show_alert=True)
        return
    
    template = await db.get_template(data['template_id'])
    groups = await db.get_chat_groups_by_ids(data['selected_groups'])
    
    total_chats = sum(len(g.chat_ids) for g in groups)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = f"<b>üìÆ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
    preview_text += f"üìÑ –®–∞–±–ª–æ–Ω: {template.name}\n"
    preview_text += f"üë• –ì—Ä—É–ø–ø: {len(groups)}\n"
    preview_text += f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n\n"
    preview_text += f"<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n{template.text[:500]}"
    
    if template.file_id:
        preview_text += f"\n\nüìé <i>+ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª</i>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_mailing")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(
        preview_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(MailingStates.confirming)
    await callback.answer()

@dp.callback_query(F.data == "send_mailing")
async def send_mailing(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    data = await state.get_data()
    template = await db.get_template(data['template_id'])
    groups = await db.get_chat_groups_by_ids(data['selected_groups'])
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    all_chat_ids = []
    for group in groups:
        all_chat_ids.extend(group.chat_ids)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_chat_ids = list(set(all_chat_ids))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    mailing = await db.create_mailing(
        template_id=template.id,
        group_ids=data['selected_groups'],
        total_chats=len(all_chat_ids)
    )
    
    # –°—á–µ—Ç—á–∏–∫–∏
    sent = 0
    failed = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for chat_id in all_chat_ids:
        try:
            if template.file_id:
                if template.file_type == 'photo':
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=template.file_id,
                        caption=template.text,
                        parse_mode="HTML"
                    )
                else:
                    await bot.send_document(
                        chat_id=chat_id,
                        document=template.file_id,
                        caption=template.text,
                        parse_mode="HTML"
                    )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=template.text,
                    parse_mode="HTML"
                )
            
            sent += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if sent % 10 == 0:
                await callback.message.edit_text(
                    f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...\n\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(all_chat_ids)}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed}"
                )
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            failed += 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
    await db.update_mailing_stats(mailing.id, sent, failed)
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        f"üìã –®–∞–±–ª–æ–Ω: {template.name}\n"
        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
        parse_mode="HTML"
    )
    
    await state.clear()
    await callback.answer()

# –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
@dp.callback_query(F.data == "history")
async def show_history(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    mailings = await db.get_mailings_history(limit=10)
    
    if not mailings:
        text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞</b>"
    else:
        text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
        for m in mailings:
            template = await db.get_template(m.template_id)
            text += f"üìÖ {m.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìÑ –®–∞–±–ª–æ–Ω: {template.name}\n"
            text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {m.sent_count}/{m.total_chats}\n"
            if m.failed_count:
                text += f"‚ùå –û—à–∏–±–æ–∫: {m.failed_count}\n"
            text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
        [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", callback_data="groups")],
        [InlineKeyboardButton(text="üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_mailing")],
        [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="history")]
    ])
    
    await callback.message.edit_text(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /id –≤ —á–∞—Ç–∞—Ö
@dp.message(Command("id"))
async def get_chat_id(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
    chat_info = f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
    chat_info += f"ID: <code>{message.chat.id}</code>\n"
    
    if message.chat.type != 'private':
        chat_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
        chat_info += f"–¢–∏–ø: {message.chat.type}\n"
    
    await message.answer(chat_info, parse_mode="HTML")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞
@dp.callback_query(F.data.startswith("template_"))
async def show_template_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split("_")[1])
    template = await db.get_template(template_id)
    
    if not template:
        await callback.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    text = f"üìÑ <b>{template.name}</b>\n\n"
    text += f"<b>–¢–µ–∫—Å—Ç:</b>\n{template.text[:1000]}"
    
    if template.file_id:
        text += f"\n\nüìé <i>–ï—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ({template.file_type})</i>"
    
    text += f"\n\nüìÖ –°–æ–∑–¥–∞–Ω: {template.created_at.strftime('%d.%m.%Y %H:%M')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_template_{template_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="templates")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã
@dp.callback_query(F.data.startswith("group_"))
async def show_group_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤"""
    if callback.data.startswith("group_"):
        group_id = int(callback.data.split("_")[1])
        group = await db.get_chat_group(group_id)
        
        if not group:
            await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        text = f"üë• <b>{group.name}</b>\n\n"
        text += f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {len(group.chat_ids)}\n\n"
        text += f"<b>ID —á–∞—Ç–æ–≤:</b>\n"
        
        for chat_id in group.chat_ids[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            text += f"‚Ä¢ <code>{chat_id}</code>\n"
        
        if len(group.chat_ids) > 10:
            text += f"\n<i>... –∏ –µ—â–µ {len(group.chat_ids) - 10} —á–∞—Ç–æ–≤</i>"
        
        text += f"\n\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {group.created_at.strftime('%d.%m.%Y %H:%M')}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_group_{group_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="groups")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
@dp.callback_query(F.data.startswith("delete_template_"))
async def delete_template(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split("_")[2])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_template_{template_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_{template_id}")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_template_"))
async def confirm_delete_template(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split("_")[3])
    
    await db.delete_template(template_id)
    
    await callback.message.edit_text(
        "‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates")]
        ])
    )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@dp.callback_query(F.data.startswith("delete_group_"))
async def delete_group(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[2])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_group_{group_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"group_{group_id}")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É?",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_group_"))
async def confirm_delete_group(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[3])
    
    await db.delete_chat_group(group_id)
    
    await callback.message.edit_text(
        "‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="groups")]
        ])
    )
    await callback.answer()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.init_db()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())