"""
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ–Ω—é –¥–ª—è Telegram Price Bot
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
"""

from typing import List, Optional
from menu_system import MenuManager, Menu, MenuItem
from database import Database


class BotMenus:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –±–æ—Ç–∞"""

    def __init__(self, menu_manager: MenuManager):
        self.menu_manager = menu_manager
        self.setup_static_menus()

    def setup_static_menus(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ–Ω—é –±–æ—Ç–∞"""
        self._create_main_menu()
        self._create_templates_menu()
        self._create_groups_menu()
        self._create_mailing_menu()
        self._create_history_menu()
        self._create_settings_menu()

    def _create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        main_menu = Menu(
            id="main",
            title="ü§ñ <b>Telegram Price Bot</b>",
            description="–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º —á–∞—Ç–æ–≤",
            back_button=False,
        )

        main_menu.add_item(
            MenuItem(
                id="templates",
                text="–®–∞–±–ª–æ–Ω—ã",
                icon="üìã",
                callback_data="menu_templates",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="groups", text="–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", icon="üë•", callback_data="menu_groups"
            )
        )

        main_menu.add_item(
            MenuItem(
                id="mailing",
                text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                icon="üìÆ",
                callback_data="menu_mailing",
            )
        )

        main_menu.add_item(
            MenuItem(
                id="history", text="–ò—Å—Ç–æ—Ä–∏—è", icon="üìä", callback_data="menu_history"
            )
        )

        main_menu.add_item(
            MenuItem(
                id="settings", text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", icon="‚öôÔ∏è", callback_data="menu_settings"
            )
        )

        self.menu_manager.register_menu(main_menu)

    def _create_templates_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤"""
        templates_menu = Menu(
            id="templates",
            title="üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>",
            description="–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π",
            back_to="main",
            columns=1,
        )

        templates_menu.add_item(
            MenuItem(
                id="templates_list",
                text="–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤",
                icon="üìÑ",
                callback_data="templates_list",
            )
        )

        templates_menu.add_item(
            MenuItem(
                id="templates_new",
                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                icon="‚ûï",
                callback_data="templates_new",
            )
        )

        self.menu_manager.register_menu(templates_menu)

    def _create_groups_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤"""
        groups_menu = Menu(
            id="groups",
            title="üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>",
            description="–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            back_to="main",
            columns=1,
        )

        groups_menu.add_item(
            MenuItem(
                id="groups_list",
                text="–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø",
                icon="üìã",
                callback_data="groups_list",
            )
        )

        groups_menu.add_item(
            MenuItem(
                id="groups_new",
                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
                icon="‚ûï",
                callback_data="groups_new",
            )
        )

        self.menu_manager.register_menu(groups_menu)

    def _create_mailing_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        mailing_menu = Menu(
            id="mailing",
            title="üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
            description="–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            back_to="main",
            columns=1,
        )

        mailing_menu.add_item(
            MenuItem(
                id="mailing_start",
                text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                icon="üöÄ",
                callback_data="mailing_start",
            )
        )

        mailing_menu.add_item(
            MenuItem(
                id="mailing_preview",
                text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                icon="üëÅ",
                callback_data="mailing_preview",
            )
        )

        self.menu_manager.register_menu(mailing_menu)

    def _create_history_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏"""
        history_menu = Menu(
            id="history",
            title="üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>",
            description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫",
            back_to="main",
            columns=1,
        )

        history_menu.add_item(
            MenuItem(
                id="history_recent",
                text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
                icon="üïê",
                callback_data="history_recent",
            )
        )

        history_menu.add_item(
            MenuItem(
                id="history_stats",
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                icon="üìà",
                callback_data="history_stats",
            )
        )

        self.menu_manager.register_menu(history_menu)

    def _create_settings_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_menu = Menu(
            id="settings",
            title="‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>",
            description="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
            back_to="main",
            columns=1,
        )

        settings_menu.add_item(
            MenuItem(
                id="settings_general",
                text="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                icon="üõ†",
                callback_data="settings_general",
            )
        )

        settings_menu.add_item(
            MenuItem(
                id="settings_notifications",
                text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                icon="üîî",
                callback_data="settings_notifications",
            )
        )

        settings_menu.add_item(
            MenuItem(
                id="settings_backup",
                text="–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
                icon="üíæ",
                callback_data="settings_backup",
            )
        )

        self.menu_manager.register_menu(settings_menu)

    async def create_templates_list_menu(self, db: Database) -> Menu:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = await db.get_templates()

        items = []
        for template in templates:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            display_name = (
                template.name[:30] + "..." if len(template.name) > 30 else template.name
            )

            items.append(
                {
                    "id": f"template_{template.id}",
                    "text": display_name,
                    "icon": "üìÑ",
                    "callback_data": f"template_view_{template.id}",
                }
            )

        if not items:
            items.append(
                {
                    "id": "no_templates",
                    "text": "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤",
                    "icon": "üìù",
                    "callback_data": "templates_new",
                }
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        items.append(
            {
                "id": "template_new",
                "text": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
                "icon": "‚ûï",
                "callback_data": "templates_new",
            }
        )

        return self.menu_manager.add_dynamic_menu(
            menu_id="templates_list",
            title="üìã <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</b>",
            items=items,
            back_to="templates",
        )

    async def create_groups_list_menu(self, db: Database) -> Menu:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
        groups = await db.get_chat_groups()

        items = []
        for group in groups:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            chat_count = len(group.chat_ids)
            display_name = f"{group.name} ({chat_count} —á–∞—Ç–æ–≤)"

            items.append(
                {
                    "id": f"group_{group.id}",
                    "text": display_name,
                    "icon": "üë•",
                    "callback_data": f"group_view_{group.id}",
                }
            )

        if not items:
            items.append(
                {
                    "id": "no_groups",
                    "text": "–ù–µ—Ç –≥—Ä—É–ø–ø",
                    "icon": "üë•",
                    "callback_data": "groups_new",
                }
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        items.append(
            {
                "id": "group_new",
                "text": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é",
                "icon": "‚ûï",
                "callback_data": "groups_new",
            }
        )

        return self.menu_manager.add_dynamic_menu(
            menu_id="groups_list",
            title="üë• <b>–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤</b>",
            items=items,
            back_to="groups",
        )

    async def create_mailing_template_selection_menu(self, db: Database) -> Menu:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        templates = await db.get_templates()

        items = []
        for template in templates:
            display_name = (
                template.name[:25] + "..." if len(template.name) > 25 else template.name
            )

            items.append(
                {
                    "id": f"mail_template_{template.id}",
                    "text": display_name,
                    "icon": "üìÑ",
                    "callback_data": f"mailing_select_template_{template.id}",
                }
            )

        if not items:
            items.append(
                {
                    "id": "no_templates_for_mailing",
                    "text": "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω",
                    "icon": "üìù",
                    "callback_data": "menu_templates",
                }
            )

        return self.menu_manager.add_dynamic_menu(
            menu_id="mailing_template_selection",
            title="üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω</b>",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            items=items,
            back_to="mailing",
        )

    async def create_mailing_groups_selection_menu(self, db: Database) -> Menu:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        groups = await db.get_chat_groups()

        items = []
        for group in groups:
            chat_count = len(group.chat_ids)
            display_name = f"{group.name} ({chat_count})"

            items.append(
                {
                    "id": f"mail_group_{group.id}",
                    "text": display_name,
                    "icon": "‚òê",  # Checkbox empty
                    "callback_data": f"mailing_toggle_group_{group.id}",
                }
            )

        if not items:
            items.append(
                {
                    "id": "no_groups_for_mailing",
                    "text": "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É",
                    "icon": "üë•",
                    "callback_data": "menu_groups",
                }
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            items.extend(
                [
                    {
                        "id": "select_all_groups",
                        "text": "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
                        "icon": "‚òëÔ∏è",
                        "callback_data": "mailing_select_all_groups",
                    },
                    {
                        "id": "confirm_mailing",
                        "text": "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                        "icon": "üöÄ",
                        "callback_data": "mailing_confirm",
                    },
                ]
            )

        return self.menu_manager.add_dynamic_menu(
            menu_id="mailing_groups_selection",
            title="üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã</b>",
            description="–û—Ç–º–µ—Ç—å—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            items=items,
            back_to="mailing_template_selection",
            columns=1,
        )

    async def create_history_list_menu(self, db: Database, limit: int = 10) -> Menu:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        mailings = await db.get_mailings_history(limit=limit)

        items = []
        for mailing in mailings:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            template = await db.get_template(mailing.template_id)
            template_name = template.name if template else "–£–¥–∞–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            success_rate = (
                (mailing.sent_count / mailing.total_chats * 100)
                if mailing.total_chats > 0
                else 0
            )
            status_icon = (
                "‚úÖ"
                if mailing.status == "completed"
                else "‚ùå" if mailing.status == "failed" else "‚è≥"
            )

            display_text = f"{template_name[:20]}... ({success_rate:.0f}%)"

            items.append(
                {
                    "id": f"history_{mailing.id}",
                    "text": display_text,
                    "icon": status_icon,
                    "callback_data": f"history_view_{mailing.id}",
                }
            )

        if not items:
            items.append(
                {
                    "id": "no_history",
                    "text": "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞",
                    "icon": "üì≠",
                    "callback_data": "menu_main",
                }
            )

        return self.menu_manager.add_dynamic_menu(
            menu_id="history_list",
            title="üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>",
            items=items,
            back_to="history",
        )

    def update_mailing_groups_menu(self, selected_groups: List[int]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        menu = self.menu_manager.menus.get("mailing_groups_selection")
        if menu:
            for item in menu.items:
                if item.id.startswith("mail_group_"):
                    group_id = int(item.id.replace("mail_group_", ""))
                    if group_id in selected_groups:
                        item.icon = "‚òëÔ∏è"  # Checkbox checked
                        item.text = item.text.replace("‚òê", "‚òëÔ∏è")
                    else:
                        item.icon = "‚òê"  # Checkbox empty
                        item.text = item.text.replace("‚òëÔ∏è", "‚òê")


def setup_bot_menus(menu_manager: MenuManager) -> BotMenus:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –±–æ—Ç–∞"""
    return BotMenus(menu_manager)
