import os
import json
import time
from typing import TYPE_CHECKING, Optional, List

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile,
    MessageEntity,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

if TYPE_CHECKING:
    from database import Database
    from menu_system import MenuManager

# –†–æ—É—Ç–µ—Ä
template_router = Router()

# –ö–æ–Ω—Ñ–∏–≥–∏
TEMPLATE_FILES_DIR = "files/templates"
EXPORTS_DIR = "files/exports"
PAGE_SIZE = 8  # –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
os.makedirs(TEMPLATE_FILES_DIR, exist_ok=True)
os.makedirs(EXPORTS_DIR, exist_ok=True)


# ===== FSM –°–û–°–¢–û–Ø–ù–ò–Ø =====
class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_file = State()
    editing_name = State()
    editing_text = State()
    editing_file = State()
    send_template_chat_id = State()
    import_waiting_file = State()
    list_pagination = State()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏


# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def entities_to_dicts(entities: Optional[List[MessageEntity]]) -> Optional[List[dict]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å MessageEntity -> list[dict] –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    if not entities:
        return None
    out = []
    for ent in entities:
        d = {
            "type": ent.type,
            "offset": ent.offset,
            "length": ent.length,
            # –Ω–µ –≤—Å–µ –ø–æ–ª—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
            "url": getattr(ent, "url", None),
            "user": None,
            "language": getattr(ent, "language", None),
        }
        # user –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º
        if getattr(ent, "user", None):
            try:
                out_user = {
                    "id": ent.user.id,
                    "is_bot": ent.user.is_bot,
                    "first_name": ent.user.first_name,
                    "username": getattr(ent.user, "username", None),
                    "language_code": getattr(ent.user, "language_code", None),
                }
                d["user"] = out_user
            except Exception:
                d["user"] = None
        out.append(d)
    return out


def dicts_to_entities(dicts: Optional[List[dict]]) -> Optional[List[MessageEntity]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å list[dict] -> list[MessageEntity] –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    if not dicts:
        return None
    ents = []
    for d in dicts:
        # —Å–æ–∑–¥–∞—ë–º MessageEntity —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        try:
            ent = MessageEntity(
                type=d.get("type"),
                offset=int(d.get("offset", 0)),
                length=int(d.get("length", 0)),
                url=d.get("url"),
                language=d.get("language"),
            )
            # –ø–æ–ª–µ user –æ—Å—Ç–∞–≤–ª—è–µ–º None (Telegram API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ user –æ–±—ä–µ–∫—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö,
            # –Ω–æ –æ–±—ã—á–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ). –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å User.
            ents.append(ent)
        except Exception:
            continue
    return ents


def build_template_keyboard_for_view(template, include_preview=True):
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞ (view)"""
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"template_edit_{template.id}"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"template_delete_{template.id}"
        ),
    )
    # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    kb.row(
        InlineKeyboardButton(
            text="üñä –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"template_edit_name_{template.id}"
        ),
        InlineKeyboardButton(
            text="üìù –¢–µ–∫—Å—Ç", callback_data=f"template_edit_text_{template.id}"
        ),
    )
    kb.row(
        InlineKeyboardButton(
            text="üìé –§–∞–π–ª", callback_data=f"template_edit_file_{template.id}"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"template_remove_file_{template.id}"
        ),
    )
    if include_preview:
        kb.row(
            InlineKeyboardButton(
                text="üëÅ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"template_preview_{template.id}"
            ),
            InlineKeyboardButton(
                text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"template_sendto_{template.id}"
            ),
        )
    kb.row(InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="templates_list"))
    return kb.as_markup()


def build_pagination_keyboard(total: int, page: int, prefix: str = "templates_page_"):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è: total items, page index (0-based)"""
    kb = InlineKeyboardMarkup(row_width=5)
    pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
    buttons = []
    if pages <= 1:
        buttons.append(
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates")]
        )
        kb.inline_keyboard = buttons
        return kb

    nav_row = []
    if page > 0:
        nav_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}{page-1}")
        )
    nav_row.append(InlineKeyboardButton(text=f"{page+1}/{pages}", callback_data="noop"))
    if page < pages - 1:
        nav_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}{page+1}")
        )
    kb.inline_keyboard.append(nav_row)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π" –∏ "–ù–∞–∑–∞–¥"
    kb.inline_keyboard.append(
        [
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="templates_new"
            ),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates"),
        ]
    )
    return kb


# ====== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (—Å–æ–∑–¥–∞–Ω–∏–µ / —Å–ø–∏—Å–æ–∫ / –ø—Ä–æ—Å–º–æ—Ç—Ä / —É–¥–∞–ª–µ–Ω–∏–µ / —Ç–µ—Å—Ç) ======
# –Ø –æ—Å—Ç–∞–≤–ª—è—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä—è—é –ø–æ–∫–∞–∑ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é.


@template_router.callback_query(F.data == "templates_list")
async def show_templates_list(
    callback: types.CallbackQuery, database: "Database", menu_manager: "MenuManager"
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0)"""
    await show_templates_list_page(callback, database, menu_manager, page=0)


@template_router.callback_query(F.data.startswith("templates_page_"))
async def templates_list_page_callback(
    callback: types.CallbackQuery, database: "Database", menu_manager: "MenuManager"
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    try:
        page = int(callback.data.split("_")[-1])
    except Exception:
        page = 0
    await show_templates_list_page(callback, database, menu_manager, page=page)


async def show_templates_list_page(
    callback: types.CallbackQuery,
    database: "Database",
    menu_manager: "MenuManager",
    page: int = 0,
):
    """–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ"""
    try:
        templates = await database.get_templates()
        total = len(templates)

        if total == 0:
            text = """üìã <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</b>

‚ùå <i>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."""
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="templates_new"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates"
                        )
                    ],
                ]
            )
            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
            return

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–∏–ª–∏ –ø–æ created_at –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        templates = sorted(templates, key=lambda t: getattr(t, "id", 0))
        pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
        if page < 0:
            page = 0
        if page >= pages:
            page = pages - 1

        start = page * PAGE_SIZE
        end = start + PAGE_SIZE
        page_items = templates[start:end]

        text = f"üìã <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\nüìä <i>–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {total}</i>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:"
        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(row_width=1)
        for tpl in page_items:
            icon = "üìÑ" if not getattr(tpl, "file_path", None) else "üìé"
            display_name = tpl.name if len(tpl.name) <= 40 else tpl.name[:37] + "..."
            kb.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"{icon} {display_name}",
                        callback_data=f"template_view_{tpl.id}",
                    )
                ]
            )

        # –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏
        pag_kb = build_pagination_keyboard(total, page)
        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—à–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –∑–∞—Ç–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        kb.inline_keyboard.extend(pag_kb.inline_keyboard)

        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@template_router.callback_query(F.data == "templates_new")
async def start_template_creation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    text = """‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –î–µ–∫–∞–±—Ä—å 2024" –∏–ª–∏ "–ê–∫—Ü–∏—è –Ω–µ–¥–µ–ª–∏"</i>"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(TemplateStates.waiting_for_name)
    await callback.answer()


@template_router.message(TemplateStates.waiting_for_name)
async def process_template_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    name = (message.text or "").strip()

    if len(name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(template_name=name)

    text = f"""‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:</b> {name}

üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:

<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏, –∫–æ–¥ –∏ —Ç.–¥.).</i>"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")]
        ]
    )

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(TemplateStates.waiting_for_text)


@template_router.message(TemplateStates.waiting_for_text)
async def process_template_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º entities)"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ entities
    text = message.text or message.caption or ""
    entities = (
        getattr(message, "entities", None)
        or getattr(message, "caption_entities", None)
        or None
    )

    if len(text.strip()) < 10:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(text) > 4000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(template_text=text)
    await state.update_data(template_entities=entities_to_dicts(entities))

    file_text = """‚úÖ <b>–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç!</b>

üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É?

<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, XLSX, TXT)
‚Ä¢ üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF)
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë</i>"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="template_attach_file"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–æ–∑–¥–∞—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="template_create_finish"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")],
        ]
    )

    await message.answer(file_text, reply_markup=keyboard)


@template_router.callback_query(F.data == "template_attach_file")
async def request_file_upload(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    text = """üìé <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —à–∞–±–ª–æ–Ω—É.

‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–æ–∑–¥–∞—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="template_create_finish"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(TemplateStates.waiting_for_file)
    await callback.answer()


@template_router.message(TemplateStates.waiting_for_file)
async def process_template_file(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    file = None
    file_name = None
    file_size = 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.document:
        file = message.document
        file_name = file.file_name
        file_size = file.file_size
    elif message.photo:
        file = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_name = f"image_{file.file_id}.jpg"
        file_size = file.file_size
    else:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_size > 20 * 1024 * 1024:  # 20 –ú–ë
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:"
        )
        return

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        bot = message.bot
        file_info = await bot.get_file(file.file_id)
        file_path = f"{TEMPLATE_FILES_DIR}/{file.file_id}_{file_name}"

        await bot.download_file(file_info.file_path, file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(template_file_path=file_path)

        await message.answer(
            f"‚úÖ <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:</b> {file_name}\n"
            f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {file_size // 1024} –ö–ë\n\n"
            "–°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω..."
        )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        await finish_template_creation(message, state, database)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")


@template_router.callback_query(F.data == "template_create_finish")
async def finish_template_creation_callback(
    callback: types.CallbackQuery, state: FSMContext, database: "Database"
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ callback"""
    await finish_template_creation(callback.message, state, database)
    await callback.answer()


async def finish_template_creation(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        template_name = data.get("template_name")
        template_text = data.get("template_text")
        template_file_path = data.get("template_file_path")
        template_entities = data.get("template_entities")  # list[dict] –∏–ª–∏ None

        if not template_name or not template_text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            await state.clear()
            return

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å. –ü–µ—Ä–µ–¥–∞—ë–º entities –µ—Å–ª–∏ –ë–î –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.
        # –ï—Å–ª–∏ –≤–∞—à–∞ –ë–î –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç `entities`, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä entities=template_entities.
        template = await database.create_template(
            name=template_name,
            text=template_text,
            file_path=template_file_path,
            entities=template_entities,
        )

        if template:
            file_info = ""
            if template_file_path:
                file_info = f"\nüìé <b>–§–∞–π–ª:</b> {os.path.basename(template_file_path)}"

            success_text = f"""‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üìÑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {template_name}
üìù <b>–¢–µ–∫—Å—Ç:</b> {template_text[:100]}{'...' if len(template_text) > 100 else ''}
üî¢ <b>ID:</b> {template.id}{file_info}"""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates_list"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"
                        )
                    ],
                ]
            )

            await message.answer(success_text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await state.clear()


@template_router.callback_query(F.data.startswith("template_view_"))
async def view_template(callback: types.CallbackQuery, database: "Database"):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    try:
        template_id = int(callback.data.split("_")[-1])
        template = await database.get_template(template_id)

        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
        file_info = (
            "‚ùå –ù–µ—Ç"
            if not getattr(template, "file_path", None)
            else f"‚úÖ {os.path.basename(template.file_path)}"
        )
        created_date = getattr(template, "created_at", None)
        created_str = created_date.strftime("%d.%m.%Y %H:%M") if created_date else "‚Äî"

        text = f"""üìÑ <b>–®–∞–±–ª–æ–Ω: {template.name}</b>

üìù <b>–¢–µ–∫—Å—Ç:</b>
{template.text if template.text else '‚Äî'}

üìé <b>–§–∞–π–ª:</b> {file_info}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created_str}
üî¢ <b>ID:</b> {template.id}"""

        keyboard = build_template_keyboard_for_view(template, include_preview=True)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@template_router.callback_query(F.data.startswith("template_delete_"))
async def confirm_template_deletion(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = callback.data.split("_")[-1]

    text = """üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"template_delete_confirm_{template_id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                ),
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@template_router.callback_query(F.data.startswith("template_delete_confirm_"))
async def delete_template(callback: types.CallbackQuery, database: "Database"):
    """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    try:
        template_id = int(callback.data.split("_")[-1])
        success = await database.delete_template(template_id)

        if success:
            await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0)
            await show_templates_list(callback, database, None)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@template_router.callback_query(F.data.startswith("template_test_"))
async def test_template(callback: types.CallbackQuery, database: "Database"):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∞–¥–º–∏–Ω—É (–≤ —á–∞—Ç –≥–¥–µ –±—ã–ª –≤—ã–∑–æ–≤)"""
    try:
        template_id = int(callback.data.split("_")[-1])
        template = await database.get_template(template_id)

        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –∏—Å–ø–æ–ª—å–∑—É–µ–º entities –∏–∑ —à–∞–±–ª–æ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        entities = getattr(template, "entities", None)
        entities_objs = dicts_to_entities(entities)

        test_text = f"üß™ <b>–¢–ï–°–¢ –®–ê–ë–õ–û–ù–ê</b>\n\n{template.text}"

        if getattr(template, "file_path", None) and os.path.exists(template.file_path):
            with open(template.file_path, "rb") as file:
                await callback.message.answer_document(
                    document=BufferedInputFile(
                        file.read(), filename=os.path.basename(template.file_path)
                    ),
                    caption=test_text,
                    parse_mode=None,  # entities used instead
                    caption_entities=entities_objs if entities_objs else None,
                )
        else:
            await callback.message.answer(test_text, entities=entities_objs)

        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", show_alert=True)


# ====== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ======
@template_router.callback_query(F.data.startswith("template_edit_name_"))
async def start_edit_name(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        template_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateStates.editing_name)

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:\n\n<i>–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –º–∞–∫—Å–∏–º—É–º 100</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                    )
                ]
            ]
        ),
    )
    await callback.answer()


@template_router.message(TemplateStates.editing_name)
async def process_edit_name(
    message: types.Message, state: FSMContext, database: "Database"
):
    name = (message.text or "").strip()
    if len(name) < 3:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    if len(name) > 100:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if template_id is None:
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —à–∞–±–ª–æ–Ω–∞")
        await state.clear()
        return

    success = await database.update_template(template_id, name=name, entities=None)
    if success:
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{name}</b>")
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —à–∞–±–ª–æ–Ω–∞
        # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å view: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å view
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")

    await state.clear()


# ====== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º entities) ======
@template_router.callback_query(F.data.startswith("template_edit_text_"))
async def start_edit_text(
    callback: types.CallbackQuery, state: FSMContext, database: "Database"
):
    try:
        template_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    template = await database.get_template(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateStates.editing_text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É
    preview = template.text if getattr(template, "text", None) else ""
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</b>\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{preview}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                    )
                ]
            ]
        ),
    )
    await callback.answer()


@template_router.message(TemplateStates.editing_text)
async def process_edit_text(
    message: types.Message, state: FSMContext, database: "Database"
):
    text = message.text or message.caption or ""
    entities = (
        getattr(message, "entities", None)
        or getattr(message, "caption_entities", None)
        or None
    )

    if len(text.strip()) < 10:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    if len(text) > 4000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    data = await state.get_data()
    template_id = data.get("edit_template_id")
    if template_id is None:
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —à–∞–±–ª–æ–Ω–∞")
        await state.clear()
        return

    success = await database.update_template(
        template_id, text=text, entities=entities_to_dicts(entities)
    )
    if success:
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")

    await state.clear()


# ====== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–ê ======
@template_router.callback_query(F.data.startswith("template_edit_file_"))
async def start_edit_file(
    callback: types.CallbackQuery, state: FSMContext, database: "Database"
):
    try:
        template_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    template = await database.get_template(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(edit_template_id=template_id)
    await state.set_state(TemplateStates.editing_file)

    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª¬ª):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª",
                        callback_data=f"template_remove_file_{template_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                    )
                ],
            ]
        ),
    )
    await callback.answer()


@template_router.message(TemplateStates.editing_file)
async def process_edit_file(
    message: types.Message, state: FSMContext, database: "Database"
):
    file = None
    file_name = None
    file_size = 0

    if message.document:
        file = message.document
        file_name = file.file_name
        file_size = file.file_size
    elif message.photo:
        file = message.photo[-1]
        file_name = f"image_{file.file_id}.jpg"
        file_size = file.file_size
    else:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:"
        )
        return

    if file_size > 20 * 1024 * 1024:
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 20 –ú–ë). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    try:
        bot = message.bot
        file_info = await bot.get_file(file.file_id)
        file_path = f"{TEMPLATE_FILES_DIR}/{file.file_id}_{file_name}"
        await bot.download_file(file_info.file_path, file_path)

        data = await state.get_data()
        template_id = data.get("edit_template_id")
        if template_id is None:
            await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —à–∞–±–ª–æ–Ω–∞")
            await state.clear()
            return

        success = await database.update_template(template_id, file_path=file_path)

        if success:
            await message.answer(f"‚úÖ –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {file_name}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

    await state.clear()


# ====== –£–î–ê–õ–ï–ù–ò–ï –§–ê–ô–õ–ê –ò–ó –®–ê–ë–õ–û–ù–ê ======
@template_router.callback_query(F.data.startswith("template_remove_file_"))
async def remove_file(callback: types.CallbackQuery, database: "Database"):
    try:
        template_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ë–î
    tpl = await database.get_template(template_id)
    if not tpl:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    file_path = getattr(tpl, "file_path", None)
    success = await database.update_template(template_id, file_path=None)
    if success:
        # –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        try:
            if file_path and os.path.exists(file_path):
                os.remove(file_path)
        except Exception:
            pass
        await callback.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω", show_alert=True)
        # –æ–±–Ω–æ–≤–∏—Ç—å view
        await view_template(callback, database)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


# ====== –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –®–ê–ë–õ–û–ù–ê ======
@template_router.callback_query(F.data.startswith("template_preview_"))
async def preview_template(callback: types.CallbackQuery, database: "Database"):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–µ–≤—å—é (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∏ –∂–µ entities)"""
    try:
        template_id = int(callback.data.split("_")[-1])
        template = await database.get_template(template_id)
        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        entities = getattr(template, "entities", None)
        entities_objs = dicts_to_entities(entities)

        preview_text = f"üëÅ <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–†</b>\n\n{template.text}"

        if getattr(template, "file_path", None) and os.path.exists(template.file_path):
            with open(template.file_path, "rb") as f:
                await callback.message.answer_document(
                    document=BufferedInputFile(
                        f.read(), filename=os.path.basename(template.file_path)
                    ),
                    caption=preview_text,
                    caption_entities=entities_objs if entities_objs else None,
                )
        else:
            await callback.message.answer(preview_text, entities=entities_objs)

        await callback.answer()
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ: {e}", show_alert=True)


# ====== –û–¢–ü–†–ê–í–ö–ê –®–ê–ë–õ–û–ù–ê –í –£–ö–ê–ó–ê–ù–ù–´–ô –ß–ê–¢ ======
@template_router.callback_query(F.data.startswith("template_sendto_"))
async def start_send_to(callback: types.CallbackQuery, state: FSMContext):
    try:
        template_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return

    await state.update_data(send_template_id=template_id)
    await state.set_state(TemplateStates.send_template_chat_id)

    await callback.message.edit_text(
        "üì§ –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω:\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä -1001234567890) –∏–ª–∏ username (@username)</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                    )
                ]
            ]
        ),
    )
    await callback.answer()


@template_router.message(TemplateStates.send_template_chat_id)
async def process_send_to(
    message: types.Message, state: FSMContext, database: "Database"
):
    chat_input = (message.text or "").strip()
    if not chat_input:
        await message.answer("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ username:")
        return

    # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º username –∏–ª–∏ —á–∏—Å–ª–æ–≤–Ω—ã–π ID
    if chat_input.startswith("@"):
        chat_id = chat_input  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å username –±–æ—Ç—É
    elif chat_input.lstrip("-").isdigit():
        chat_id = int(chat_input)
    else:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID/username. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username:"
        )
        return

    data = await state.get_data()
    template_id = data.get("send_template_id")
    template = await database.get_template(template_id)
    if not template:
        await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    entities_objs = dicts_to_entities(getattr(template, "entities", None))
    try:
        bot = message.bot
        if getattr(template, "file_path", None) and os.path.exists(template.file_path):
            with open(template.file_path, "rb") as f:
                await bot.send_document(
                    chat_id=chat_id,
                    document=BufferedInputFile(
                        f.read(), filename=os.path.basename(template.file_path)
                    ),
                    caption=template.text,
                    caption_entities=entities_objs if entities_objs else None,
                )
        else:
            await bot.send_message(
                chat_id=chat_id, text=template.text, entities=entities_objs
            )

        await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    await state.clear()


# ====== –≠–ö–°–ü–û–†–¢ / –ò–ú–ü–û–†–¢ –®–ê–ë–õ–û–ù–û–í ======
@template_router.callback_query(F.data == "template_export_all")
async def export_all_templates(callback: types.CallbackQuery, database: "Database"):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ JSON –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É"""
    try:
        templates = await database.get_templates()
        data = []
        for t in templates:
            data.append(
                {
                    "id": getattr(t, "id", None),
                    "name": getattr(t, "name", None),
                    "text": getattr(t, "text", None),
                    "file_path": getattr(t, "file_path", None),
                    "entities": getattr(t, "entities", None),
                    "created_at": (
                        getattr(t, "created_at", None).isoformat()
                        if getattr(t, "created_at", None)
                        else None
                    ),
                }
            )
        filename = f"{EXPORTS_DIR}/templates_export_{int(time.time())}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filename, "rb") as f:
            await callback.message.answer_document(
                document=BufferedInputFile(
                    f.read(), filename=os.path.basename(filename)
                ),
                caption="‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤",
            )
        await callback.answer()
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}", show_alert=True)


@template_router.callback_query(F.data == "template_import")
async def start_import_templates(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    await state.set_state(TemplateStates.import_waiting_file)
    await callback.message.edit_text(
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.\n\n"
        "–§–æ—Ä–º–∞—Ç: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ name, text, optional file_path –∏ entities.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")]
            ]
        ),
    )
    await callback.answer()


@template_router.message(TemplateStates.import_waiting_file)
async def process_import_file(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–ü—Ä–∏—ë–º JSON-—Ñ–∞–π–ª–∞ –∏ –∏–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤"""
    doc = message.document
    if not doc:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç).")
        return

    if not doc.file_name.lower().endswith(".json"):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .json")
        return

    try:
        bot = message.bot
        file_info = await bot.get_file(doc.file_id)
        temp_path = f"{EXPORTS_DIR}/{doc.file_id}_{doc.file_name}"
        await bot.download_file(file_info.file_path, temp_path)

        with open(temp_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        imported = 0
        for item in data:
            name = item.get("name")
            text = item.get("text")
            file_path = item.get("file_path")
            entities = item.get("entities")
            if not name or not text:
                continue
            # —Å–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω. –ï—Å–ª–∏ file_path —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äî –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å,
            # –Ω–æ –≤ –æ–±—â–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É/–ø—É—Ç—å.
            await database.create_template(
                name=name, text=text, file_path=file_path, entities=entities
            )
            imported += 1

        await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {imported}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    finally:
        await state.clear()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é (–º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤ menus.py)
@template_router.callback_query(F.data == "menu_templates")
async def open_templates_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è 'menu_templates' ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ templates_list"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫
    await show_templates_list(
        callback, callback.bot.get("db"), None
    )  # –µ—Å–ª–∏ —É —Ç–µ–±—è db –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ bot data
    # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    await callback.answer()
