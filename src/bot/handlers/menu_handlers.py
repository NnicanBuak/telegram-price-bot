"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –¥–ª—è Telegram Price Bot
–£–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º db –∏–∑ main –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ dependency injection
"""

import re
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import TYPE_CHECKING, List

if TYPE_CHECKING:
    from database import Database
    from menu_system import MenuManager
    from bot.menus import BotMenus

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
menu_router = Router()

# ========== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==========


class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_file = State()


class GroupStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_chats = State()


class MailingStates(StatesGroup):
    selecting_template = State()
    selecting_groups = State()
    confirming = State()


# ========== –ö–û–ú–ê–ù–î–´ ==========


@menu_router.message(Command("start"))
async def cmd_start(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("main", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>Telegram Price Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    """
    await message.answer(help_text, parse_mode="HTML")


@menu_router.message(Command("templates"))
async def cmd_templates(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("templates", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("groups"))
async def cmd_groups(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /groups"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("groups", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("mailing"))
async def cmd_mailing(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mailing"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("mailing", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("history"))
async def cmd_history(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("history", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("id"))
async def cmd_id(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
    chat_info = f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
    chat_info += f"ID: <code>{message.chat.id}</code>\n"
    chat_info += f"–¢–∏–ø: {message.chat.type}\n"

    if message.chat.type != "private":
        chat_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
        if message.chat.username:
            chat_info += f"Username: @{message.chat.username}\n"

    chat_info += f"\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
    chat_info += f"ID: <code>{message.from_user.id}</code>\n"
    chat_info += f"–ò–º—è: {message.from_user.first_name}"

    if message.from_user.last_name:
        chat_info += f" {message.from_user.last_name}"

    if message.from_user.username:
        chat_info += f"\nUsername: @{message.from_user.username}"

    await message.answer(chat_info, parse_mode="HTML")


# ========== –û–°–ù–û–í–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========


@menu_router.callback_query(F.data.startswith("menu_"))
async def handle_menu_navigation(
    callback: types.CallbackQuery, menu_manager: "MenuManager"
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    menu_id = callback.data.replace("menu_", "")
    success = await menu_manager.navigate_to(menu_id, callback)
    if not success:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)


@menu_router.callback_query(F.data == "templates_list")
async def handle_templates_list(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    await bot_menus.create_templates_list_menu(db)
    await menu_manager.navigate_to("templates_list", callback)


@menu_router.callback_query(F.data == "groups_list")
async def handle_groups_list(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
    await bot_menus.create_groups_list_menu(db)
    await menu_manager.navigate_to("groups_list", callback)


# ========== –†–ê–ë–û–¢–ê –° –®–ê–ë–õ–û–ù–ê–ú–ò ==========


@menu_router.callback_query(F.data == "templates_new")
async def handle_new_template(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")]
            ]
        ),
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_name)
    await callback.answer()


@menu_router.message(TemplateStates.waiting_for_name)
async def template_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    if len(message.text) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=message.text)
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</b>\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞:\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;</code>\n"
        "‚Ä¢ <code>&lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;</code>",
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_text)


@menu_router.message(TemplateStates.waiting_for_text)
async def template_text_received(
    message: types.Message, state: FSMContext, db: "Database"
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""
    if len(message.text) > 4096:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(text=message.text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="template_add_file"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="template_save_no_file"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")],
        ]
    )

    await message.answer(
        "üìé <b>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É?</b>\n\n"
        "–§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@menu_router.callback_query(F.data == "template_save_no_file")
async def save_template_without_file(
    callback: types.CallbackQuery, state: FSMContext, db: "Database"
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Ñ–∞–π–ª–∞"""
    data = await state.get_data()

    try:
        template = await db.create_template(name=data["name"], text=data["text"])

        success_text = f"‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        success_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {template.name}\n"
        success_text += f"üìÑ –°–∏–º–≤–æ–ª–æ–≤: {len(template.text)}\n"
        success_text += f"üïê –°–æ–∑–¥–∞–Ω: {template.created_at.strftime('%d.%m.%Y %H:%M')}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="templates_list"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="templates_new"
                    )
                ],
            ]
        )

        await callback.message.edit_text(
            success_text, reply_markup=keyboard, parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", show_alert=True)


@menu_router.callback_query(F.data.startswith("template_delete_"))
async def handle_template_delete(callback: types.CallbackQuery, db: "Database"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.replace("template_delete_", ""))
    success = await db.delete_template(template_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω!</b>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="templates_list"
                        )
                    ]
                ]
            ),
            parse_mode="HTML",
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", show_alert=True)

    await callback.answer()


# ========== –†–ê–ë–û–¢–ê –° –ì–†–£–ü–ü–ê–ú–ò ==========


@menu_router.callback_query(F.data.startswith("group_view_"))
async def handle_group_view(callback: types.CallbackQuery, db: "Database"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.replace("group_view_", ""))
    group = await db.get_chat_group(group_id)

    if not group:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = f"üë• <b>{group.name}</b>\n\n"
    text += f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤:</b> {len(group.chat_ids)}\n\n"

    if group.chat_ids:
        text += "<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>\n"
        for i, chat_id in enumerate(
            group.chat_ids[:10], 1
        ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            text += f"{i}. <code>{chat_id}</code>\n"

        if len(group.chat_ids) > 10:
            text += f"... –∏ –µ—â–µ {len(group.chat_ids) - 10} —á–∞—Ç–æ–≤\n"
    else:
        text += "<i>–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>\n"

    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {group.created_at.strftime('%d.%m.%Y %H:%M')}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"group_edit_{group_id}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"group_delete_{group_id}"
                ),
            ],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="groups_list")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@menu_router.callback_query(F.data == "groups_new")
async def handle_new_group(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    await callback.message.edit_text(
        "üë• <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="groups_list")]
            ]
        ),
        parse_mode="HTML",
    )
    await state.set_state(GroupStates.waiting_for_name)
    await callback.answer()


@menu_router.message(GroupStates.waiting_for_name)
async def group_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    if len(message.text) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=message.text)
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>-1001234567890, -1009876543210</code>\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/id</code> –≤ —á–∞—Ç–µ\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID",
        parse_mode="HTML",
    )
    await state.set_state(GroupStates.waiting_for_chats)


@menu_router.message(GroupStates.waiting_for_chats)
async def group_chats_received(
    message: types.Message, state: FSMContext, db: "Database"
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    try:
        text = message.text.strip()
        chat_ids = parse_chat_ids(text)

        if not chat_ids:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —á–∞—Ç–æ–≤.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>-1001234567890, -1009876543210</code>",
                parse_mode="HTML",
            )
            return

        if len(chat_ids) > 50:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤! "
                "–ú–∞–∫—Å–∏–º—É–º 50 —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É - —Ç–µ–ø–µ—Ä—å db –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ middleware!
        data = await state.get_data()
        group = await db.create_chat_group(name=data["name"], chat_ids=chat_ids)

        success_text = f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        success_text += f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {group.name}\n"
        success_text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {len(group.chat_ids)}\n"
        success_text += f"üïê –°–æ–∑–¥–∞–Ω–∞: {group.created_at.strftime('%d.%m.%Y %H:%M')}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë• –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="groups_list"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É", callback_data="groups_new"
                    )
                ],
            ]
        )

        await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:</b>\n{str(e)}", parse_mode="HTML"
        )


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========


def parse_chat_ids(text: str) -> List[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ ID —á–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    chat_ids = []

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –º–∏–Ω—É—Å–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö
    cleaned_text = re.sub(r"[^\d\-,\s]", "", text)

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    parts = cleaned_text.split(",")

    for part in parts:
        part = part.strip()
        if part:
            try:
                chat_id = int(part)
                if chat_id != 0:  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ ID
                    chat_ids.append(chat_id)
            except ValueError:
                continue

    return list(set(chat_ids))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã


# ========== –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ ==========


@menu_router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(
    callback: types.CallbackQuery, menu_manager: "MenuManager"
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await menu_manager.navigate_to("main", callback)


# ========== –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ==========


def register_menu_handlers(
    dp, menu_manager: "MenuManager", db: "Database", bot_menus: "BotMenus"
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""

    # –°–æ–∑–¥–∞–µ–º middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async def inject_dependencies(handler, event, data):
        """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        data.update({"menu_manager": menu_manager, "db": db, "bot_menus": bot_menus})
        return await handler(event, data)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback'–æ–≤
    menu_router.message.middleware.register(inject_dependencies)
    menu_router.callback_query.middleware.register(inject_dependencies)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(menu_router)


def setup_menu_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    return menu_router
