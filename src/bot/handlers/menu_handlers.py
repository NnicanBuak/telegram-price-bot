"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –¥–ª—è Telegram Price Bot
"""

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from menu_system import MenuManager
    from database import Database
    from bot.menus import BotMenus

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é
menu_router = Router()

# ========== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==========


class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_file = State()


class GroupStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_chats = State()


class MailingStates(StatesGroup):
    selecting_template = State()
    selecting_groups = State()
    confirming = State()


# ========== –ö–û–ú–ê–ù–î–´ ==========


@menu_router.message(Command("start"))
async def cmd_start(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("main", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
/groups - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
/mailing - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
/id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    """
    await message.answer(help_text, parse_mode="HTML")


@menu_router.message(Command("templates"))
async def cmd_templates(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /templates"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("templates", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("groups"))
async def cmd_groups(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /groups"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("groups", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("mailing"))
async def cmd_mailing(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mailing"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("mailing", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("history"))
async def cmd_history(message: types.Message, menu_manager: "MenuManager"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("history", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@menu_router.message(Command("id"))
async def cmd_id(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
    chat_info = f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
    chat_info += f"ID: <code>{message.chat.id}</code>\n"
    chat_info += f"–¢–∏–ø: {message.chat.type}\n"

    if message.chat.type != "private":
        chat_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
        if message.chat.username:
            chat_info += f"Username: @{message.chat.username}\n"

    chat_info += f"\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
    chat_info += f"ID: <code>{message.from_user.id}</code>\n"
    chat_info += f"–ò–º—è: {message.from_user.first_name}"

    if message.from_user.last_name:
        chat_info += f" {message.from_user.last_name}"

    if message.from_user.username:
        chat_info += f"\nUsername: @{message.from_user.username}"

    await message.answer(chat_info, parse_mode="HTML")


# ========== –û–°–ù–û–í–ù–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========


@menu_router.callback_query(F.data.startswith("menu_"))
async def handle_menu_navigation(
    callback: types.CallbackQuery, menu_manager: "MenuManager"
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
    menu_id = callback.data.replace("menu_", "")
    success = await menu_manager.navigate_to(menu_id, callback)
    if not success:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)


@menu_router.callback_query(F.data == "templates_list")
async def handle_templates_list(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    await bot_menus.create_templates_list_menu(db)
    await menu_manager.navigate_to("templates_list", callback)


@menu_router.callback_query(F.data == "groups_list")
async def handle_groups_list(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
    await bot_menus.create_groups_list_menu(db)
    await menu_manager.navigate_to("groups_list", callback)


@menu_router.callback_query(F.data == "mailing_start")
async def handle_mailing_start(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await bot_menus.create_mailing_template_selection_menu(db)
    await menu_manager.navigate_to("mailing_template_selection", callback)


@menu_router.callback_query(F.data == "history_recent")
async def handle_history_recent(
    callback: types.CallbackQuery,
    menu_manager: "MenuManager",
    db: "Database",
    bot_menus: "BotMenus",
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    await bot_menus.create_history_list_menu(db)
    await menu_manager.navigate_to("history_list", callback)


# ========== –†–ê–ë–û–¢–ê –° –®–ê–ë–õ–û–ù–ê–ú–ò ==========


@menu_router.callback_query(F.data.startswith("template_view_"))
async def handle_template_view(callback: types.CallbackQuery, db: "Database"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.replace("template_view_", ""))
    template = await db.get_template(template_id)

    if not template:
        await callback.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = f"üìÑ <b>{template.name}</b>\n\n"
    text += f"<i>–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</i>\n{template.text}\n\n"

    if template.file_id:
        file_type = (
            "üìé –î–æ–∫—É–º–µ–Ω—Ç" if template.file_type == "document" else "üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        )
        text += f"{file_type}: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n\n"

    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {template.created_at.strftime('%d.%m.%Y %H:%M')}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"template_edit_{template_id}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"template_delete_{template_id}"
                ),
            ],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="templates_list")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@menu_router.callback_query(F.data == "templates_new")
async def handle_new_template(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")]
            ]
        ),
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_name)
    await callback.answer()


@menu_router.message(TemplateStates.waiting_for_name)
async def template_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    if len(message.text) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=message.text)
    await message.answer(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</b>\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞:</i>\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;</code>\n"
        "‚Ä¢ <code>&lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;</code>",
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_text)


@menu_router.message(TemplateStates.waiting_for_text)
async def template_text_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""
    if len(message.text) > 4000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(text=message.text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="template_attach_file"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="template_save"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates_list")],
        ]
    )

    await message.answer(
        "üìé <b>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É?</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, "
        "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@menu_router.callback_query(F.data == "template_attach_file")
async def request_template_file(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìé <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª</b>\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, XLS, etc.)\n"
        "‚Ä¢ üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, etc.)\n\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="template_save")]
            ]
        ),
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_file)
    await callback.answer()


@menu_router.message(TemplateStates.waiting_for_file, F.document | F.photo)
async def template_file_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    if message.document:
        file_id = message.document.file_id
        file_type = "document"
        file_name = message.document.file_name or "–î–æ–∫—É–º–µ–Ω—Ç"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"
        file_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"

    await state.update_data(file_id=file_id, file_type=file_type, file_name=file_name)
    await save_template_to_db(message, state)


@menu_router.callback_query(F.data == "template_save")
async def save_template_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Ñ–∞–π–ª–∞"""
    await save_template_to_db(callback.message, state)
    await callback.answer()


async def save_template_to_db(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ –ë–î"""
    from main import db  # –ò–º–ø–æ—Ä—Ç –∏–∑ main

    data = await state.get_data()

    try:
        template = await db.create_template(
            name=data["name"],
            text=data["text"],
            file_id=data.get("file_id"),
            file_type=data.get("file_type"),
        )

        success_text = f"‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        success_text += f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {template.name}\n"
        success_text += f"üìù –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(template.text)}\n"

        if template.file_id:
            file_name = data.get("file_name", "—Ñ–∞–π–ª")
            success_text += f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: {file_name}\n"

        success_text += f"üïê –°–æ–∑–¥–∞–Ω: {template.created_at.strftime('%d.%m.%Y %H:%M')}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates_list"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω", callback_data="templates_new"
                    )
                ],
            ]
        )

        await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:</b>\n{str(e)}", parse_mode="HTML"
        )

    await state.clear()


@menu_router.callback_query(F.data.startswith("template_delete_"))
async def handle_template_delete(callback: types.CallbackQuery, db: "Database"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.replace("template_delete_", ""))
    template = await db.get_template(template_id)

    if not template:
        await callback.answer("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"template_confirm_delete_{template_id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"template_view_{template_id}"
                ),
            ]
        ]
    )

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω?\n\n"
        f"üìÑ <b>{template.name}</b>\n\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@menu_router.callback_query(F.data.startswith("template_confirm_delete_"))
async def confirm_template_delete(callback: types.CallbackQuery, db: "Database"):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.replace("template_confirm_delete_", ""))

    success = await db.delete_template(template_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω</b>\n\n" "–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="templates_list"
                        )
                    ]
                ]
            ),
            parse_mode="HTML",
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", show_alert=True)

    await callback.answer()


# ========== –†–ê–ë–û–¢–ê –° –ì–†–£–ü–ü–ê–ú–ò ==========


@menu_router.callback_query(F.data.startswith("group_view_"))
async def handle_group_view(callback: types.CallbackQuery, db: "Database"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.replace("group_view_", ""))
    group = await db.get_chat_group(group_id)

    if not group:
        await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = f"üë• <b>{group.name}</b>\n\n"
    text += f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤:</b> {len(group.chat_ids)}\n\n"

    if group.chat_ids:
        text += "<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>\n"
        for i, chat_id in enumerate(
            group.chat_ids[:10], 1
        ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            text += f"{i}. <code>{chat_id}</code>\n"

        if len(group.chat_ids) > 10:
            text += f"... –∏ –µ—â–µ {len(group.chat_ids) - 10} —á–∞—Ç–æ–≤\n"
    else:
        text += "<i>–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>\n"

    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {group.created_at.strftime('%d.%m.%Y %H:%M')}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"group_edit_{group_id}"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"group_delete_{group_id}"
                ),
            ],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="groups_list")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@menu_router.callback_query(F.data == "groups_new")
async def handle_new_group(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    await callback.message.edit_text(
        "üë• <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="groups_list")]
            ]
        ),
        parse_mode="HTML",
    )
    await state.set_state(GroupStates.waiting_for_name)
    await callback.answer()


@menu_router.message(GroupStates.waiting_for_name)
async def group_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    if len(message.text) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(name=message.text)
    await message.answer(
        "üí¨ <b>–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        "<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç "
        "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /id</i>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>-1001234567890, -1009876543210</code>\n"
        "–∏–ª–∏\n"
        "<code>-1001234567890\n-1009876543210</code>",
        parse_mode="HTML",
    )
    await state.set_state(GroupStates.waiting_for_chats)


@menu_router.message(GroupStates.waiting_for_chats)
async def group_chats_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º ID —á–∞—Ç–æ–≤
        chat_ids_text = message.text.replace("\n", ",")
        chat_ids_raw = [id.strip() for id in chat_ids_text.split(",") if id.strip()]

        chat_ids = []
        for chat_id_str in chat_ids_raw:
            try:
                chat_id = int(chat_id_str)
                if chat_id >= 0:
                    await message.answer(
                        f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞: {chat_id}\n"
                        "ID —á–∞—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                chat_ids.append(chat_id)
            except ValueError:
                await message.answer(
                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞: {chat_id_str}\n"
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return

        if not chat_ids:
            await message.answer(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ ID —á–∞—Ç–∞.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        if len(chat_ids) > 50:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤. –ú–∞–∫—Å–∏–º—É–º 50 —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É
        from main import db

        data = await state.get_data()

        group = await db.create_chat_group(name=data["name"], chat_ids=chat_ids)

        success_text = f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        success_text += f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {group.name}\n"
        success_text += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {len(group.chat_ids)}\n"
        success_text += f"üïê –°–æ–∑–¥–∞–Ω–∞: {group.created_at.strftime('%d.%m.%Y %H:%M')}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë• –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="groups_list"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É", callback_data="groups_new"
                    )
                ],
            ]
        )

        await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")

        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:</b>\n{str(e)}", parse_mode="HTML"
        )


# ========== –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ ==========


@menu_router.callback_query(F.data == "back_to_menu")
async def handle_back_to_menu(
    callback: types.CallbackQuery, menu_manager: "MenuManager"
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await menu_manager.navigate_to("main", callback)


# ========== –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ==========


def register_menu_handlers(
    dp, menu_manager: "MenuManager", db: "Database", bot_menus: "BotMenus"
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ middleware
    menu_router.message.middleware.register(
        lambda h, e, d: d.update(
            {"menu_manager": menu_manager, "db": db, "bot_menus": bot_menus}
        )
        or h(e, d)
    )

    menu_router.callback_query.middleware.register(
        lambda h, e, d: d.update(
            {"menu_manager": menu_manager, "db": db, "bot_menus": bot_menus}
        )
        or h(e, d)
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(menu_router)


def setup_menu_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
    return menu_router
