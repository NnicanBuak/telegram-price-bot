"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º —á–∞—Ç–æ–≤
"""

import asyncio
import os
from datetime import datetime
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from typing import TYPE_CHECKING, List, Dict
from shared.pagination import MenuHelper, ConfirmationHelper, PaginationHelper

if TYPE_CHECKING:
    from database import Database
    from shared.menu_system import MenuManager

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
mailing_router = Router()

# ========== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==========


class MailingStates(StatesGroup):
    selecting_template = State()
    selecting_groups = State()
    confirming = State()
    schedule_date = State()
    schedule_time = State()


# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========


@mailing_router.callback_query(F.data == "mailing_create")
async def start_mailing_creation(
    callback: types.CallbackQuery, database: "Database", state: FSMContext
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        templates = await database.get_templates()
        if not templates:
            text = """üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚ùå <i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤</i>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìã –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="template_create"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_mailing"
                        )
                    ],
                ]
            )

            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø
        groups = await database.get_chat_groups()
        if not groups:
            text = """üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚ùå <i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤</i>

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë• –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="group_create"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_mailing"
                        )
                    ],
                ]
            )

            await callback.message.edit_text(text, reply_markup=keyboard)
            await callback.answer()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = """üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

1Ô∏è‚É£ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è

üìã <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:</i>"""

        keyboard_buttons = []
        for template in templates:
            icon = "üìÑ" if not template.file_path else "üìé"
            text_preview = (
                template.text[:30] + "..." if len(template.text) > 30 else template.text
            )
            button_text = f"{icon} {template.name}"

            keyboard_buttons.append(
                [
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"mailing_select_template_{template.id}",
                    )
                ]
            )

        keyboard_buttons.append(
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(MailingStates.selecting_template)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@mailing_router.callback_query(F.data.startswith("mailing_select_template_"))
async def select_template_for_mailing(
    callback: types.CallbackQuery, database: "Database", state: FSMContext
):
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        template_id = int(callback.data.split("_")[-1])
        template = await database.get_template(template_id)

        if not template:
            await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        await state.update_data(selected_template_id=template_id)

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        groups = await database.get_chat_groups()

        text = f"""üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚úÖ <b>–®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω:</b> –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω "{template.name}"

2Ô∏è‚É£ <b>–®–∞–≥ 2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

üë• <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</i>"""

        keyboard_buttons = []
        for group in groups:
            chat_count = len(group.chat_ids) if group.chat_ids else 0
            if chat_count > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
                button_text = f"üë• {group.name} ({chat_count} —á–∞—Ç–æ–≤)"
                keyboard_buttons.append(
                    [
                        InlineKeyboardButton(
                            text=button_text,
                            callback_data=f"mailing_toggle_group_{group.id}",
                        )
                    ]
                )

        if not keyboard_buttons:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø —Å —á–∞—Ç–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏",
                                callback_data="groups_list",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()
            return

        keyboard_buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="mailing_confirm_groups"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mailing_create")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")],
            ]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(MailingStates.selecting_groups)
        await state.update_data(
            selected_groups=[]
        )  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@mailing_router.callback_query(F.data.startswith("mailing_toggle_group_"))
async def toggle_group_selection(
    callback: types.CallbackQuery, database: "Database", state: FSMContext
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        group_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        data = await state.get_data()
        selected_groups = data.get("selected_groups", [])

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        if group_id in selected_groups:
            selected_groups.remove(group_id)
        else:
            selected_groups.append(group_id)

        await state.update_data(selected_groups=selected_groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
        groups = await database.get_chat_groups()
        template_id = data.get("selected_template_id")
        template = await database.get_template(template_id)

        text = f"""üìÆ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚úÖ <b>–®–∞–±–ª–æ–Ω:</b> {template.name}

2Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã:</b> ({len(selected_groups)} –≤—ã–±—Ä–∞–Ω–æ)

üë• <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</i>"""

        keyboard_buttons = []
        total_chats = 0

        for group in groups:
            chat_count = len(group.chat_ids) if group.chat_ids else 0
            if chat_count > 0:
                is_selected = group.id in selected_groups
                icon = "‚úÖ" if is_selected else "üë•"
                button_text = f"{icon} {group.name} ({chat_count} —á–∞—Ç–æ–≤)"

                if is_selected:
                    total_chats += chat_count

                keyboard_buttons.append(
                    [
                        InlineKeyboardButton(
                            text=button_text,
                            callback_data=f"mailing_toggle_group_{group.id}",
                        )
                    ]
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
        if selected_groups:
            text += f"\n\nüìä <b>–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {total_chats} —á–∞—Ç–æ–≤</b>"

        keyboard_buttons.extend(
            [
                (
                    [
                        InlineKeyboardButton(
                            text=f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(selected_groups)} –≥—Ä—É–ø–ø)",
                            callback_data="mailing_confirm_groups",
                        )
                    ]
                    if selected_groups
                    else []
                ),
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mailing_create")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")],
            ]
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@mailing_router.callback_query(F.data == "mailing_confirm_groups")
async def confirm_mailing_creation(
    callback: types.CallbackQuery, database: "Database", state: FSMContext
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        data = await state.get_data()
        template_id = data.get("selected_template_id")
        selected_groups = data.get("selected_groups", [])

        if not selected_groups:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        template = await database.get_template(template_id)
        groups = await database.get_chat_groups()
        selected_group_objects = [g for g in groups if g.id in selected_groups]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_chats = sum(len(g.chat_ids) for g in selected_group_objects if g.chat_ids)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"""üìÆ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üìã <b>–®–∞–±–ª–æ–Ω:</b> {template.name}
üìÑ <b>–§–∞–π–ª:</b> {"‚úÖ –ï—Å—Ç—å" if template.file_path else "‚ùå –ù–µ—Ç"}

üë• <b>–ì—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>"""

        for group in selected_group_objects:
            chat_count = len(group.chat_ids) if group.chat_ids else 0
            text += f"\n  ‚Ä¢ {group.name} ({chat_count} —á–∞—Ç–æ–≤)"

        text += f"""

üìä <b>–ò—Ç–æ–≥–æ —á–∞—Ç–æ–≤:</b> {total_chats}
‚è±Ô∏è <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {estimate_mailing_time(total_chats)}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="mailing_execute_now"
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="mailing_schedule"
                    ),
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mailing_create")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(MailingStates.confirming)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@mailing_router.callback_query(F.data == "mailing_execute_now")
async def execute_mailing_now(
    callback: types.CallbackQuery, database: "Database", state: FSMContext
):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        data = await state.get_data()
        template_id = data.get("selected_template_id")
        selected_groups = data.get("selected_groups", [])

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –ë–î
        groups = await database.get_chat_groups()
        selected_group_objects = [g for g in groups if g.id in selected_groups]
        total_chats = sum(len(g.chat_ids) for g in selected_group_objects if g.chat_ids)

        mailing = await database.create_mailing(
            template_id=template_id, group_ids=selected_groups, total_chats=total_chats
        )

        await callback.message.edit_text(
            "üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"üìä <b>ID —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {mailing.id}\n"
            f"üìÆ <b>–ß–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {total_chats}\n\n"
            "üìà <i>–ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...</i>"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(
            execute_mailing_task(
                callback.message.bot,
                callback.message.chat.id,
                mailing.id,
                template_id,
                selected_group_objects,
                database,
            )
        )

        await state.clear()
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", show_alert=True)


# ========== –í–´–ü–û–õ–ù–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò ==========


async def execute_mailing_task(
    bot,
    admin_chat_id: int,
    mailing_id: int,
    template_id: int,
    groups: List,
    database: "Database",
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = await database.get_template(template_id)
        if not template:
            await bot.send_message(admin_chat_id, "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ chat_ids
        all_chat_ids = []
        for group in groups:
            if group.chat_ids:
                all_chat_ids.extend(group.chat_ids)

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_chat_ids = list(set(all_chat_ids))

        sent_count = 0
        failed_count = 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        progress_interval = max(1, len(unique_chat_ids) // 20)

        for i, chat_id in enumerate(unique_chat_ids, 1):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if template.file_path and os.path.exists(template.file_path):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–∞–π–ª–æ–º
                    with open(template.file_path, "rb") as file:
                        await bot.send_document(
                            chat_id=chat_id,
                            document=BufferedInputFile(
                                file.read(),
                                filename=os.path.basename(template.file_path),
                            ),
                            caption=template.text,
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(chat_id, template.text)

                sent_count += 1

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if i % progress_interval == 0 or i == len(unique_chat_ids):
                    progress_text = f"""üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}</b>

‚úÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed_count}
üìä <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {i} –∏–∑ {len(unique_chat_ids)}
üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {i / len(unique_chat_ids) * 100:.1f}%"""

                    try:
                        await bot.send_message(admin_chat_id, progress_text)
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)

            except Exception as e:
                failed_count += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                await asyncio.sleep(0.5)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
        await database.update_mailing_stats(mailing_id, sent_count, failed_count)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        success_rate = (
            (sent_count / len(unique_chat_ids) * 100) if unique_chat_ids else 0
        )

        final_text = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}
‚ùå –û—à–∏–±–æ–∫: {failed_count}
üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

‚è±Ô∏è <b>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="mailings_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"
                    )
                ],
            ]
        )

        await bot.send_message(admin_chat_id, final_text, reply_markup=keyboard)

    except Exception as e:
        error_text = f"""‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}</b>

üîç <b>–î–µ—Ç–∞–ª–∏:</b> {str(e)}

–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."""

        await bot.send_message(admin_chat_id, error_text)
        await database.update_mailing_stats(
            mailing_id, sent_count, failed_count, status="failed"
        )


# ========== –ò–°–¢–û–†–ò–Ø –†–ê–°–°–´–õ–û–ö ==========


@mailing_router.callback_query(F.data == "mailings_history")
async def show_mailings_history(callback: types.CallbackQuery, database: "Database"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    try:
        mailings = await database.get_mailings_history(limit=10)

        if not mailings:
            text = """üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>

‚ùå <i>–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="mailing_create"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_mailing"
                        )
                    ],
                ]
            )

        else:
            text = f"""üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>

üìà <i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(mailings)} —Ä–∞—Å—Å—ã–ª–æ–∫:</i>

"""

            for mailing in mailings:
                created_date = mailing.created_at.strftime("%d.%m %H:%M")
                success_rate = 0
                if mailing.total_chats > 0:
                    success_rate = mailing.sent_count / mailing.total_chats * 100

                status_icon = {
                    "pending": "‚è≥",
                    "running": "üöÄ",
                    "completed": "‚úÖ",
                    "failed": "‚ùå",
                }.get(mailing.status, "‚ùì")

                text += f"""üî∏ <b>#{mailing.id}</b> - {created_date} {status_icon}
   üìä {mailing.sent_count}/{mailing.total_chats} ({success_rate:.0f}%)
   ‚ùå –û—à–∏–±–æ–∫: {mailing.failed_count}

"""

            keyboard_buttons = []
            for mailing in mailings[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5
                button_text = (
                    f"üìä #{mailing.id} ({mailing.created_at.strftime('%d.%m')})"
                )
                keyboard_buttons.append(
                    [
                        InlineKeyboardButton(
                            text=button_text,
                            callback_data=f"mailing_details_{mailing.id}",
                        )
                    ]
                )

            keyboard_buttons.extend(
                [
                    [
                        InlineKeyboardButton(
                            text="üìÆ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing_create"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_mailing"
                        )
                    ],
                ]
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@mailing_router.callback_query(F.data.startswith("mailing_details_"))
async def show_mailing_details(callback: types.CallbackQuery, database: "Database"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        mailing_id = int(callback.data.split("_")[-1])
        mailing = await database.get_mailing(mailing_id)

        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã
        template = await database.get_template(mailing.template_id)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        success_rate = 0
        if mailing.total_chats > 0:
            success_rate = mailing.sent_count / mailing.total_chats * 100

        status_text = {
            "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "running": "üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "failed": "‚ùå –û—à–∏–±–∫–∞",
        }.get(mailing.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        created_date = mailing.created_at.strftime("%d.%m.%Y %H:%M:%S")

        text = f"""üìä <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing.id}</b>

üìã <b>–®–∞–±–ª–æ–Ω:</b> {template.name if template else "–£–¥–∞–ª–µ–Ω"}
üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}
üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing.sent_count}
‚ùå –û—à–∏–±–æ–∫: {mailing.failed_count}
üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {mailing.total_chats}
üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%

üìÑ <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:</b>"""

        if mailing.failed_count > 0:
            text += f"\n‚Ä¢ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã: ~{mailing.failed_count}"
            text += "\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω, —á–∞—Ç —É–¥–∞–ª–µ–Ω"
        else:
            text += "\n‚Ä¢ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                        callback_data=f"mailing_repeat_{mailing.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="mailings_history"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========


def estimate_mailing_time(chat_count: int) -> str:
    """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–∏–º–µ—Ä–Ω–æ 0.1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∑–∞–ø–∞—Å
    estimated_seconds = chat_count * 0.15

    if estimated_seconds < 60:
        return f"~{int(estimated_seconds)} —Å–µ–∫"
    elif estimated_seconds < 3600:
        return f"~{int(estimated_seconds / 60)} –º–∏–Ω"
    else:
        hours = int(estimated_seconds / 3600)
        minutes = int((estimated_seconds % 3600) / 60)
        return f"~{hours}—á {minutes}–º"


# ========== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –†–ê–°–°–´–õ–û–ö ==========


@mailing_router.callback_query(F.data == "mailing_schedule")
async def schedule_mailing(callback: types.CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    text = """‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:

<i>–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 15.12.2024
‚Ä¢ 01.01.2025</i>

üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="mailing_confirm_groups"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")],
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(MailingStates.schedule_date)
    await callback.answer()


@mailing_router.message(MailingStates.schedule_date)
async def process_schedule_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        date_text = message.text.strip()

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            scheduled_date = datetime.strptime(date_text, "%d.%m.%Y")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
            if scheduled_date.date() < datetime.now().date():
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return

        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await state.update_data(scheduled_date=scheduled_date)

        text = f"""‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

‚úÖ <b>–î–∞—Ç–∞:</b> {scheduled_date.strftime('%d.%m.%Y')}

üïê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:

<i>–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 09:00
‚Ä¢ 15:30
‚Ä¢ 23:45</i>"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_mailing")]
            ]
        )

        await message.answer(text, reply_markup=keyboard)
        await state.set_state(MailingStates.schedule_time)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@mailing_router.message(MailingStates.schedule_time)
async def process_schedule_time(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        time_text = message.text.strip()

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            time_obj = datetime.strptime(time_text, "%H:%M").time()
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        scheduled_date = data.get("scheduled_date")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_datetime = datetime.combine(scheduled_date.date(), time_obj)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if scheduled_datetime <= datetime.now():
            await message.answer(
                "‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î)
        await message.answer(
            f"‚è∞ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {scheduled_datetime.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìù <i>–§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
            f"–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.</i>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å",
                            callback_data="mailing_execute_now",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"
                        )
                    ],
                ]
            ),
        )

        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()
