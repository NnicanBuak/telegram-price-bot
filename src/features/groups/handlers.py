"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º shared —É—Ç–∏–ª–∏—Ç
"""

import re
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import TYPE_CHECKING, List
from shared.pagination import PaginationHelper, ConfirmationHelper, MenuHelper

if TYPE_CHECKING:
    from database import Database
    from shared.menu_system import MenuManager

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥—Ä—É–ø–ø
group_router = Router()

# ========== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==========


class GroupStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_chats = State()
    editing_name = State()
    editing_chats = State()
    adding_chats = State()


# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========


@group_router.callback_query(F.data == "groups_list")
async def show_groups_list(
    callback: types.CallbackQuery, database: "Database", menu_manager: "MenuManager"
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤"""
    try:
        groups = await database.get_chat_groups()

        if not groups:
            text = """üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>

‚ùå <i>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="group_create"
                        )
                    ],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_groups")],
                ]
            )
        else:
            text = f"""üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>

üìä <i>–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(groups)}</i>

–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PaginationHelper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
            def group_text_func(group):
                chat_count = len(group.chat_ids) if group.chat_ids else 0
                return f"{group.name} ({chat_count} —á–∞—Ç–æ–≤)"

            def group_callback_func(group):
                return f"group_view_{group.id}"

            additional_buttons = [
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="group_create"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_groups")],
            ]

            keyboard = PaginationHelper.create_simple_list_keyboard(
                items=groups,
                item_text_func=group_text_func,
                item_callback_func=group_callback_func,
                item_icon="üë•",
                additional_buttons=additional_buttons,
            )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@group_router.callback_query(F.data == "group_create")
async def start_group_creation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    text = """‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–û–ø—Ç–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", "–†–æ–∑–Ω–∏—á–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã", "VIP –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏"</i>

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫."""

    keyboard = ConfirmationHelper.create_back_keyboard(
        back_text="‚ùå –û—Ç–º–µ–Ω–∞", back_callback="groups_list"
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(GroupStates.waiting_for_name)
    await callback.answer()


@group_router.callback_query(F.data.startswith("group_view_"))
async def view_group(callback: types.CallbackQuery, database: "Database"):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        group_id = int(callback.data.split("_")[-1])
        group = await database.get_chat_group(group_id)

        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        chat_count = len(group.chat_ids) if group.chat_ids else 0
        created_date = group.created_at.strftime("%d.%m.%Y %H:%M")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        chat_list = ""
        if group.chat_ids:
            for i, chat_id in enumerate(group.chat_ids[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                chat_list += f"  {i}. <code>{chat_id}</code>\n"

            if len(group.chat_ids) > 10:
                chat_list += f"  ... –∏ –µ—â–µ {len(group.chat_ids) - 10} —á–∞—Ç–æ–≤\n"
        else:
            chat_list = "  <i>–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>\n"

        text = f"""üë• <b>–ì—Ä—É–ø–ø–∞: {group.name}</b>

üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤:</b> {chat_count}
üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}
üî¢ <b>ID:</b> {group.id}

üìã <b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>
{chat_list}

üí° <i>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ</i>"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"group_edit_{group.id}"
                    ),
                    InlineKeyboardButton(
                        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"group_delete_{group.id}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã",
                        callback_data=f"group_add_chats_{group.id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üß™ –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data=f"group_test_{group.id}"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="groups_list")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@group_router.callback_query(F.data.startswith("group_delete_"))
async def confirm_group_deletion(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    group_id = callback.data.split("_")[-1]

    text = """üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.

–ì—Ä—É–ø–ø–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —ç—Ç—É –≥—Ä—É–ø–ø—É, –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω—ã.

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É?"""

    keyboard = ConfirmationHelper.create_confirmation_keyboard(
        confirm_text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        cancel_text="‚ùå –û—Ç–º–µ–Ω–∞",
        confirm_callback=f"group_delete_confirm_{group_id}",
        cancel_callback=f"group_view_{group_id}",
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@group_router.callback_query(F.data.startswith("group_delete_confirm_"))
async def delete_group(callback: types.CallbackQuery, database: "Database"):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    try:
        group_id = int(callback.data.split("_")[-1])
        success = await database.delete_chat_group(group_id)

        if success:
            await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø
            await show_groups_list(callback, database, None)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@group_router.callback_query(F.data.startswith("group_test_"))
async def test_group_broadcast(callback: types.CallbackQuery, database: "Database"):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ"""
    try:
        group_id = int(callback.data.split("_")[-1])
        group = await database.get_chat_group(group_id)

        if not group or not group.chat_ids:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç –≥—Ä—É–ø–ø—ã
        test_message = """üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –≤–∞—à–µ–º —á–∞—Ç–µ.

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

ü§ñ <i>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""

        success_count = 0
        error_count = 0

        for chat_id in group.chat_ids:
            try:
                await callback.message.bot.send_message(chat_id, test_message)
                success_count += 1
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

        result_text = f"""üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:</b>

‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}
‚ùå –û—à–∏–±–æ–∫: {error_count}
üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(group.chat_ids)}"""

        await callback.message.answer(result_text)
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", show_alert=True)


# ========== MESSAGE –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========


@group_router.message(GroupStates.waiting_for_name)
async def process_group_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    name = message.text.strip()

    if len(name) < 3:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(name) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(group_name=name)

    text = f"""‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:</b> {name}

üìã –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:

<i>–ü—Ä–∏–º–µ—Ä—ã ID:
‚Ä¢ -1001234567890 (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)
‚Ä¢ -987654321 (–æ–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞)
‚Ä¢ 123456789 (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)</i>

üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /id –≤ —á–∞—Ç–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID

<b>–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:</b>
-1001234567890, -1009876543210, 123456789"""

    keyboard = ConfirmationHelper.create_back_keyboard(
        back_text="‚ùå –û—Ç–º–µ–Ω–∞", back_callback="groups_list"
    )

    await message.answer(text, reply_markup=keyboard)
    await state.set_state(GroupStates.waiting_for_chats)


@group_router.message(GroupStates.waiting_for_chats)
async def process_group_chats(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≥—Ä—É–ø–ø—ã"""
    try:
        chat_ids_text = message.text.strip()

        # –ü–∞—Ä—Å–∏–º ID —á–∞—Ç–æ–≤
        chat_ids = parse_chat_ids(chat_ids_text)

        if not chat_ids:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —á–∞—Ç–æ–≤.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                "<code>-1001234567890, -1009876543210</code>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        if len(chat_ids) > 100:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Ç–æ–≤. –ú–∞–∫—Å–∏–º—É–º 100 —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤...")

        valid_chats, invalid_chats = await validate_chat_ids(message.bot, chat_ids)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        group_name = data.get("group_name")

        if not group_name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
        group = await database.create_chat_group(name=group_name, chat_ids=valid_chats)

        if group:
            validation_info = ""
            if invalid_chats:
                validation_info = f"\n\n‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:</b> {len(invalid_chats)}\n<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞</i>"

            success_text = f"""‚úÖ <b>–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üë• <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {group_name}
üìä <b>–ß–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {len(valid_chats)}
üî¢ <b>ID –≥—Ä—É–ø–ø—ã:</b> {group.id}{validation_info}"""

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë• –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="groups_list"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"
                        )
                    ],
                ]
            )

            await message.answer(success_text, reply_markup=keyboard)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await state.clear()


# ========== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–£–ü–ü ==========


@group_router.callback_query(F.data.startswith("group_edit_"))
async def edit_group_menu(callback: types.CallbackQuery, database: "Database"):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    try:
        group_id = int(callback.data.split("_")[-1])
        group = await database.get_chat_group(group_id)

        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>

üë• <b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {group.name}
üìä <b>–ß–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b> {len(group.chat_ids) if group.chat_ids else 0}

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"group_edit_name_{group_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
                        callback_data=f"group_edit_chats_{group_id}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"group_view_{group_id}"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@group_router.callback_query(F.data.startswith("group_edit_name_"))
async def start_group_name_editing(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    group_id = callback.data.split("_")[-1]

    text = """‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã</b>

üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:

<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç—ã", "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã"</i>"""

    keyboard = ConfirmationHelper.create_back_keyboard(
        back_text="‚ùå –û—Ç–º–µ–Ω–∞", back_callback=f"group_edit_{group_id}"
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(GroupStates.editing_name)
    await state.update_data(editing_group_id=group_id)
    await callback.answer()


@group_router.message(GroupStates.editing_name)
async def process_group_name_edit(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    try:
        new_name = message.text.strip()

        if len(new_name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return

        if len(new_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        data = await state.get_data()
        group_id = int(data.get("editing_group_id"))

        success = await database.update_chat_group_name(group_id, new_name)

        if success:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë• –ö –≥—Ä—É–ø–ø–µ", callback_data=f"group_view_{group_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="groups_list"
                        )
                    ],
                ]
            )

            await message.answer(
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
                f"üë• <b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {new_name}",
                reply_markup=keyboard,
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")

        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()


@group_router.callback_query(F.data.startswith("group_add_chats_"))
async def start_adding_chats(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É"""
    group_id = callback.data.split("_")[-1]

    text = """‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É</b>

üìã –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:

<i>–ü—Ä–∏–º–µ—Ä—ã:
-1001234567890, -1009876543210</i>

üí° <b>–°–æ–≤–µ—Ç:</b> –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /id –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ"""

    keyboard = ConfirmationHelper.create_back_keyboard(
        back_text="‚ùå –û—Ç–º–µ–Ω–∞", back_callback=f"group_view_{group_id}"
    )

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(GroupStates.adding_chats)
    await state.update_data(adding_to_group_id=group_id)
    await callback.answer()


@group_router.message(GroupStates.adding_chats)
async def process_adding_chats(
    message: types.Message, state: FSMContext, database: "Database"
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤"""
    try:
        chat_ids_text = message.text.strip()
        new_chat_ids = parse_chat_ids(chat_ids_text)

        if not new_chat_ids:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        data = await state.get_data()
        group_id = int(data.get("adding_to_group_id"))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
        group = await database.get_chat_group(group_id)
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ —á–∞—Ç—ã
        existing_chat_ids = group.chat_ids or []
        all_chat_ids = list(set(existing_chat_ids + new_chat_ids))

        if len(all_chat_ids) > 100:
            await message.answer(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (100).\n"
                f"–¢–µ–∫—É—â–∏—Ö —á–∞—Ç–æ–≤: {len(existing_chat_ids)}\n"
                f"–ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤: {len(new_chat_ids)}\n"
                f"–ò—Ç–æ–≥–æ –±—É–¥–µ—Ç: {len(all_chat_ids)}"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        success = await database.update_chat_group_chats(group_id, all_chat_ids)

        if success:
            added_count = len(all_chat_ids) - len(existing_chat_ids)
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üë• –ö –≥—Ä—É–ø–ø–µ", callback_data=f"group_view_{group_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="groups_list"
                        )
                    ],
                ]
            )

            await message.answer(
                f"‚úÖ <b>–ß–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {added_count}\n"
                f"üìä <b>–í—Å–µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ:</b> {len(all_chat_ids)}",
                reply_markup=keyboard,
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–æ–≤")

        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========


def parse_chat_ids(text: str) -> List[int]:
    """–ü–∞—Ä—Å–∏–Ω–≥ ID —á–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    chat_ids = []

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –º–∏–Ω—É—Å–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö
    cleaned_text = re.sub(r"[^\d\-,\s]", "", text)

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    parts = cleaned_text.split(",")

    for part in parts:
        part = part.strip()
        if part:
            try:
                chat_id = int(part)
                if chat_id != 0:  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ ID
                    chat_ids.append(chat_id)
            except ValueError:
                continue

    return list(set(chat_ids))  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã


async def validate_chat_ids(bot, chat_ids: List[int]) -> tuple[List[int], List[int]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤"""
    valid_chats = []
    invalid_chats = []

    for chat_id in chat_ids[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        try:
            await bot.get_chat(chat_id)
            valid_chats.append(chat_id)
        except Exception:
            invalid_chats.append(chat_id)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if len(chat_ids) > 10:
        valid_chats.extend(chat_ids[10:])

    return valid_chats, invalid_chats
