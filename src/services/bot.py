import logging
from typing import Union, Dict, Any
from aiogram import types

logger = logging.getLogger(__name__)


async def show_main_menu(
    target: Union[types.Message, types.CallbackQuery],
    user_id: int,
    menu_manager,
    context: Dict[str, Any] = None,
) -> bool:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ)

    Args:
        target: Message –∏–ª–∏ CallbackQuery –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        menu_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ–Ω—é
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        success = await menu_manager.navigate_to("main", target, user_id, context)
        if success:
            logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        return False


async def get_help_text() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏"""
    return """üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- <b>–®–∞–±–ª–æ–Ω—ã</b> - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
- <b>–ì—Ä—É–ø–ø—ã</b> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
- <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
- <b>–ò—Å—Ç–æ—Ä–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫

<b>üîπ –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/config - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥–æ–π /id –≤ —á–∞—Ç–∞—Ö)
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É

<b>üí° –°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."""


def get_chat_info(message: types.Message) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
    chat_type_names = {
        "private": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
        "group": "–ì—Ä—É–ø–ø–∞",
        "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
        "channel": "–ö–∞–Ω–∞–ª",
    }

    info = (
        f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
        f"üî¢ <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n"
        f"üì± <b>–¢–∏–ø:</b> {chat_type_names.get(message.chat.type, message.chat.type)}\n"
        f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
    )

    if message.chat.title:
        info += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.chat.title}\n"
    if message.from_user.username:
        info += f"üìÆ <b>Username:</b> @{message.from_user.username}\n"

    info += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏</i>"

    return info


async def send_startup_notification(user_id: int, bot) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

    Returns:
        bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        await bot.send_message(
            chat_id=user_id,
            text="üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
        )
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False
