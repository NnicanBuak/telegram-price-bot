import logging
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command

from shared.menu import create_menu_system, MenuBuilder, create_crud_menu
from config import Config
from database import Database

logger = logging.getLogger(__name__)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
def setup_menus(menu_manager):
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = (
        MenuBuilder("main")
        .title("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        .description(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Price Bot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        .add_menu_link("üìÑ –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", "templates")
        .add_menu_link("üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", "groups")
        .add_menu_link("üìÆ –†–∞—Å—Å—ã–ª–∫–∞", "mailing")
        .add_action("üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", "mailings_history")
        .add_menu_link("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
        .no_back_button()
        .build()
    )

    # CRUD –º–µ–Ω—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    templates_menu = (
        create_crud_menu("templates", "üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        .back_button("main")
        .build()
    )

    # CRUD –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø
    groups_menu = (
        create_crud_menu("groups", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤")
        .back_button("main")
        .build()
    )

    # –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_menu = (
        MenuBuilder("mailing")
        .title("üìÆ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        .description(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —á–∞—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        .add_action("üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "mailing_create")
        .add_action("üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", "mailings_history")
        .back_button("main")
        .build()
    )

    # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_menu = (
        MenuBuilder("settings")
        .title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        .description("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã.")
        .add_action("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "system_status")
        .add_action("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "system_config")
        .add_action("üìù –õ–æ–≥–∏", "system_logs")
        .back_button("main")
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ–Ω—é
    for menu in [main_menu, templates_menu, groups_menu, mailing_menu, settings_menu]:
        menu_manager.register_menu(menu)


class CoreHandlers:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, config: Config, menu_manager):
        self.config = config
        self.menu_manager = menu_manager
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.message(CommandStart())(self.cmd_start)
        self.router.message(Command("help"))(self.cmd_help)
        self.router.message(Command("id"))(self.cmd_id)
        self.router.message(Command("config"))(self.cmd_config)
        self.router.message(Command("status"))(self.cmd_status)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
        self.router.callback_query(F.data == "menu_main")(self.show_main_menu)
        self.router.callback_query(F.data == "menu_templates")(self.show_templates_menu)
        self.router.callback_query(F.data == "menu_groups")(self.show_groups_menu)
        self.router.callback_query(F.data == "menu_mailing")(self.show_mailing_menu)
        self.router.callback_query(F.data == "menu_settings")(self.show_settings_menu)

    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id

        if not self.config.is_admin(user_id):
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode="HTML",
            )
            return

        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await self.show_main_menu_direct(message)

    async def show_main_menu_direct(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø—Ä—è–º—É—é"""
        text = """üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Price Bot!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÑ –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="menu_templates"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", callback_data="menu_groups"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìÆ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_mailing"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="mailings_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"
                    )
                ],
            ]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–®–∞–±–ª–æ–Ω—ã</b> - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ <b>–ì—Ä—É–ø–ø—ã</b> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
‚Ä¢ <b>–ò—Å—Ç–æ—Ä–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫

<b>üîπ –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/config - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥–æ–π /id –≤ —á–∞—Ç–∞—Ö)
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É

<b>üí° –°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."""

        await message.answer(help_text, parse_mode="HTML")

    async def cmd_id(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /id"""
        chat_type_names = {
            "private": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
            "group": "–ì—Ä—É–ø–ø–∞",
            "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
            "channel": "–ö–∞–Ω–∞–ª",
        }

        info = (
            f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
            f"üî¢ <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n"
            f"üì± <b>–¢–∏–ø:</b> {chat_type_names.get(message.chat.type, message.chat.type)}\n"
            f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
        )

        if message.chat.title:
            info += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.chat.title}\n"
        if message.from_user.username:
            info += f"üìÆ <b>Username:</b> @{message.from_user.username}\n"

        info += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏</i>"

        await message.answer(info, parse_mode="HTML")

    async def cmd_config(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /config - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        user_id = message.from_user.id

        if not self.config.is_admin(user_id):
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        try:
            config_summary = self.config.get_config_summary()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—à–∏–±–∫–∏
            errors = self.config.validate_config()
            if errors:
                config_summary += "\n\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**\n"
                for error in errors:
                    config_summary += f"‚Ä¢ {error}\n"
            else:
                config_summary += "\n\n‚úÖ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞**"

            await message.answer(config_summary, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    async def cmd_status(self, message: types.Message, database: Database):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        user_id = message.from_user.id

        if not self.config.is_admin(user_id):
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            templates_count = len(await database.get_templates())
            groups_count = len(await database.get_chat_groups())
            mailings_count = len(await database.get_mailings_history(limit=100))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            import psutil
            import datetime

            memory_usage = psutil.virtual_memory().percent
            disk_usage = psutil.disk_usage(".").percent

            uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(
                psutil.boot_time()
            )

            status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

ü§ñ <b>–ë–æ—Ç:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(self.config.admin_ids)}
‚Ä¢ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'üîß –í–∫–ª' if self.config.debug else 'üîí –í—ã–∫–ª'}

üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –®–∞–±–ª–æ–Ω—ã: {templates_count}
‚Ä¢ –ì—Ä—É–ø–ø—ã: {groups_count}  
‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏: {mailings_count}

üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ü–∞–º—è—Ç—å: {memory_usage:.1f}%
‚Ä¢ –î–∏—Å–∫: {disk_usage:.1f}%
‚Ä¢ –ê–ø—Ç–∞–π–º: {str(uptime).split('.')[0]}

üìÅ <b>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:</b>
‚Ä¢ –î–∞–Ω–Ω—ã–µ: {self.config.data_dir} ({'‚úÖ' if self.config.data_dir.exists() else '‚ùå'})
‚Ä¢ –õ–æ–≥–∏: {self.config.log_dir} ({'‚úÖ' if self.config.log_dir.exists() else '‚ùå'})
‚Ä¢ –ë–î: {self.config.db_dir} ({'‚úÖ' if self.config.db_dir.exists() else '‚ùå'})"""

            await message.answer(status_text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def show_main_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
        text = """üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Price Bot!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÑ –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="menu_templates"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", callback_data="menu_groups"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìÆ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="menu_mailing"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="mailings_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"
                    )
                ],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def show_templates_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤"""
        text = """üìÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="template_create"
                    )
                ],
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫", callback_data="template_list")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def show_groups_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥—Ä—É–ø–ø"""
        text = """üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="group_create"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data="groups_list"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def show_mailing_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        text = """üìÆ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —á–∞—Ç–æ–≤.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="mailing_create"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="mailings_history"
                    )
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    async def show_settings_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="system_status"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data="system_config"
                    )
                ],
                [InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="system_logs")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")],
            ]
        )

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
