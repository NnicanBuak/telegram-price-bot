import logging

from .base import HandlerModule, BaseHandler, HandlerContext

logger = logging.getLogger(__name__)


class CommandsModule(HandlerModule):
    def _setup_handlers(self):
        self.register_handler(
            "start", StartCommandHandler(self.config, self.database, self.menu_manager)
        )
        self.register_handler(
            "help", HelpCommandHandler(self.config, self.database, self.menu_manager)
        )
        self.register_handler(
            "id", IdCommandHandler(self.config, self.database, self.menu_manager)
        )


class StartCommandHandler(BaseHandler):
    async def execute(self, ctx: HandlerContext) -> bool:
        user_id = ctx.message.from_user.id

        if not ctx.is_programmatic and not ctx.config.is_admin(user_id):
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await ctx.message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode=self.config.parse_mode,
            )
            return

        if not ctx.is_programmatic:
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            await self.menu_manager.navigate_to("main", ctx.message, user_id)
        else:
            await self.menu_manager.sender.send_menu("main")


class HelpCommandHandler(BaseHandler):
    async def execute(self, ctx: HandlerContext) -> bool:
        help_text = """üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- <b>–®–∞–±–ª–æ–Ω—ã</b> - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
- <b>–ì—Ä—É–ø–ø—ã</b> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
- <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
- <b>–ò—Å—Ç–æ—Ä–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫

<b>üîπ –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/config - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥–æ–π /id –≤ —á–∞—Ç–∞—Ö)
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É

<b>üí° –°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."""

        await ctx.message.answer(help_text, parse_mode=self.config.parse_mode)


class IdCommandHandler(BaseHandler):
    async def execute(self, ctx: HandlerContext):
        """–ö–æ–º–∞–Ω–¥–∞ /id"""
        chat_type_names = {
            "private": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
            "group": "–ì—Ä—É–ø–ø–∞",
            "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
            "channel": "–ö–∞–Ω–∞–ª",
        }

        info = (
            f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
            f"üî¢ <b>ID —á–∞—Ç–∞:</b> <code>{ctx.message.chat.id}</code>\n"
            f"üì± <b>–¢–∏–ø:</b> {chat_type_names.get(ctx.message.chat.type, ctx.message.chat.type)}\n"
            f"üë§ <b>–í–∞—à ID:</b> <code>{ctx.message.from_user.id}</code>\n"
        )

        if ctx.message.chat.title:
            info += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {ctx.message.chat.title}\n"
        if ctx.message.from_user.username:
            info += f"üìÆ <b>Username:</b> @{ctx.message.from_user.username}\n"

        info += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏</i>"

        await ctx.message.answer(info, parse_mode=self.config.parse_mode)
