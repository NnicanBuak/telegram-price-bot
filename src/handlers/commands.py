import logging
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from menu import MenuManager, MenuRegistry
from config import Config
from database import Database

logger = logging.getLogger(__name__)


def get_router(
    config: Config,
    database: Database,
    menu_manager: MenuManager,
    menu_registry: MenuRegistry,
) -> Router:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    router = Router()

    @router.message(CommandStart())
    async def cmd_start(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id

        if not config.is_admin(user_id):
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode="HTML",
            )
            return

        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await menu_manager.navigate_to("main", message, user_id)

    @router.message(Command("help"))
    async def cmd_help(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- <b>–®–∞–±–ª–æ–Ω—ã</b> - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
- <b>–ì—Ä—É–ø–ø—ã</b> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
- <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
- <b>–ò—Å—Ç–æ—Ä–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–æ–∫

<b>üîπ –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/config - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

<b>üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤ (–ø–æ–ª—É—á–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥–æ–π /id –≤ —á–∞—Ç–∞—Ö)
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É

<b>üí° –°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."""

        await message.answer(help_text, parse_mode="HTML")

    @router.message(Command("id"))
    async def cmd_id(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /id"""
        chat_type_names = {
            "private": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
            "group": "–ì—Ä—É–ø–ø–∞",
            "supergroup": "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞",
            "channel": "–ö–∞–Ω–∞–ª",
        }

        info = (
            f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
            f"üî¢ <b>ID —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n"
            f"üì± <b>–¢–∏–ø:</b> {chat_type_names.get(message.chat.type, message.chat.type)}\n"
            f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>\n"
        )

        if message.chat.title:
            info += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.chat.title}\n"
        if message.from_user.username:
            info += f"üìÆ <b>Username:</b> @{message.from_user.username}\n"

        info += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—ã–ª–∫–∏</i>"

        await message.answer(info, parse_mode="HTML")

    @router.message(Command("config"))
    async def cmd_config(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /config - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        user_id = message.from_user.id

        if not config.is_admin(user_id):
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        try:
            config_summary = config.get_config_summary()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—à–∏–±–∫–∏
            errors = config.validate_config()
            if errors:
                config_summary += "\n\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:**\n"
                for error in errors:
                    config_summary += f"‚Ä¢ {error}\n"
            else:
                config_summary += "\n\n‚úÖ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞**"

            await message.answer(config_summary, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    @router.message(Command("status"))
    async def cmd_status(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        user_id = message.from_user.id

        if not config.is_admin(user_id):
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            templates_count = len(await database.get_templates())
            groups_count = len(await database.get_chat_groups())
            mailings_count = len(await database.get_mailings_history(limit=100))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            import psutil
            import datetime

            memory_usage = psutil.virtual_memory().percent
            disk_usage = psutil.disk_usage(".").percent

            uptime = datetime.datetime.now() - datetime.datetime.fromtimestamp(
                psutil.boot_time()
            )

            status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

ü§ñ <b>–ë–æ—Ç:</b>
- –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.admin_ids)}
- –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'üîß –í–∫–ª' if config.debug else 'üîí –í—ã–∫–ª'}

üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
- –®–∞–±–ª–æ–Ω—ã: {templates_count}
- –ì—Ä—É–ø–ø—ã: {groups_count}  
- –†–∞—Å—Å—ã–ª–∫–∏: {mailings_count}

üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>
- –ü–∞–º—è—Ç—å: {memory_usage:.1f}%
- –î–∏—Å–∫: {disk_usage:.1f}%
- –ê–ø—Ç–∞–π–º: {str(uptime).split('.')[0]}

üìÅ <b>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:</b>
- –î–∞–Ω–Ω—ã–µ: {config.data_dir} ({'‚úÖ' if config.data_dir.exists() else '‚ùå'})
- –õ–æ–≥–∏: {config.log_dir} ({'‚úÖ' if config.log_dir.exists() else '‚ùå'})
- –ë–î: {config.db_dir} ({'‚úÖ' if config.db_dir.exists() else '‚ùå'})"""

            await message.answer(status_text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    return router
