import logging
from aiogram import Router, F, types
from menu import MenuBuilder, create_crud_menu, menu_handler

logger = logging.getLogger(__name__)


def setup_menus(menu_manager) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = (
        MenuBuilder("main")
        .title("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        .description(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Price Bot!\n\n"
            "üÜï <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
            "‚úÖ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é\n"
            "‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        .add_menu_link("üìÑ –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", "templates")
        .add_menu_link("üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", "groups")
        .add_menu_link("üìÆ –†–∞—Å—Å—ã–ª–∫–∞", "mailing")
        .add_action("üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", "mailings_history")
        .add_menu_link("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
        .no_back_button()
        .build()
    )

    # CRUD –º–µ–Ω—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    templates_menu = (
        create_crud_menu("templates", "üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        .add_action("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "templates_stats", "üìä")
        .add_action("üì§ –≠–∫—Å–ø–æ—Ä—Ç", "templates_export", "üì§", admin_only=True)
        .add_action("üì• –ò–º–ø–æ—Ä—Ç", "templates_import", "üì•", admin_only=True)
        .back_button("main")
        .build()
    )

    # CRUD –º–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø
    groups_menu = (
        create_crud_menu("groups", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤")
        .add_action("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "groups_stats", "üìä")
        .add_action("üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞", "groups_search_chat", "üîç")
        .add_action("üì§ –≠–∫—Å–ø–æ—Ä—Ç", "groups_export", "üì§", admin_only=True)
        .back_button("main")
        .build()
    )

    # –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
    mailing_menu = (
        MenuBuilder("mailing")
        .title("üìÆ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        .description(
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º —á–∞—Ç–æ–≤.\n"
            "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
            "‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        .add_action("üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "mailing_create")
        .add_action("üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", "mailings_history")
        .add_action("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "mailing_stats")
        .add_action("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "mailing_test", admin_only=True)
        .back_button("main")
        .build()
    )

    # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_menu = (
        MenuBuilder("settings")
        .title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        .description("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã.")
        .admin_only(True)
        .add_action("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "system_status")
        .add_action("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "system_config")
        .add_action("üìù –õ–æ–≥–∏", "system_logs")
        .add_action("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "system_database")
        .add_action("üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏", "system_backup")
        .add_action("üßπ –û—á–∏—Å—Ç–∫–∞", "system_cleanup")
        .add_action("‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", "system_health")
        .back_button("main")
        .build()
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–µ–Ω—é
    for menu in [main_menu, templates_menu, groups_menu, mailing_menu, settings_menu]:
        menu_manager.register_menu(menu)

    logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


def get_router(deps) -> Router:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É –º–µ–Ω—é –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    router = Router()

    @router.callback_query(F.data.startswith("menu_") | F.data == "back")
    async def handle_menu_navigation(callback: types.CallbackQuery):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –º–µ–Ω—é"""
        success = await deps.menu_manager.handle_callback(callback)
        if not success:
            await callback.answer("‚ùå –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

    # === –°–ò–°–¢–ï–ú–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===

    @menu_handler(deps.menu_manager, "system_status")
    async def show_system_status(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            system_service = context.get("system_service")
            if not system_service:
                await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            status = system_service.get_system_status()

            status_text = "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"

            if "error" in status:
                status_text += f"‚ùå –û—à–∏–±–∫–∞: {status['error']}"
            else:
                status_text += f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {status['uptime_formatted']}\n"
                status_text += f"üíæ <b>–ü–∞–º—è—Ç—å:</b> {status['memory']['rss_mb']} MB ({status['memory']['percent']}%)\n"
                status_text += f"‚ö° <b>CPU:</b> {status['cpu_percent']}%\n\n"

                status_text += "<b>üíΩ –î–∏—Å–∫–∏:</b>\n"
                for disk_name, disk_info in status["disk_usage"].items():
                    if "error" in disk_info:
                        status_text += f"  ‚Ä¢ {disk_name}: {disk_info['error']}\n"
                    else:
                        status_text += f"  ‚Ä¢ {disk_name}: {disk_info['percent']}% ({disk_info['free'] // 1024 // 1024} MB —Å–≤–æ–±–æ–¥–Ω–æ)\n"

            await callback.message.edit_text(
                status_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_status"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_settings"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

    @menu_handler(deps.menu_manager, "system_health")
    async def show_system_health(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            system_service = context.get("system_service")
            if not system_service:
                await callback.answer("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            health = await system_service.get_health_check()

            # –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_icons = {
                "healthy": "‚úÖ",
                "warning": "‚ö†Ô∏è",
                "unhealthy": "‚ùå",
                "error": "üí•",
            }

            check_icons = {"ok": "‚úÖ", "warning": "‚ö†Ô∏è", "error": "‚ùå"}

            health_text = f"‚ù§Ô∏è <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            health_text += f"{status_icons.get(health['status'], '‚ùì')} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {health['status']}\n\n"

            if "checks" in health:
                health_text += "<b>üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
                for check_name, check_result in health["checks"].items():
                    icon = check_icons.get(check_result["status"], "‚ùì")
                    health_text += (
                        f"{icon} <b>{check_name}:</b> {check_result['message']}\n"
                    )

            if "error" in health:
                health_text += f"\nüí• <b>–û—à–∏–±–∫–∞:</b> {health['error']}"

            await callback.message.edit_text(
                health_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_health"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_settings"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è", show_alert=True)

    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ò–°–û–í ===

    @menu_handler(deps.menu_manager, "templates_stats")
    async def show_templates_stats(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            templates_service = context.get("templates_service")
            if not templates_service:
                await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            stats = await templates_service.get_template_statistics()

            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n"
            stats_text += f"üìù <b>–í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤:</b> {stats['total_count']}\n"
            stats_text += f"üìé <b>–° —Ñ–∞–π–ª–∞–º–∏:</b> {stats['with_files']}\n"
            stats_text += (
                f"üìè <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:</b> {stats['average_text_length']} —Å–∏–º–≤–æ–ª–æ–≤\n"
            )
            stats_text += f"üÜï <b>–°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> {stats['created_today']}\n\n"

            if stats["file_types"]:
                stats_text += "<b>üìÅ –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:</b>\n"
                for file_type, count in stats["file_types"].items():
                    stats_text += f"  ‚Ä¢ {file_type}: {count}\n"

            await callback.message.edit_text(
                stats_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="templates_stats"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    @menu_handler(deps.menu_manager, "groups_stats")
    async def show_groups_stats(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø"""
        try:
            groups_service = context.get("groups_service")
            if not groups_service:
                await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å –≥—Ä—É–ø–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            stats = await groups_service.get_group_statistics()

            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø</b>\n\n"

            if stats["total_groups"] == 0:
                stats_text += "‚ùå –ì—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                stats_text += f"üë• <b>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:</b> {stats['total_groups']}\n"
                stats_text += f"üí¨ <b>–í—Å–µ–≥–æ —á–∞—Ç–æ–≤:</b> {stats['total_chats']}\n"
                stats_text += f"üî¢ <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> {stats['unique_chats']}\n"
                stats_text += f"üìä <b>–°—Ä–µ–¥–Ω–µ–µ —á–∞—Ç–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—É:</b> {stats['average_chats_per_group']:.1f}\n"
                stats_text += f"üìÇ <b>–ü—É—Å—Ç—ã—Ö –≥—Ä—É–ø–ø:</b> {stats['empty_groups']}\n\n"

                stats_text += "<b>üèÜ –†–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø:</b>\n"
                stats_text += f"  ‚Ä¢ –°–∞–º–∞—è –±–æ–ª—å—à–∞—è: {stats['largest_group']['name']} ({stats['largest_group']['size']} —á–∞—Ç–æ–≤)\n"
                stats_text += f"  ‚Ä¢ –°–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è: {stats['smallest_group']['name']} ({stats['smallest_group']['size']} —á–∞—Ç–æ–≤)\n"

            await callback.message.edit_text(
                stats_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="groups_stats"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_groups"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    @menu_handler(deps.menu_manager, "mailing_stats")
    async def show_mailing_stats(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            mailing_service = context.get("mailing_service")
            if not mailing_service:
                await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                return

            stats = await mailing_service.get_mailing_statistics()

            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            stats_text += f"üìÆ <b>–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫:</b> {stats['total_mailings']}\n"
            stats_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:</b> {stats['completed_mailings']}\n"
            stats_text += f"‚ùå <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</b> {stats['failed_mailings']}\n"
            stats_text += f"üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {stats['active_mailings']}\n"
            stats_text += (
                f"üì® <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {stats['total_messages_sent']}\n"
            )
            stats_text += f"üìà <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {stats['success_rate']}%\n"

            await callback.message.edit_text(
                stats_text,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="mailing_stats"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_mailing"
                            )
                        ],
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    # === –ù–ê–í–ò–ì–ê–¶–ò–Ø –ú–ï–ñ–î–£ –ú–ï–ù–Æ ===

    @router.callback_query(F.data == "menu_main")
    async def show_main_menu(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await deps.menu_manager.navigate_to("main", callback, callback.from_user.id)

    @router.callback_query(F.data == "menu_templates")
    async def show_templates_menu(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤"""
        await deps.menu_manager.navigate_to(
            "templates", callback, callback.from_user.id
        )

    @router.callback_query(F.data == "menu_groups")
    async def show_groups_menu(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥—Ä—É–ø–ø"""
        await deps.menu_manager.navigate_to("groups", callback, callback.from_user.id)

    @router.callback_query(F.data == "menu_mailing")
    async def show_mailing_menu(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"""
        await deps.menu_manager.navigate_to("mailing", callback, callback.from_user.id)

    @router.callback_query(F.data == "menu_settings")
    async def show_settings_menu(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await deps.menu_manager.navigate_to("settings", callback, callback.from_user.id)

    return router
