import logging
from typing import List, Type, Protocol, Dict, Any
from aiogram import Dispatcher, Router
from menu import MenuManager, MenuRegistry
from config import Config
from database import Database

logger = logging.getLogger(__name__)


class HandlerDependencies:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    def __init__(
        self,
        config: Config,
        database: Database,
        menu_manager: MenuManager,
        menu_registry: MenuRegistry,
    ):
        self.config = config
        self.database = database
        self.menu_manager = menu_manager
        self.menu_registry = menu_registry


class HandlerModule(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –º–æ–¥—É–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""

    @staticmethod
    def get_router(dependencies: HandlerDependencies) -> Router:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        ...

    @staticmethod
    def setup_menus(menu_manager: MenuManager) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        ...


class HandlerRegistry:
    """–†–µ–µ—Å—Ç—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    def __init__(
        self,
        config: Config,
        database: Database,
        menu_manager: MenuManager,
        menu_registry: MenuRegistry,
    ):
        self.config = config
        self.database = database
        self.menu_manager = menu_manager
        self.menu_registry = menu_registry
        self._handler_modules: List[HandlerModule] = []
        self._registered_routers: List[Router] = []

    def register_module(self, handler_module: HandlerModule) -> "HandlerRegistry":
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        self._handler_modules.append(handler_module)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(handler_module, "setup_menus"):
            try:
                handler_module.setup_menus(self.menu_manager)
                logger.info(f"‚úÖ –ú–µ–Ω—é –¥–ª—è {handler_module.__name__} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é {handler_module.__name__}: {e}")

        return self

    def register_modules(self, modules: List[HandlerModule]) -> "HandlerRegistry":
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π —Å—Ä–∞–∑—É"""
        for module in modules:
            self.register_module(module)
        return self

    def setup_dispatcher(self, dp: Dispatcher) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ –≤—Å–µ–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        for handler_module in self._handler_modules:
            try:
                router = handler_module.get_router(
                    self.config, self.database, self.menu_manager, self.menu_registry
                )
                dp.include_router(router)
                self._registered_routers.append(router)
                logger.info(f"‚úÖ –†–æ—É—Ç–µ—Ä {handler_module.__name__} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {handler_module.__name__}: {e}")
                raise

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        return {
            "total_modules": len(self._handler_modules),
            "total_routers": len(self._registered_routers),
            "module_names": [module.__name__ for module in self._handler_modules],
            "menu_count": (
                len(self.menu_manager._menus)
                if hasattr(self.menu_manager, "_menus")
                else 0
            ),
        }

    def validate_modules(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        results = {}
        for module in self._handler_modules:
            module_name = module.__name__
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ get_router
                if not hasattr(module, "get_router"):
                    results[module_name] = False
                    logger.error(f"‚ùå {module_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç get_router()")
                    continue

                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ä–æ—É—Ç–µ—Ä
                router = module.get_router(
                    self.config, self.database, self.menu_manager, self.menu_registry
                )

                if not isinstance(router, Router):
                    results[module_name] = False
                    logger.error(f"‚ùå {module_name}: get_router() –≤–µ—Ä–Ω—É–ª –Ω–µ Router")
                    continue

                results[module_name] = True
                logger.info(f"‚úÖ {module_name}: –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

            except Exception as e:
                results[module_name] = False
                logger.error(f"‚ùå {module_name}: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - {e}")

        return results


def create_handler_registry(
    config: Config,
    database: Database,
    menu_manager: MenuManager,
    menu_registry: MenuRegistry,
) -> HandlerRegistry:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    return HandlerRegistry(config, database, menu_manager, menu_registry)


def setup_all_handlers(
    config: Config,
    database: Database,
    menu_manager: MenuManager,
    menu_registry: MenuRegistry,
    dispatcher: Dispatcher,
    handler_modules: List[HandlerModule],
) -> HandlerRegistry:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {len(handler_modules)} –º–æ–¥—É–ª–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
    registry = create_handler_registry(config, database, menu_manager, menu_registry)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    registry.register_modules(handler_modules)

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    validation_results = registry.validate_modules()
    failed_modules = [
        name for name, success in validation_results.items() if not success
    ]

    if failed_modules:
        logger.error(f"‚ùå –ú–æ–¥—É–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {failed_modules}")
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª–∏: {failed_modules}")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    registry.setup_dispatcher(dispatcher)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = registry.get_statistics()
    logger.info(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats['total_modules']} –º–æ–¥—É–ª–µ–π, {stats['menu_count']} –º–µ–Ω—é"
    )

    return registry


def validate_handler_module(module: HandlerModule) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        if not hasattr(module, "get_router"):
            logger.error(f"‚ùå {module.__name__}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç get_router()")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ get_router - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è
        if not callable(getattr(module, "get_router")):
            logger.error(f"‚ùå {module.__name__}: get_router –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º setup_menus –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(module, "setup_menus") and not callable(
            getattr(module, "setup_menus")
        ):
            logger.error(f"‚ùå {module.__name__}: setup_menus –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π")
            return False

        logger.info(f"‚úÖ {module.__name__}: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥—É–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå {module.__name__}: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - {e}")
        return False
