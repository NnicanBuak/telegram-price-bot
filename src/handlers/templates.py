import logging
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from menu import menu_handler

logger = logging.getLogger(__name__)


def get_router(deps) -> Router:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    router = Router()

    @menu_handler(deps.menu_manager, "templates_create")
    async def create_template(callback: types.CallbackQuery, context: dict):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
        await callback.message.edit_text(
            "‚ûï <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates"
                        )
                    ]
                ]
            ),
        )
        await callback.answer()

    @menu_handler(deps.menu_manager, "templates_list")
    async def list_templates(callback: types.CallbackQuery, context: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤"""
        try:
            templates = await deps.database.get_templates()

            if not templates:
                text = "üìÑ <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\n‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                text = f"üìÑ <b>–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤</b>\n\nüìä –ù–∞–π–¥–µ–Ω–æ: {len(templates)}\n\n"
                for template in templates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    icon = "üìé" if template.file_id else "üìÑ"
                    text += f"{icon} {template.name}\n"

                if len(templates) > 5:
                    text += f"\n... –∏ –µ—â–µ {len(templates) - 5} —à–∞–±–ª–æ–Ω–æ–≤"

            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_templates"
                            )
                        ]
                    ]
                ),
            )
            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)

    return router
