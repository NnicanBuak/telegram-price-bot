import asyncio
import logging
import sys
from typing import Any, Awaitable, Callable, Dict

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from database import Database
from menu import create_menu_system
import handlers

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
config = Config()
config.setup_logging()

logger = logging.getLogger(__name__)


class DependencyMiddleware:
    """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    def __init__(self, database: Database, menu_registry, config: Config):
        self.database = database
        self.menu_registry = menu_registry
        self.config = config

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        data.update(
            {
                "database": self.database,
                "menu_registry": self.menu_registry,
                "config": self.config,
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                **self.menu_registry.get_all_services(),
            }
        )
        return await handler(event, data)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Price Bot...")

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        errors = config.validate_config()
        if errors:
            logger.error("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                logger.error(f"  {error}")
            sys.exit(1)

        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.admin_ids}")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.get_database_info()['type']}")
        logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {config.debug}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        database = Database(config.database_url)
        await database.init()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
        logger.info("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é...")
        menu_manager, menu_registry = create_menu_system(config.admin_ids)
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é –≥–æ—Ç–æ–≤–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot = Bot(token=config.bot_token)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        dependency_middleware = DependencyMiddleware(database, menu_registry, config)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dp.message.middleware.register(dependency_middleware)
        dp.callback_query.middleware.register(dependency_middleware)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        registry = handlers.HandlerRegistry()

        registry.register_module(
            handlers.commands.CommandsModule("commands", config, database, menu_manager)
        )

        registry.setup_dispatcher(dp)

        stats = registry.get_statistics()
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {stats['total_modules']}")
        logger.info(f"üìã –ú–æ–¥—É–ª–∏: {', '.join(stats['module_names'])}")
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {stats['total_handlers']}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ID {bot_info.id}, Name: {bot_info.first_name}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        if config.environment == "development":
            for user_id in config.admin_ids:
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text="""–ë–æ—Ç –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
–ê–≤—Ç–æ–≤—ã–∑–æ–≤ /start...""",
                    )
                    await registry.call_handler(
                        "commands.start", chat_id=user_id, bot=bot
                    )
                    logger.info(f"‚òëÔ∏è –ë–æ—Ç –Ω–∞—á–∞–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –¥–ª—è {user_id}")
                except Exception as e:
                    logger.warning(
                        f"""‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –Ω–∞—á–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –¥–ª—è {user_id} –ø–æ –ø—Ä–∏—á–Ω–∏–µ:
                        {e}"""
                    )

        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query"],
            skip_updates=True,
            drop_pending_updates=True,
        )

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if "database" in locals():
            await database.close()
            logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)
