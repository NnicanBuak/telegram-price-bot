import asyncio
import logging
import sys
import os
from typing import Any, Awaitable, Callable, Dict

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from config import Config
from database import Database
from shared.menu_system import MenuManager, MenuMiddleware

from features import get_all_routers, setup_all_menus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


class DependencyInjectionMiddleware:
    """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""

    def __init__(self, database: Database, menu_manager: MenuManager):
        self.database = database
        self.menu_manager = menu_manager

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        data.update({"database": self.database, "menu_manager": self.menu_manager})
        return await handler(event, data)


def setup_basic_handlers(dp: Dispatcher, menu_manager: MenuManager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

    @dp.message(CommandStart())
    async def cmd_start(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        text, keyboard = menu_manager.render_menu("main", user_id)
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ <b>Telegram Price Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã

<b>üìù –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞
/id - –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/templates - –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
/groups - –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤
/mailing - –†–∞—Å—Å—ã–ª–∫–∞

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ"""
        await message.answer(help_text, parse_mode="HTML")

    @dp.message(Command("id"))
    async def cmd_id(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
        chat_info = f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
        chat_info += f"ID: <code>{message.chat.id}</code>\n"
        chat_info += f"–¢–∏–ø: {message.chat.type}\n"

        if message.chat.type != "private":
            chat_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            if message.chat.username:
                chat_info += f"Username: @{message.chat.username}\n"

        chat_info += f"\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        chat_info += f"ID: <code>{message.from_user.id}</code>\n"
        chat_info += f"–ò–º—è: {message.from_user.first_name}"

        if message.from_user.last_name:
            chat_info += f" {message.from_user.last_name}"

        if message.from_user.username:
            chat_info += f"\nUsername: @{message.from_user.username}"

        await message.answer(chat_info, parse_mode="HTML")

    @dp.message(Command("templates"))
    async def cmd_templates(message: types.Message):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–±–ª–æ–Ω–∞–º"""
        user_id = message.from_user.id
        text, keyboard = menu_manager.render_menu("templates", user_id)
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("groups"))
    async def cmd_groups(message: types.Message):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥—Ä—É–ø–ø–∞–º"""
        user_id = message.from_user.id
        text, keyboard = menu_manager.render_menu("groups", user_id)
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("mailing"))
    async def cmd_mailing(message: types.Message):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
        user_id = message.from_user.id
        text, keyboard = menu_manager.render_menu("mailing", user_id)
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
    @dp.callback_query(lambda c: c.data.startswith("menu_"))
    async def handle_menu_navigation(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é"""
        menu_id = callback.data.replace("menu_", "")
        success = await menu_manager.navigate_to(menu_id, callback)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)


def setup_routers(dp: Dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    routers = get_all_routers()
    for router in routers:
        dp.include_router(router)


def setup_middlewares(
    dp: Dispatcher, config: Config, database: Database, menu_manager: MenuManager
):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
    # Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    menu_middleware = MenuMiddleware(menu_manager, config.admin_ids)
    dp.message.middleware.register(menu_middleware)
    dp.callback_query.middleware.register(menu_middleware)

    # Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    di_middleware = DependencyInjectionMiddleware(database, menu_manager)
    dp.message.middleware.register(di_middleware)
    dp.callback_query.middleware.register(di_middleware)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Price Bot...")

    try:
        cfg = Config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        database = Database(cfg.database_url)
        await database.init_database()

        logger.info("üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é...")
        menu_manager = MenuManager(cfg.admin_ids)
        setup_all_menus(menu_manager)

        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(token=cfg.bot_token)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        setup_basic_handlers(dp, menu_manager)
        setup_routers(dp)
        setup_middlewares(dp, cfg, database, menu_manager)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        logger.info(f"üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {cfg.admin_ids}")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {cfg.database_url}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(
            bot, allowed_updates=["message", "callback_query"], skip_updates=True
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        if "database" in locals():
            await database.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
