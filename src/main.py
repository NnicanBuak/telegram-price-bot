#!/usr/bin/env python3
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import types

from config import Config
from database import Database
from menu_system import MenuManager, MenuMiddleware
from bot.menus import setup_bot_menus
from bot.handlers.menu_handlers import menu_router

# from bot.handlers.mailing_handlers import mailing_router
# from bot.handlers.template_handlers import template_router
# from bot.handlers.group_handlers import group_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∏ —Ç–µ—Å—Ç–∞—Ö
bot = None
db = None
menu_manager = None
bot_menus = None
config = None
dp = None


# ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê –í –¢–ï–°–¢–´ ==========


async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    global menu_manager
    if not menu_manager:
        await message.answer("‚ùå –ë–æ—Ç –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("main", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
/groups - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
/mailing - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
/id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É

<b>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    await message.answer(help_text, parse_mode="HTML")


async def cmd_id(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    chat_id = message.chat.id
    user_id = message.from_user.id

    text = f"<b>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
    text += f"üÜî ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
    text += f"üë§ –í–∞—à ID: <code>{user_id}</code>\n"
    text += f"üìù –¢–∏–ø —á–∞—Ç–∞: {message.chat.type}\n"

    if message.chat.title:
        text += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"

    await message.answer(text, parse_mode="HTML")


# ========== –§–£–ù–ö–¶–ò–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ==========


async def init_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global config
    logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        config = Config()
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—Ä–µ–∂–∏–º: {config.environment})")
        return config
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        raise


async def init_bot(config: Config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global bot
    logger.info("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞...")
    try:
        bot = Bot(
            token=config.bot_token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                protect_content=False,
                allow_sending_without_reply=True,
            ),
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        return bot
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        raise


async def init_database(config: Config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global db
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db = Database(config.database_url)
        await db.init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return db
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


async def init_menu_system(config: Config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é"""
    global menu_manager, bot_menus
    logger.info("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é...")
    try:
        menu_manager = MenuManager(config.admin_ids)
        bot_menus = setup_bot_menus(menu_manager)
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return menu_manager, bot_menus
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
        raise


async def init_dispatcher(config: Config, menu_manager: MenuManager):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global dp
    logger.info("üö¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher(storage=MemoryStorage())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        menu_middleware = MenuMiddleware(menu_manager, config.admin_ids)
        dp.message.middleware(menu_middleware)
        dp.callback_query.middleware(menu_middleware)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.message.register(cmd_start, Command("start"))
        dp.message.register(cmd_help, Command("help"))
        dp.message.register(cmd_id, Command("id"))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(menu_router)
        # dp.include_router(mailing_router)
        # dp.include_router(template_router)
        # dp.include_router(group_router)

        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return dp
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
        raise


# ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot, db, menu_manager, bot_menus, config, dp

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Price Bot...")

    try:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        config = await init_config()
        bot = await init_bot(config)
        db = await init_database(config)
        menu_manager, bot_menus = await init_menu_system(config)
        dp = await init_dispatcher(config, menu_manager)

        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.admin_ids}")
        logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.database_url}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await cleanup()


async def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

    global bot, db, dp

    if dp:
        await dp.stop_polling()
        logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    if db:
        await db.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")

    if bot:
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

    logger.info("üèÅ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–û–í ==========


async def get_bot_instance():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    global bot
    if not bot:
        config = await init_config()
        bot = await init_bot(config)
    return bot


async def get_db_instance():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    global db
    if not db:
        config = await init_config()
        db = await init_database(config)
    return db


async def get_menu_manager_instance():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–Ω—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    global menu_manager
    if not menu_manager:
        config = await init_config()
        menu_manager, _ = await init_menu_system(config)
    return menu_manager


def reset_global_state():
    """–°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    global bot, db, menu_manager, bot_menus, config, dp
    bot = None
    db = None
    menu_manager = None
    bot_menus = None
    config = None
    dp = None


# ========== –¢–û–ß–ö–ê –í–•–û–î–ê ==========

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
