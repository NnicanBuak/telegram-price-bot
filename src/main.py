import asyncio
import logging
from pathlib import Path
import sys
from typing import Any, Awaitable, Callable, Dict

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import Config
from database import Database
from features import setup_features


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


def create_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã", callback_data="groups")],
            [InlineKeyboardButton(text="üìÆ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="mailing")],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        ]
    )


class CoreHandlers:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self, config: Config):
        self.config = config
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.message(CommandStart())(self.cmd_start)
        self.router.message(Command("help"))(self.cmd_help)
        self.router.message(Command("id"))(self.cmd_id)
        self.router.callback_query(F.data == "main")(self.show_main)

        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö features
        self.router.callback_query(F.data == "groups")(self.groups_placeholder)
        self.router.callback_query(F.data == "mailing")(self.mailing_placeholder)
        self.router.callback_query(F.data == "history")(self.history_placeholder)

    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = message.from_user.id

        if not self.config.is_admin(user_id):
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode="HTML",
            )
            return

        await message.answer(
            "ü§ñ <b>Telegram Price Bot</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=create_main_keyboard(),
            parse_mode="HTML",
        )

    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await message.answer(
            "üìã <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üîπ <b>–®–∞–±–ª–æ–Ω—ã</b> - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏\n"
            "üîπ <b>–ì—Ä—É–ø–ø—ã</b> - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "üîπ <b>–†–∞—Å—Å—ã–ª–∫–∞</b> - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º\n"
            "üîπ <b>–ò—Å—Ç–æ—Ä–∏—è</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞",
            parse_mode="HTML",
        )

    async def cmd_id(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /id"""
        info = (
            f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
            f"ID —á–∞—Ç–∞: <code>{message.chat.id}</code>\n"
            f"–¢–∏–ø —á–∞—Ç–∞: {message.chat.type}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{message.from_user.id}</code>\n"
        )

        if message.chat.title:
            info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
        if message.from_user.username:
            info += f"Username: @{message.from_user.username}\n"

        info += "\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã</i>"

        await message.answer(info, parse_mode="HTML")

    async def show_main(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=create_main_keyboard(),
            parse_mode="HTML",
        )
        await callback.answer()

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö features
    async def groups_placeholder(self, callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤</b>\n\n"
            "üöß <i>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>\n\n"
            "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
                ]
            ),
            parse_mode="HTML",
        )
        await callback.answer()

    async def mailing_placeholder(self, callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üìÆ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "üöß <i>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>\n\n"
            "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
                ]
            ),
            parse_mode="HTML",
        )
        await callback.answer()

    async def history_placeholder(self, callback: types.CallbackQuery):
        await callback.message.edit_text(
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            "üöß <i>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>\n\n"
            "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
                ]
            ),
            parse_mode="HTML",
        )
        await callback.answer()


class AdminMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    def __init__(self, config: Config):
        self.config = config

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(event, "chat") and event.chat.type == "private":
            user_id = event.from_user.id
            if not self.config.is_admin(user_id):
                if isinstance(event, types.Message):
                    await event.answer(
                        "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                        "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                        parse_mode="HTML",
                    )
                elif isinstance(event, types.CallbackQuery):
                    await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return

        return await handler(event, data)


class DependencyMiddleware:
    """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

    def __init__(self, database: Database, feature_registry):
        self.database = database
        self.feature_registry = feature_registry

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        """–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        data.update(
            {
                "database": self.database,
                "feature_registry": self.feature_registry,
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                **self.feature_registry.get_all_services(),
            }
        )
        return await handler(event, data)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    sys.path.append(str(Path(__file__).resolve().parent.parent / "shared"))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Price Bot...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = Config()
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {config.admin_ids}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        database = Database(config.database_url)
        await database.init()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è features
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ features...")
        feature_registry = setup_features(database)
        logger.info("‚úÖ Features –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot = Bot(token=config.bot_token)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
        admin_middleware = AdminMiddleware(config)
        dependency_middleware = DependencyMiddleware(database, feature_registry)

        dp.message.middleware.register(admin_middleware)
        dp.callback_query.middleware.register(admin_middleware)
        dp.message.middleware.register(dependency_middleware)
        dp.callback_query.middleware.register(dependency_middleware)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        core_handlers = CoreHandlers(config)
        dp.include_router(core_handlers.router)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ features
        for router in feature_registry.get_routers():
            dp.include_router(router)

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(
            bot, allowed_updates=["message", "callback_query"], skip_updates=True
        )

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if "database" in locals():
            await database.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
