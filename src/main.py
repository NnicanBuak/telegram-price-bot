#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
from datetime import datetime
from typing import List, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import Config
from database import Database, Template, ChatGroup, Mailing
from menu_system import MenuManager, MenuMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py)
class TemplateStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_text = State()
    waiting_for_file = State()


class GroupStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_chats = State()


class MailingStates(StatesGroup):
    selecting_template = State()
    selecting_groups = State()
    confirming = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = Config()
bot = Bot(token=config.bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database(config.database_url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
menu_manager = MenuManager(admin_ids=config.admin_ids)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
menu_middleware = MenuMiddleware(menu_manager)
dp.message.middleware(menu_middleware)
dp.callback_query.middleware(menu_middleware)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º –∏–º–ø–æ—Ä—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö)
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

    async def wrapper(update, *args, **kwargs):
        user_id = (
            update.from_user.id
            if hasattr(update, "from_user")
            else update.message.from_user.id
        )
        if user_id not in config.admin_ids:
            return
        return await func(update, *args, **kwargs)

    return wrapper


# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞) ==========


@dp.message(CommandStart())
async def cmd_start(message: types.Message, menu_manager: MenuManager):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    text, keyboard = menu_manager.render_menu("main", user_id)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@dp.message(Command("help"))
async def cmd_help(message: types.Message, menu_manager: MenuManager):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/templates - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
/groups - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ —á–∞—Ç–æ–≤
/mailing - –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/history - –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫

<b>üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
2. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–±—Ä–∞–≤ —à–∞–±–ª–æ–Ω –∏ –≥—Ä—É–ø–ø—ã

<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–∞—Ö
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    """
    await message.answer(help_text, parse_mode="HTML")


# ========== –†–ê–ë–û–¢–ê –° –®–ê–ë–õ–û–ù–ê–ú–ò ==========


@dp.message(Command("templates"))
@dp.callback_query(F.data == "templates")
async def show_templates(update: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤"""
    message = update if isinstance(update, types.Message) else update.message

    templates = await db.get_templates()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üìÑ {t.name}", callback_data=f"template_{t.id}"
                )
            ]
            for t in templates
        ]
        + [
            [
                InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="new_template"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

    text = (
        "üìã <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
        if templates
        else "üìã <b>–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
    )

    if isinstance(update, types.CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@dp.callback_query(F.data == "new_template")
async def new_template(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="templates")]
            ]
        ),
    )
    await state.set_state(TemplateStates.waiting_for_name)
    await callback.answer()


@dp.message(TemplateStates.waiting_for_name)
async def template_name_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    await state.update_data(name=message.text)
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:\n\n" "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞</i>",
        parse_mode="HTML",
    )
    await state.set_state(TemplateStates.waiting_for_text)


@dp.message(TemplateStates.waiting_for_text)
async def template_text_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""
    await state.update_data(text=message.text)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìé –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="attach_file"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞", callback_data="save_template"
                )
            ],
        ]
    )

    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É?", reply_markup=keyboard)


@dp.callback_query(F.data == "attach_file")
async def request_file(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="save_template")]
            ]
        ),
    )
    await state.set_state(TemplateStates.waiting_for_file)
    await callback.answer()


@dp.message(TemplateStates.waiting_for_file, F.document | F.photo)
async def file_received(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞"""
    if message.document:
        file_id = message.document.file_id
        file_type = "document"
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_type = "photo"

    await state.update_data(file_id=file_id, file_type=file_type)
    await save_template_to_db(message, state)


@dp.callback_query(F.data == "save_template")
async def save_template_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ —Ñ–∞–π–ª–∞"""
    await save_template_to_db(callback.message, state)
    await callback.answer()


async def save_template_to_db(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ –ë–î"""
    data = await state.get_data()

    template = await db.create_template(
        name=data["name"],
        text=data["text"],
        file_id=data.get("file_id"),
        file_type=data.get("file_type"),
    )

    await message.answer(
        f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{template.name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="templates"
                    )
                ]
            ]
        ),
    )
    await state.clear()


# ========== –†–ê–ë–û–¢–ê –° –ì–†–£–ü–ü–ê–ú–ò –ß–ê–¢–û–í ==========


@dp.message(Command("groups"))
@dp.callback_query(F.data == "groups")
async def show_groups(update: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —á–∞—Ç–æ–≤"""
    message = update if isinstance(update, types.Message) else update.message

    groups = await db.get_chat_groups()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üë• {g.name} ({len(g.chat_ids)} —á–∞—Ç–æ–≤)",
                    callback_data=f"group_{g.id}",
                )
            ]
            for g in groups
        ]
        + [
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_group")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

    text = (
        "üë• <b>–ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤:</b>\n\n" if groups else "üë• <b>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
    )

    if isinstance(update, types.CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ø–∏—Ä—É–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ bot.py)

# ========== –ü–û–õ–£–ß–ï–ù–ò–ï ID –ß–ê–¢–ê ==========


@dp.message(Command("id"))
async def get_chat_id(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
    chat_info = f"üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
    chat_info += f"ID: <code>{message.chat.id}</code>\n"

    if message.chat.type != "private":
        chat_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
        chat_info += f"–¢–∏–ø: {message.chat.type}\n"

    await message.answer(chat_info, parse_mode="HTML")


# ========== –ù–ê–í–ò–ì–ê–¶–ò–Ø ==========


@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –®–∞–±–ª–æ–Ω—ã", callback_data="templates")],
            [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã —á–∞—Ç–æ–≤", callback_data="groups")],
            [
                InlineKeyboardButton(
                    text="üìÆ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_mailing"
                )
            ],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="history")],
        ]
    )

    await callback.message.edit_text(
        "ü§ñ <b>–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db.init_db()

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
